import{_ as c,r as p,o as i,c as l,a as n,b as s,w as t,e as u,d as e}from"./app-DXokG_9I.js";const d={},r=n("h1",{id:"模型关联",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模型关联"},[n("span",null,"模型关联")])],-1),k={class:"table-of-contents"},m=u(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>数据库表通常相互关联。例如，一篇博客文章可能有许多评论，或者一个订单对应一个下单用户。Orm 让这些关联的管理和使用变得简单，并支持多种常用的关联类型：</p><ul><li><a href="#%E4%B8%80%E5%AF%B9%E4%B8%80">一对一</a></li><li><a href="#%E4%B8%80%E5%AF%B9%E5%A4%9A">一对多</a></li><li><a href="#%E5%A4%9A%E5%AF%B9%E5%A4%9A">多对多</a></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li></ul><h2 id="定义关联" tabindex="-1"><a class="header-anchor" href="#定义关联"><span>定义关联</span></a></h2><h3 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>一对一</span></a></h3><p>一对一是最基本的数据库关系。 例如，一个 <code>User</code> 模型可能与一个 <code>Phone</code> 模型相关联。为了定义这个关联关系，我们要在 <code>User</code> 模型中定义一个 <code>Phone</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Phone   <span class="token operator">*</span>Phone
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Phone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  UserID   <span class="token builtin">uint</span>
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Orm 基于父模型（<code>User</code>）的名称来确定关联模型（<code>Phone</code>）的外键名称。在本例中，会自动假定 <code>Phone</code> 模型有一个 <code>UserID</code> 的外键。如果你想重写这个约定，可以在 <code>User</code> 模型中为 <code>Phone</code> 字段添加 <code>foreignKey</code> Tag（其他关联关系类同）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Phone   <span class="token operator">*</span>Phone <span class="token string">\`gorm:&quot;foreignKey:UserName&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Phone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  UserName <span class="token builtin">string</span>
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，<code>Orm</code> 假设外键的值是与父模型的主键（Primary Key）相同的。换句话说，<code>Orm</code> 将会通过 <code>Phone</code> 记录的 <code>UserID</code> 列中查找与用户表的 <code>id</code> 列相匹配的值。如果你希望使用自定义的主键值，可以在 <code>User</code> 模型中为 <code>Phone</code> 字段添加 <code>references</code> Tag（其他关联关系类同）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Phone   <span class="token operator">*</span>Phone <span class="token string">\`gorm:&quot;foreignKey:UserName;references:name&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Phone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  UserName <span class="token builtin">string</span>
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义反向关联" tabindex="-1"><a class="header-anchor" href="#定义反向关联"><span>定义反向关联</span></a></h4><p>我们已经能从 <code>User</code> 模型访问到 <code>Phone</code> 模型了。接下来，让我们再在 <code>Phone</code> 模型上定义一个关联，它能让我们访问到拥有该电话的用户。我们可以在 <code>Phone</code> 模型中定义一个 <code>User</code> 字段：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Phone <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  UserID   <span class="token builtin">uint</span>
  Name   <span class="token builtin">string</span>
  User   <span class="token operator">*</span>User
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多"><span>一对多</span></a></h3><p>当要定义一个模型是其他 （一个或者多个）模型的父模型这种关系时，可以使用一对多关联。例如，一篇博客可以有很多条评论。和一对一模型关联一样，一对多关联也是在 Orm 模型文件中定义一个字段：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Post <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Comments <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Comment
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Comment <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  PostID   <span class="token builtin">uint</span>
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，Orm 将会自动为 <code>Comment</code> 模型选择一个合适的外键。通常，这个外键是通过使用父模型的「驼峰命名」方式，然后再加上 <code>ID</code> 的方式来命名的。因此，在上面这个例子中，Orm 将会默认 <code>Comment</code> 模型的外键是 <code>PostID</code> 字段。</p><h3 id="一对多-反向-属于" tabindex="-1"><a class="header-anchor" href="#一对多-反向-属于"><span>一对多 (反向) / 属于</span></a></h3><p>目前我们可以访问一篇文章的所有评论，下面我们可以定义一个关联关系，从而让我们可以通过一条评论来获取到它所属的文章。这个关联关系是 <code>One To Many</code> 的反向，可以在子模型中通过定义父模型字段：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Post <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Comments <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Comment
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Comment <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  PostID   <span class="token builtin">uint</span>
  Name   <span class="token builtin">string</span>
  Post   <span class="token operator">*</span>Post
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多对多关联" tabindex="-1"><a class="header-anchor" href="#多对多关联"><span>多对多关联</span></a></h2><p>多对多关联比 <code>hasOne</code> 和 <code>hasMany</code> 关联稍微复杂些。举个例子，一个用户可以拥有多个角色，同时这些角色也可以分配给其他用户。例如，一个用户可是「作者」和「编辑」；当然，这些角色也可以分配给其他用户。所以，一个用户可以拥有多个角色，一个角色可以分配给多个用户。</p><h3 id="表结构" tabindex="-1"><a class="header-anchor" href="#表结构"><span>表结构</span></a></h3><p>要定义这种关联，需要三个数据库表: <code>users</code>, <code>roles</code> 和 <code>role_user</code>。<code>role_user</code> 表的命名可以自定义。该表包含了 <code>user_id</code> 和 <code>role_id</code> 字段，用作链接 <code>users</code> 和 <code>roles</code> 的中间表。</p><p>特别提醒，由于角色可以属于多个用户，因此我们不能简单地在 <code>roles</code> 表上放置 <code>user_id</code> 列。如果这样，这意味着角色只能属于一个用户。为了支持将角色分配给多个用户，需要使用 <code>role_user</code> 表。我们可以这样定义表结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>users
  id - integer
  name - string

roles
  id - integer
  name - string

role_user
  user_id - integer
  role_id - integer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模型结构" tabindex="-1"><a class="header-anchor" href="#模型结构"><span>模型结构</span></a></h3><p>我们可以在 <code>User</code> 模型上定义一个 <code>Roles</code> 字段：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Roles   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Role <span class="token string">\`gorm:&quot;many2many:role_user&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Role <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="定义反向关联-1" tabindex="-1"><a class="header-anchor" href="#定义反向关联-1"><span>定义反向关联</span></a></h3><p>要定义多对多的反向关联，只需要在 <code>Role</code> 模型中定义 <code>Users</code> 字段并附加 Tag：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Roles   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Role <span class="token string">\`gorm:&quot;many2many:role_user&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Role <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Users  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User <span class="token string">\`gorm:&quot;many2many:role_user&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义中间表" tabindex="-1"><a class="header-anchor" href="#自定义中间表"><span>自定义中间表</span></a></h3><p>通常，中间表外键是通过使用父模型的「蛇形」方式，然后再加上 <code>_id</code>，您可以使用 <code>joinForeignKey</code> 与 <code>joinReferences</code> 对它进行重写：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Roles   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Role <span class="token string">\`gorm:&quot;many2many:role_user;joinForeignKey:UserName;joinReferences:RoleName&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Role <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应表结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>users
  id - integer
  name - string

roles
  id - integer
  name - string

role_user
  user_name - integer
  role_name - integer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h2><p>多态关联允许目标模型借助单个关联从属于多个模型。例如，你正在构建一个允许用户共享博客文章和视频的应用程序，其中 <code>Comment</code> 模型可能同时从属于 <code>Post</code> 和 <code>Video</code> 模型。目前仅有 <code>One To One</code> 与 <code>One To Many</code> 支持多态。</p><h3 id="表结构-1" tabindex="-1"><a class="header-anchor" href="#表结构-1"><span>表结构</span></a></h3><p>多态关联与简单的关联类似，不过，目标模型能够在一个关联上从属于多个模型。例如，博客 <code>Post</code> 和 <code>Video</code> 可能共享一个关联到 <code>Image</code> 模型的关系，同时共享多个关联到 <code>Comment</code> 模型。让我们先看看表结构：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>posts
  id - integer
  name - string

videos
  id - integer
  name - string

images
  id - integer
  url - string
  imageable_id - integer
  imageable_type - string

comments
  id - integer
  body - text
  commentable_id - integer
  commentable_type - string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要特别留意 <code>images</code> 表的 <code>imageable_id</code> 和 <code>imageable_type</code> 列。<code>imageable_id</code> 列包含文章或用户的 ID 值，而 <code>imageable_type</code> 列包含的则是父模型的类名。Orm 在访问 <code>imageable</code> 时使用 <code>imageable_type</code> 列来判断父模型的「类型」。<code>comments</code> 表类同。</p><h3 id="模型结构-1" tabindex="-1"><a class="header-anchor" href="#模型结构-1"><span>模型结构</span></a></h3><p>接下来，再看看建立关联的模型定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Post <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name     <span class="token builtin">string</span>
  Image    <span class="token operator">*</span>Image <span class="token string">\`gorm:&quot;polymorphic:Imageable&quot;\`</span>
  Comments <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Comment <span class="token string">\`gorm:&quot;polymorphic:Commentable&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Video <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name     <span class="token builtin">string</span>
  Image    <span class="token operator">*</span>Image <span class="token string">\`gorm:&quot;polymorphic:Imageable&quot;\`</span>
  Comments <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Comment <span class="token string">\`gorm:&quot;polymorphic:Commentable&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Image <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name          <span class="token builtin">string</span>
  ImageableID   <span class="token builtin">uint</span>
  ImageableType <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Comment <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name            <span class="token builtin">string</span>
  CommentableID   <span class="token builtin">uint</span>
  CommentableType <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用标签 <code>polymorphicValue</code> 来更改多态类型的值，例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Post <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
  Image   <span class="token operator">*</span>Image <span class="token string">\`gorm:&quot;polymorphic:Imageable;polymorphicValue:master&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关联操作" tabindex="-1"><a class="header-anchor" href="#关联操作"><span>关联操作</span></a></h2><p>假设有一个博客系统，它的 <code>User</code> 模型有许多关联的 <code>Post</code> 模型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Posts  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Post
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Post <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  UserID   <span class="token builtin">uint</span>
  Name     <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建-更新关联" tabindex="-1"><a class="header-anchor" href="#创建-更新关联"><span>创建/更新关联</span></a></h3><p>可以使用 <code>Select</code>, <code>Omit</code> 方法，对关联的创建和更新进行更细颗粒度控制。这两个方法不可同时使用，且对关联的控制功能只适用于 <code>Create</code>, <code>Update</code>, <code>Save</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> Post<span class="token punctuation">:</span> <span class="token operator">&amp;</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token comment">// 创建 User 的同时创建所有子关联</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>orm<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// 创建 User 的同时只创建 Post 子关联。注意：如果不使用 \`orm.Associations\`，而是单独自定义特定子关联，则此时也应将所有父模型中的字段列出。</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// 创建 User 时，忽略 Post 关联，但创建其他所有子关联</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;Post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// 创建 User 时，忽略 Name 字段，但创建所有子关联</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// 创建 User 时，忽略 Name 字段与所有子关联</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span> orm<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查找关联" tabindex="-1"><a class="header-anchor" href="#查找关联"><span>查找关联</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 查找所有匹配的关联记录</span>
<span class="token keyword">var</span> posts <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>Post
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>posts<span class="token punctuation">)</span>

<span class="token comment">// 查找带条件的关联</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;id desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>posts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加关联" tabindex="-1"><a class="header-anchor" href="#添加关联"><span>添加关联</span></a></h3><p>为 <code>manyToMany</code>, <code>hasMany</code> 添加新的关联；为 <code>hasOne</code>, <code>belongsTo</code> 替换当前的关联:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Post1<span class="token punctuation">,</span> Post2<span class="token punctuation">}</span><span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替换关联" tabindex="-1"><a class="header-anchor" href="#替换关联"><span>替换关联</span></a></h3><p>用一个新的关联替换当前的关联：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Post1<span class="token punctuation">,</span> Post2<span class="token punctuation">}</span><span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Post2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除关联" tabindex="-1"><a class="header-anchor" href="#删除关联"><span>删除关联</span></a></h3><p>如果关联存在，则删除父模型与子模型之间的关系，注意，只会删除引用，不会从数据库中删除这些对象，外键需要允许为 NULL：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">{</span>Post1<span class="token punctuation">,</span> Post2<span class="token punctuation">}</span><span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>Post1<span class="token punctuation">,</span> Post2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="清空关联" tabindex="-1"><a class="header-anchor" href="#清空关联"><span>清空关联</span></a></h3><p>删除父模型与子模型之间的所有引用，但不会删除这些关联：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="关联计数" tabindex="-1"><a class="header-anchor" href="#关联计数"><span>关联计数</span></a></h3><p>返回当前关联的数量：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 条件计数</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="批量处理数据" tabindex="-1"><a class="header-anchor" href="#批量处理数据"><span>批量处理数据</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 查询所有用户的所有文章</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>posts<span class="token punctuation">)</span>

<span class="token comment">// 从所有 Post 中删除 user A</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">)</span>

<span class="token comment">// 获取去重的用户所属 Post 数量</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 对于批量数据的 \`Append\`、\`Replace\`，参数的长度必须与数据的长度相同，否则会返回 error</span>
<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">}</span>

<span class="token comment">// 有三个 user，Append userA 到 user1 的 team，Append userB 到 user2 的 team，Append userA、userB 和 userC 到 user3 的 team</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>userB<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>userA<span class="token punctuation">,</span> userB<span class="token punctuation">,</span> userC<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 重置 user1 team 为 userA，重置 user2 的 team 为 userB，重置 user3 的 team 为 userA、 userB 和 userC</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Association</span><span class="token punctuation">(</span><span class="token string">&quot;Team&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>userB<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>userA<span class="token punctuation">,</span> userB<span class="token punctuation">,</span> userC<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预加载" tabindex="-1"><a class="header-anchor" href="#预加载"><span>预加载</span></a></h2><p>预加载为多个模型的查询提供方便，同时减轻了 <code>N + 1</code> 查询问题。 为了说明 <code>N + 1</code> 查询问题，请参考属于 <code>Author</code> 模型的 <code>Book</code> 模型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name  <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Book <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  AuthorID   <span class="token builtin">uint</span>
  Name       <span class="token builtin">string</span>
  Author     <span class="token operator">*</span>Author
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们检索所有书籍及其作者：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> books models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>books<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> book <span class="token operator">:=</span> <span class="token keyword">range</span> books <span class="token punctuation">{</span>
  <span class="token keyword">var</span> author models<span class="token punctuation">.</span>Author
  facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>author<span class="token punctuation">,</span> book<span class="token punctuation">.</span>AuthorID<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该循环将执行一个查询以检索数据库表中的所有书籍，然后对每本书执行另一个查询以检索该书的作者。 因此，如果我们有 25 本书，上面的代码将运行 26 个查询：一个查询原本的书籍信息，另外 25 个查询来检索每本书的作者。</p><p>值得庆幸的是，我们可以使用预加载将这个操作减少到两个查询。 在构建查询时，可以使用 with 方法指定应该预加载哪些关系：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> books models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>books<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> book <span class="token operator">:=</span> <span class="token keyword">range</span> books <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>Author<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于此操作，将只执行两个查询 - 一个查询检索所有书籍，一个查询检索所有书籍的所有作者：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>books<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">where</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预加载多个关联" tabindex="-1"><a class="header-anchor" href="#预加载多个关联"><span>预加载多个关联</span></a></h3><p>有时，你可能需要在单一操作中预加载几个不同的关联。要达成此目的，只需要多次调用 <code>With</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> book models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Publisher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套预加载" tabindex="-1"><a class="header-anchor" href="#嵌套预加载"><span>嵌套预加载</span></a></h3><p>可以使用 「点」 语法预加载嵌套关联。比如在一个 Orm 语句中预加载所有书籍作者及其联系方式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> book models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author.Contacts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为预加载添加约束" tabindex="-1"><a class="header-anchor" href="#为预加载添加约束"><span>为预加载添加约束</span></a></h3><p>有时，你可能希望预加载一个关联，同时为预加载查询添加额外查询条件。您可以通过下面方法来实现这一点：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database/orm&quot;</span>

<span class="token keyword">var</span> book models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">With</span><span class="token punctuation">(</span><span class="token string">&quot;Author&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>query orm<span class="token punctuation">.</span>Query<span class="token punctuation">)</span> orm<span class="token punctuation">.</span>Query <span class="token punctuation">{</span>
  <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Orm 只会预加载作者的 <code>name</code> 列等于 <code>author</code> 的书籍。</p><h3 id="延迟预加载" tabindex="-1"><a class="header-anchor" href="#延迟预加载"><span>延迟预加载</span></a></h3><p>有时你可能需要在已检索到父模型后立即加载关系。例如，你需要动态决定是否加载相关模型，这可能很有用：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> books models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>books<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> book <span class="token operator">:=</span> <span class="token keyword">range</span> books <span class="token punctuation">{</span>
  <span class="token keyword">if</span> someCondition <span class="token punctuation">{</span>
    err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">,</span> <span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在延迟预加载的查询语句中进行条件约束，可以使用如下写法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database/orm&quot;</span>

<span class="token keyword">var</span> book models<span class="token punctuation">.</span>Book
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">,</span> <span class="token string">&quot;Author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">,</span> <span class="token string">&quot;Author&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>query orm<span class="token punctuation">.</span>Query<span class="token punctuation">)</span> orm<span class="token punctuation">.</span>Query <span class="token punctuation">{</span>
  <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望仅加载未被加载的关联关系时，你可以使用 <code>LoadMissing</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LoadMissing</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>book<span class="token punctuation">,</span> <span class="token string">&quot;Author&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,101);function v(b,g){const a=p("router-link"),o=p("CommentService");return i(),l("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#简介"},{default:t(()=>[e("简介")]),_:1})]),n("li",null,[s(a,{to:"#定义关联"},{default:t(()=>[e("定义关联")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#一对一"},{default:t(()=>[e("一对一")]),_:1})]),n("li",null,[s(a,{to:"#一对多"},{default:t(()=>[e("一对多")]),_:1})]),n("li",null,[s(a,{to:"#一对多-反向-属于"},{default:t(()=>[e("一对多 (反向) / 属于")]),_:1})])])]),n("li",null,[s(a,{to:"#多对多关联"},{default:t(()=>[e("多对多关联")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#表结构"},{default:t(()=>[e("表结构")]),_:1})]),n("li",null,[s(a,{to:"#模型结构"},{default:t(()=>[e("模型结构")]),_:1})]),n("li",null,[s(a,{to:"#定义反向关联-1"},{default:t(()=>[e("定义反向关联")]),_:1})]),n("li",null,[s(a,{to:"#自定义中间表"},{default:t(()=>[e("自定义中间表")]),_:1})])])]),n("li",null,[s(a,{to:"#多态"},{default:t(()=>[e("多态")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#表结构-1"},{default:t(()=>[e("表结构")]),_:1})]),n("li",null,[s(a,{to:"#模型结构-1"},{default:t(()=>[e("模型结构")]),_:1})])])]),n("li",null,[s(a,{to:"#关联操作"},{default:t(()=>[e("关联操作")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#创建-更新关联"},{default:t(()=>[e("创建/更新关联")]),_:1})]),n("li",null,[s(a,{to:"#查找关联"},{default:t(()=>[e("查找关联")]),_:1})]),n("li",null,[s(a,{to:"#添加关联"},{default:t(()=>[e("添加关联")]),_:1})]),n("li",null,[s(a,{to:"#替换关联"},{default:t(()=>[e("替换关联")]),_:1})]),n("li",null,[s(a,{to:"#删除关联"},{default:t(()=>[e("删除关联")]),_:1})]),n("li",null,[s(a,{to:"#清空关联"},{default:t(()=>[e("清空关联")]),_:1})]),n("li",null,[s(a,{to:"#关联计数"},{default:t(()=>[e("关联计数")]),_:1})]),n("li",null,[s(a,{to:"#批量处理数据"},{default:t(()=>[e("批量处理数据")]),_:1})])])]),n("li",null,[s(a,{to:"#预加载"},{default:t(()=>[e("预加载")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#预加载多个关联"},{default:t(()=>[e("预加载多个关联")]),_:1})]),n("li",null,[s(a,{to:"#嵌套预加载"},{default:t(()=>[e("嵌套预加载")]),_:1})]),n("li",null,[s(a,{to:"#为预加载添加约束"},{default:t(()=>[e("为预加载添加约束")]),_:1})]),n("li",null,[s(a,{to:"#延迟预加载"},{default:t(()=>[e("延迟预加载")]),_:1})])])])])]),m,s(o)])}const f=c(d,[["render",v],["__file","relationships.html.vue"]]),y=JSON.parse('{"path":"/zh/orm/relationships.html","title":"模型关联","lang":"zh-CN","frontmatter":{"description":"模型关联 简介 数据库表通常相互关联。例如，一篇博客文章可能有许多评论，或者一个订单对应一个下单用户。Orm 让这些关联的管理和使用变得简单，并支持多种常用的关联类型： 一对一 一对多 多对多 多态 定义关联 一对一 一对一是最基本的数据库关系。 例如，一个 User 模型可能与一个 Phone 模型相关联。为了定义这个关联关系，我们要在 User 模...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/orm/relationships.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/orm/relationships.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/relationships.html"}],["meta",{"property":"og:description","content":"模型关联 简介 数据库表通常相互关联。例如，一篇博客文章可能有许多评论，或者一个订单对应一个下单用户。Orm 让这些关联的管理和使用变得简单，并支持多种常用的关联类型： 一对一 一对多 多对多 多态 定义关联 一对一 一对一是最基本的数据库关系。 例如，一个 User 模型可能与一个 Phone 模型相关联。为了定义这个关联关系，我们要在 User 模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模型关联\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"定义关联","slug":"定义关联","link":"#定义关联","children":[{"level":3,"title":"一对一","slug":"一对一","link":"#一对一","children":[]},{"level":3,"title":"一对多","slug":"一对多","link":"#一对多","children":[]},{"level":3,"title":"一对多 (反向) / 属于","slug":"一对多-反向-属于","link":"#一对多-反向-属于","children":[]}]},{"level":2,"title":"多对多关联","slug":"多对多关联","link":"#多对多关联","children":[{"level":3,"title":"表结构","slug":"表结构","link":"#表结构","children":[]},{"level":3,"title":"模型结构","slug":"模型结构","link":"#模型结构","children":[]},{"level":3,"title":"定义反向关联","slug":"定义反向关联-1","link":"#定义反向关联-1","children":[]},{"level":3,"title":"自定义中间表","slug":"自定义中间表","link":"#自定义中间表","children":[]}]},{"level":2,"title":"多态","slug":"多态","link":"#多态","children":[{"level":3,"title":"表结构","slug":"表结构-1","link":"#表结构-1","children":[]},{"level":3,"title":"模型结构","slug":"模型结构-1","link":"#模型结构-1","children":[]}]},{"level":2,"title":"关联操作","slug":"关联操作","link":"#关联操作","children":[{"level":3,"title":"创建/更新关联","slug":"创建-更新关联","link":"#创建-更新关联","children":[]},{"level":3,"title":"查找关联","slug":"查找关联","link":"#查找关联","children":[]},{"level":3,"title":"添加关联","slug":"添加关联","link":"#添加关联","children":[]},{"level":3,"title":"替换关联","slug":"替换关联","link":"#替换关联","children":[]},{"level":3,"title":"删除关联","slug":"删除关联","link":"#删除关联","children":[]},{"level":3,"title":"清空关联","slug":"清空关联","link":"#清空关联","children":[]},{"level":3,"title":"关联计数","slug":"关联计数","link":"#关联计数","children":[]},{"level":3,"title":"批量处理数据","slug":"批量处理数据","link":"#批量处理数据","children":[]}]},{"level":2,"title":"预加载","slug":"预加载","link":"#预加载","children":[{"level":3,"title":"预加载多个关联","slug":"预加载多个关联","link":"#预加载多个关联","children":[]},{"level":3,"title":"嵌套预加载","slug":"嵌套预加载","link":"#嵌套预加载","children":[]},{"level":3,"title":"为预加载添加约束","slug":"为预加载添加约束","link":"#为预加载添加约束","children":[]},{"level":3,"title":"延迟预加载","slug":"延迟预加载","link":"#延迟预加载","children":[]}]}],"git":{},"filePathRelative":"zh/orm/relationships.md","autoDesc":true}');export{f as comp,y as data};
