import{_ as l,r as p,o as u,c as r,a as n,b as a,w as e,d as s,e as i}from"./app-dLfBHcc1.js";const d={},k=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started"},[n("span",null,"Getting Started")])],-1),v={class:"table-of-contents"},m=i(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>The testing function of Goravel relies on Golang&#39;s official test component, extending unit testing to support integration testing and improve application robustness.</p><h2 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>Environment</span></a></h2><h3 id="custom-environment-file" tabindex="-1"><a class="header-anchor" href="#custom-environment-file"><span>Custom Environment File</span></a></h3><p>By default, the <code>.env</code> file in the root directory is used to inject configuration information during testing. If you want to use different <code>.env</code> files for different packages, you can create a <code>.env</code> file in the package directory, and the test will read this file first.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- /app
- /config
- ...
- /test
  - /feature
    - .env
    - user_test.go
- .env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, you may create a <code>.env.testing</code> file at the root of your project. This file will be used instead of the <code>.env</code> file when running <code>go test</code> with the <code>--env</code> option, note that this option needs to follow the test directory, for example:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>. <span class="token parameter variable">--env</span><span class="token operator">=</span>.env.testing
go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>. <span class="token parameter variable">-e</span><span class="token operator">=</span>.env.testing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testcase-struct" tabindex="-1"><a class="header-anchor" href="#testcase-struct"><span><code>TestCase</code> Struct</span></a></h3><p>There is a <code>TestCase</code> Struct in Goravel, and the Struct will provide some convenient test methods in the future, in addition, there is an <code>init</code> method in the same file, this method guides the registration of the Goravel application before running the test. You may include any necessary logic in this method that needs to be executed before the test.</p><h2 id="creating-tests" tabindex="-1"><a class="header-anchor" href="#creating-tests"><span>Creating Tests</span></a></h2><p>To create a new test case, use the <code>make:test</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan make:test feature/UserTest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),h={href:"https://github.com/stretchr/testify",target:"_blank",rel:"noopener noreferrer"},g=i(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> feature

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;testing&quot;</span>

  <span class="token string">&quot;github.com/stretchr/testify/suite&quot;</span>

  <span class="token string">&quot;goravel/tests&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ExampleTestSuite <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  suite<span class="token punctuation">.</span>Suite
  tests<span class="token punctuation">.</span>TestCase
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestExampleTestSuite</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  suite<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>ExampleTestSuite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SetupTest will run before each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">SetupTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// TearDownTest will run after each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TearDownTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">True</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-tests" tabindex="-1"><a class="header-anchor" href="#http-tests"><span>HTTP Tests</span></a></h2><p>Please use third-party packages such as <code>net/http</code> to initiate HTTP requests during testing, in the future, Goravel plans to extend <code>Get</code>, <code>Post</code> and other methods in <code>TestCase</code> Struct to facilitate requests and assertions.</p><h2 id="database-testing" tabindex="-1"><a class="header-anchor" href="#database-testing"><span>Database Testing</span></a></h2><p>Goravel model factories and Seeders can easily create test database records for the application&#39;s model.</p><h3 id="factories" tabindex="-1"><a class="header-anchor" href="#factories"><span>Factories</span></a></h3>`,6),b=i(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-seeders" tabindex="-1"><a class="header-anchor" href="#running-seeders"><span>Running Seeders</span></a></h3>`,2),f=n("code",null,"Seed",-1),_=n("code",null,"Seed",-1),y=n("code",null,"DatabaseSeeder",-1),T=n("code",null,"Seed",-1),x=i(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> feature

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;testing&quot;</span>

	<span class="token string">&quot;github.com/stretchr/testify/suite&quot;</span>

	<span class="token string">&quot;goravel/database/seeders&quot;</span>
	<span class="token string">&quot;goravel/tests&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ExampleTestSuite <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	suite<span class="token punctuation">.</span>Suite
	tests<span class="token punctuation">.</span>TestCase
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestExampleTestSuite</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	suite<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>ExampleTestSuite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SetupTest will run before each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">SetupTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// TearDownTest will run after each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TearDownTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Run the DatabaseSeeder...</span>
	s<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Run multiple specific seeders...</span>
	s<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seeders<span class="token punctuation">.</span>UserSeeder<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>seeders<span class="token punctuation">.</span>PhotoSeeder<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-docker" tabindex="-1"><a class="header-anchor" href="#using-docker"><span>Using Docker</span></a></h3><p>When using <code>go test</code>, multiple packages are tested in parallel. As a result, refreshing the database in a test case using a local database can potentially affect other parallel test cases. To address this, Goravel offers Docker-based testing. With Docker, a database image can be created and used independently across different packages.</p><blockquote><p>Due to the limited support of the Docker image for the windows system, currently, the Docker test can only be run in non-windows environments.</p></blockquote><h4 id="initiate-docker" tabindex="-1"><a class="header-anchor" href="#initiate-docker"><span>Initiate Docker</span></a></h4><p>You can use the <code>Database</code> method to initiate a database image based on the default database connection, or you can pass the database connection name to this method to initiate other database images:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>database<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
database<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">&quot;postgresql&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The database images supported by default:</p>`,8),w=n("thead",null,[n("tr",null,[n("th",null,"Database"),n("th",null,"Image Link"),n("th",null,"Version")])],-1),S=n("td",null,"Mysql",-1),q={href:"https://hub.docker.com/_/mysql",target:"_blank",rel:"noopener noreferrer"},D=n("td",null,"latest",-1),E=n("td",null,"Postgres",-1),I={href:"https://hub.docker.com/_/postgres",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"latest",-1),G=n("td",null,"Sqlserver",-1),R={href:"https://hub.docker.com/_/microsoft-mssql-server",target:"_blank",rel:"noopener noreferrer"},A=n("td",null,"latest",-1),B=n("td",null,"Sqlite",-1),F={href:"https://hub.docker.com/r/nouchka/sqlite3",target:"_blank",rel:"noopener noreferrer"},P=n("td",null,"latest",-1),U=i(`<p>You can also use the <code>Image</code> method to customize the image:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> contractstesting <span class="token string">&quot;github.com/goravel/framework/contracts/testing&quot;</span>

database<span class="token punctuation">.</span><span class="token function">Image</span><span class="token punctuation">(</span>contractstesting<span class="token punctuation">.</span>Image<span class="token punctuation">{</span>
  Repository<span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
  Tag<span class="token punctuation">:</span>        <span class="token string">&quot;5.7&quot;</span><span class="token punctuation">,</span>
  Env<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;MYSQL_ROOT_PASSWORD=123123&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;MYSQL_DATABASE=goravel&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ExposedPorts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;3306&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="build-image" tabindex="-1"><a class="header-anchor" href="#build-image"><span>Build Image</span></a></h4><p>After the image is initiated, you can use the <code>Build</code> method to build the image:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>At this time, you can use the <code>docker ps</code> command to see that the image is already running on the system, and you can obtain the configuration information of the database through the <code>Config</code> method to facilitate connection debugging:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>config <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="running-seeders-1" tabindex="-1"><a class="header-anchor" href="#running-seeders-1"><span>Running Seeders</span></a></h4>`,8),M=n("code",null,"Seed",-1),L=n("code",null,"Seed",-1),O=n("code",null,"DatabaseSeeder",-1),Y=n("code",null,"Seed",-1),N=i(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>seeders<span class="token punctuation">.</span>UserSeeder<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="refresh-database" tabindex="-1"><a class="header-anchor" href="#refresh-database"><span>Refresh Database</span></a></h4><p>Because the test cases in the same package are executed serially, refreshing the database after a single test case run will have no negative impact, we can use the <code>Fresh</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Fresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also use the <code>RefreshDatabase</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> feature

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;testing&quot;</span>

	<span class="token string">&quot;github.com/stretchr/testify/suite&quot;</span>

	<span class="token string">&quot;goravel/tests&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ExampleTestSuite <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	suite<span class="token punctuation">.</span>Suite
	tests<span class="token punctuation">.</span>TestCase
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">TestExampleTestSuite</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	suite<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>ExampleTestSuite<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// SetupTest will run before each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">SetupTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">RefreshDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// TearDownTest will run after each test in the suite.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TearDownTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="uninstall-image" tabindex="-1"><a class="header-anchor" href="#uninstall-image"><span>Uninstall Image</span></a></h4><p>After the test cases in the sub-package are executed, the image will be uninstalled automatically in one hour, you can also use the <code>Stop</code> method to uninstall the image manually.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><p>We can create a <code>TestMain</code> method in the sub-package and add the pre-logic of the test case:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// tests/feature/main_test.go</span>
<span class="token keyword">package</span> feature

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>
  <span class="token string">&quot;os&quot;</span>
  <span class="token string">&quot;testing&quot;</span>

  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span>

  <span class="token string">&quot;goravel/database/seeders&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  database<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Testing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Docker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Execute test cases</span>
  exit <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Uninstall the image after all test cases have been run</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> database<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),z={href:"https://pkg.go.dev/testing#hdr-Main",target:"_blank",rel:"noopener noreferrer"};function V(W,H){const t=p("router-link"),o=p("ExternalLinkIcon"),c=p("RouteLink");return u(),r("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#introduction"},{default:e(()=>[s("Introduction")]),_:1})]),n("li",null,[a(t,{to:"#environment"},{default:e(()=>[s("Environment")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#custom-environment-file"},{default:e(()=>[s("Custom Environment File")]),_:1})]),n("li",null,[a(t,{to:"#testcase-struct"},{default:e(()=>[s("TestCase Struct")]),_:1})])])]),n("li",null,[a(t,{to:"#creating-tests"},{default:e(()=>[s("Creating Tests")]),_:1})]),n("li",null,[a(t,{to:"#http-tests"},{default:e(()=>[s("HTTP Tests")]),_:1})]),n("li",null,[a(t,{to:"#database-testing"},{default:e(()=>[s("Database Testing")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#factories"},{default:e(()=>[s("Factories")]),_:1})]),n("li",null,[a(t,{to:"#running-seeders"},{default:e(()=>[s("Running Seeders")]),_:1})]),n("li",null,[a(t,{to:"#using-docker"},{default:e(()=>[s("Using Docker")]),_:1})])])])])]),m,n("p",null,[s("Our test cases are written using the suite function of the "),n("a",h,[s("stretchr/testify"),a(o)]),s(" package by default. This function enables us to configure pre-test, post-test, sub-test, and assertion, among other things, which results in more organized test cases. For further information, kindly refer to the official documentation.")]),g,n("p",null,[s("If you're conducting tests, it might be necessary to add some records to your database before running the test. You don't have to manually input the values of each column for the test data creation. With Goravel, you can set default attributes for your models via "),a(c,{to:"/orm/factories.html"},{default:e(()=>[s("factories")]),_:1}),s(".")]),b,n("p",null,[s("If you would like to use "),a(c,{to:"/orm/seeding.html"},{default:e(()=>[s("database seeders")]),_:1}),s(" to populate your database during a feature test, you may invoke the "),f,s(" method. By default, the "),_,s(" method will execute the "),y,s(", which should execute all of your other seeders. Alternatively, you can pass a specific seeder struct to the "),T,s(" method:")]),x,n("table",null,[w,n("tbody",null,[n("tr",null,[S,n("td",null,[n("a",q,[s("https://hub.docker.com/_/mysql"),a(o)])]),D]),n("tr",null,[E,n("td",null,[n("a",I,[s("https://hub.docker.com/_/postgres"),a(o)])]),C]),n("tr",null,[G,n("td",null,[n("a",R,[s("https://hub.docker.com/_/microsoft-mssql-server"),a(o)])]),A]),n("tr",null,[B,n("td",null,[n("a",F,[s("https://hub.docker.com/r/nouchka/sqlite3"),a(o)])]),P])])]),U,n("p",null,[s("If you wish to use "),a(c,{to:"/orm/seeding.html"},{default:e(()=>[s("seeder")]),_:1}),s(" to populate the database during testing, you can call the "),M,s(" method. By default, the "),L,s(" method will execute the "),O,s(", which should execute all of your other seeders. Alternatively, you can pass a specific seeder struct to the "),Y,s(" method:")]),N,n("blockquote",null,[n("p",null,[s("For more usage of the TestMain method, see "),n("a",z,[s("Official Documentation"),a(o)]),s(".")])])])}const Q=l(d,[["render",V],["__file","getting-started.html.vue"]]),J=JSON.parse(`{"path":"/testing/getting-started.html","title":"Getting Started","lang":"en-US","frontmatter":{"description":"Getting Started Introduction The testing function of Goravel relies on Golang's official test component, extending unit testing to support integration testing and improve applic...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/testing/getting-started.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/testing/getting-started.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/testing/getting-started.html"}],["meta",{"property":"og:description","content":"Getting Started Introduction The testing function of Goravel relies on Golang's official test component, extending unit testing to support integration testing and improve applic..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Environment","slug":"environment","link":"#environment","children":[{"level":3,"title":"Custom Environment File","slug":"custom-environment-file","link":"#custom-environment-file","children":[]},{"level":3,"title":"TestCase Struct","slug":"testcase-struct","link":"#testcase-struct","children":[]}]},{"level":2,"title":"Creating Tests","slug":"creating-tests","link":"#creating-tests","children":[]},{"level":2,"title":"HTTP Tests","slug":"http-tests","link":"#http-tests","children":[]},{"level":2,"title":"Database Testing","slug":"database-testing","link":"#database-testing","children":[{"level":3,"title":"Factories","slug":"factories","link":"#factories","children":[]},{"level":3,"title":"Running Seeders","slug":"running-seeders","link":"#running-seeders","children":[]},{"level":3,"title":"Using Docker","slug":"using-docker","link":"#using-docker","children":[]}]}],"git":{},"filePathRelative":"testing/getting-started.md","autoDesc":true}`);export{Q as comp,J as data};
