import{_ as l,c as i,b as s,e as a,f as p,a as u,r as o,o as r,d as e}from"./app-o_wgz7qh.js";const d={},k={class:"table-of-contents"};function m(v,n){const t=o("router-link"),c=o("CommentService");return r(),i("div",null,[n[12]||(n[12]=s("h1",{id:"http-客户端",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#http-客户端"},[s("span",null,"HTTP 客户端")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[a(t,{to:"#简介"},{default:p(()=>n[0]||(n[0]=[e("简介")])),_:1})]),s("li",null,[a(t,{to:"#配置"},{default:p(()=>n[1]||(n[1]=[e("配置")])),_:1})]),s("li",null,[a(t,{to:"#发起请求"},{default:p(()=>n[2]||(n[2]=[e("发起请求")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#响应接口"},{default:p(()=>n[3]||(n[3]=[e("响应接口")])),_:1})]),s("li",null,[a(t,{to:"#uri-模板"},{default:p(()=>n[4]||(n[4]=[e("URI 模板")])),_:1})]),s("li",null,[a(t,{to:"#请求查询参数"},{default:p(()=>n[5]||(n[5]=[e("请求查询参数")])),_:1})]),s("li",null,[a(t,{to:"#发送请求体"},{default:p(()=>n[6]||(n[6]=[e("发送请求体")])),_:1})]),s("li",null,[a(t,{to:"#请求头"},{default:p(()=>n[7]||(n[7]=[e("请求头")])),_:1})]),s("li",null,[a(t,{to:"#身份验证"},{default:p(()=>n[8]||(n[8]=[e("身份验证")])),_:1})]),s("li",null,[a(t,{to:"#上下文"},{default:p(()=>n[9]||(n[9]=[e("上下文")])),_:1})]),s("li",null,[a(t,{to:"#绑定响应"},{default:p(()=>n[10]||(n[10]=[e("绑定响应")])),_:1})]),s("li",null,[a(t,{to:"#cookie"},{default:p(()=>n[11]||(n[11]=[e("Cookie")])),_:1})])])])])]),n[13]||(n[13]=u(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在软件开发中，有很多时候你需要调用 API 来获取数据——无论是连接到微服务还是访问第三方 API。在这种情况下，Goravel 提供了一个易于使用、富有表现力且极简的 API，它基于标准的 <code>net/http</code> 库构建，所有这些都旨在提升开发者的体验。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>Goravel 的 HTTP 客户端构建于 <code>net/http.Client</code> 之上，用于发起 HTTP 请求。如果你需要调整其内部设置，只需更新 <code>config/http.go</code> 文件中的 <code>client</code> 属性即可。</p><p>以下是可用的配置选项：</p><ul><li><code>base_url</code>: 设置相对路径的根 URL。自动为不以 <code>http://</code> 或 <code>https://</code> 开头的请求添加前缀。</li><li><code>timeout</code>（默认值：<code>30s</code>）: 完整请求生命周期的全局超时时长（连接 + 任何重定向 + 读取响应体）。零表示不超时。</li><li><code>max_idle_conns</code>: 最大空闲（保持活动）连接数。零表示没有限制。</li><li><code>max_idle_conns_per_host</code>: 最大空闲（保持活动）连接数。</li><li><code>max_conns_per_host</code>: 限制总连接数，包括正在拨号、活动和空闲状态的连接。零表示没有限制。</li><li><code>idle_conn_timeout</code>: 空闲（保持活动）连接在自行关闭之前保持空闲的最大时长。</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token string">&quot;client&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;base_url&quot;</span><span class="token punctuation">:</span>                config<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_BASE_URL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// &quot;https://api.example.com&quot;</span></span>
<span class="line">    <span class="token string">&quot;timeout&quot;</span><span class="token punctuation">:</span>                 config<span class="token punctuation">.</span><span class="token function">GetDuration</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_TIMEOUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 30 * time.Second</span></span>
<span class="line">    <span class="token string">&quot;max_idle_conns&quot;</span><span class="token punctuation">:</span>          config<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_MAX_IDLE_CONNS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 100</span></span>
<span class="line">    <span class="token string">&quot;max_idle_conns_per_host&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_MAX_IDLE_CONNS_PER_HOST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 10</span></span>
<span class="line">    <span class="token string">&quot;max_conns_per_host&quot;</span><span class="token punctuation">:</span>      config<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_MAX_CONN_PER_HOST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 0</span></span>
<span class="line">    <span class="token string">&quot;idle_conn_timeout&quot;</span><span class="token punctuation">:</span>       config<span class="token punctuation">.</span><span class="token function">GetDuration</span><span class="token punctuation">(</span><span class="token string">&quot;HTTP_CLIENT_IDLE_CONN_TIMEOUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 90 * time.Second</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="发起请求" tabindex="-1"><a class="header-anchor" href="#发起请求"><span>发起请求</span></a></h2><p>Http facade 提供了一种便捷的方式来使用熟悉的动词（<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>PATCH</code>、<code>HEAD</code> 和 <code>OPTIONS</code>）发起 HTTP 请求。</p><p><strong>示例：GET 请求</strong></p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 HTTP 动词方法都会返回一个类型为 <code>framework/contracts/http/client.Response</code> 的 <code>response</code> 和一个在请求失败时返回的 <code>err</code>。</p><h3 id="响应接口" tabindex="-1"><a class="header-anchor" href="#响应接口"><span>响应接口</span></a></h3><p><code>framework/contracts/http/client.Response</code> 接口提供了以下方法来与 HTTP 响应进行交互：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Response <span class="token keyword">interface</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">Body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>           <span class="token comment">// 获取响应体为字符串</span></span>
<span class="line">    <span class="token function">ClientError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>              <span class="token comment">// 检查状态码是否在 4xx 范围内</span></span>
<span class="line">    <span class="token function">Cookie</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Cookie <span class="token comment">// 获取指定名称的 Cookie</span></span>
<span class="line">    <span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Cookie        <span class="token comment">// 获取所有响应 Cookie</span></span>
<span class="line">    <span class="token function">Failed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>                   <span class="token comment">// 检查状态码是否不在 2xx 范围内</span></span>
<span class="line">    <span class="token function">Header</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>      <span class="token comment">// 获取指定名称的 Header 值</span></span>
<span class="line">    <span class="token function">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Header           <span class="token comment">// 获取所有响应 Header</span></span>
<span class="line">    <span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>   <span class="token comment">// 将响应体解码为 JSON 并返回 map</span></span>
<span class="line">    <span class="token function">Redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>                 <span class="token comment">// 检查响应是否为重定向（3xx 状态码）</span></span>
<span class="line">    <span class="token function">ServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>              <span class="token comment">// 检查状态码是否在 5xx 范围内</span></span>
<span class="line">    <span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>                    <span class="token comment">// 获取 HTTP 状态码</span></span>
<span class="line">    <span class="token function">Successful</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>               <span class="token comment">// 检查状态码是否在 2xx 范围内</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">/* 状态码相关方法 */</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">OK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>                  <span class="token comment">// 200 OK</span></span>
<span class="line">    <span class="token function">Created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>             <span class="token comment">// 201 Created</span></span>
<span class="line">    <span class="token function">Accepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>            <span class="token comment">// 202 Accepted</span></span>
<span class="line">    <span class="token function">NoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>           <span class="token comment">// 204 No Content</span></span>
<span class="line">    <span class="token function">MovedPermanently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>    <span class="token comment">// 301 Moved Permanently</span></span>
<span class="line">    <span class="token function">Found</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>               <span class="token comment">// 302 Found</span></span>
<span class="line">    <span class="token function">BadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>          <span class="token comment">// 400 Bad Request</span></span>
<span class="line">    <span class="token function">Unauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>        <span class="token comment">// 401 Unauthorized</span></span>
<span class="line">    <span class="token function">PaymentRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>     <span class="token comment">// 402 Payment Required</span></span>
<span class="line">    <span class="token function">Forbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>           <span class="token comment">// 403 Forbidden</span></span>
<span class="line">    <span class="token function">NotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>            <span class="token comment">// 404 Not Found</span></span>
<span class="line">    <span class="token function">RequestTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>      <span class="token comment">// 408 Request Timeout</span></span>
<span class="line">    <span class="token function">Conflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>            <span class="token comment">// 409 Conflict</span></span>
<span class="line">    <span class="token function">UnprocessableEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token comment">// 422 Unprocessable Entity</span></span>
<span class="line">    <span class="token function">TooManyRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>     <span class="token comment">// 429 Too Many Requests</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uri-模板" tabindex="-1"><a class="header-anchor" href="#uri-模板"><span>URI 模板</span></a></h3><p>URI 模板允许你使用占位符构建动态的请求 URL。你可以在 URL 中定义这些占位符，然后在发起请求之前提供值来替换它们。要实现这一点，你可以使用 <code>WithUrlParameter</code> 来设置单个参数，或者使用 <code>WithUrlParameters</code> 来设置多个参数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">WithUrlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/users/{id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithUrlParameters</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;bookId&quot;</span><span class="token punctuation">:</span>        <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;chapterNumber&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/books/{bookId}/chapters/{chapterNumber}&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求查询参数" tabindex="-1"><a class="header-anchor" href="#请求查询参数"><span>请求查询参数</span></a></h3><p>使用 <code>WithQueryParameter</code> 可以为你的请求添加单个查询参数，或者使用 <code>WithQueryParameters</code> 通过 map 添加多个查询参数。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response1<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithQueryParameter</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 生成的 URL: https://api.example.com/users?sort=name</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者添加多个查询参数</span></span>
<span class="line">response2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithQueryParameters</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;page&quot;</span><span class="token punctuation">:</span>     <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;pageSize&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/products&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 生成的 URL: https://api.example.com/products?page=2&amp;pageSize=10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>WithQueryString</code> 直接添加格式化后的查询字符串：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithQueryString</span><span class="token punctuation">(</span><span class="token string">&quot;filter=active&amp;order=price&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/items&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送请求体" tabindex="-1"><a class="header-anchor" href="#发送请求体"><span>发送请求体</span></a></h3><p>对于像 <code>POST</code>、<code>PUT</code>、<code>PATCH</code> 和 <code>DELETE</code> 这样的 HTTP 动词，它们接受 <code>io.Reader</code> 作为第二个参数。为了简化构建请求负载（payload），框架提供了构建请求体的实用方法。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/support/http&quot;</span></span>
<span class="line"></span>
<span class="line">builder <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">body<span class="token punctuation">,</span> err <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/users&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头"><span>请求头</span></a></h3><p>你可以使用 <code>WithHeader</code> 为你的请求添加单个请求头，或者使用 <code>WithHeaders</code> 通过 map 提供多个请求头。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 添加多个请求头</span></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">WithHeaders</span><span class="token punctuation">(</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;Accept&quot;</span><span class="token punctuation">:</span>       <span class="token string">&quot;application/xml&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>Accept</code> 方法来指定你的应用程序期望在响应中接收的内容类型：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Accept</span><span class="token punctuation">(</span><span class="token string">&quot;application/xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便起见，你可以使用 <code>AcceptJson</code> 快速指定你期望 API 响应为 <code>application/json</code> 格式：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AcceptJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用新的请求头集合替换所有现有的请求头，请使用 <code>ReplaceHeaders</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">ReplaceHeaders</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer token&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>WithoutHeader</code> 删除特定的请求头，或者使用 <code>FlushHeaders</code> 清除所有请求中使用的请求头。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithoutHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Previous-Header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 清除所有请求头</span></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">FlushHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="身份验证" tabindex="-1"><a class="header-anchor" href="#身份验证"><span>身份验证</span></a></h3><p>你可以使用 <code>WithBasicAuth</code> 方法指定基本身份验证：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithBasicAuth</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/protected&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="bearer-tokens" tabindex="-1"><a class="header-anchor" href="#bearer-tokens"><span>Bearer Tokens</span></a></h4><p>要快速将 Bearer Token 添加到请求的 <code>Authorization</code> 请求头中，你可以使用 <code>WithToken</code> 方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithToken</span><span class="token punctuation">(</span><span class="token string">&quot;your_bearer_token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/api/resource&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>WithToken</code> 方法还接受一个可选的第二个参数，用于指定令牌类型（例如，“Bearer”、“Token”）。如果未提供类型，则默认为“Bearer”。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithToken</span><span class="token punctuation">(</span><span class="token string">&quot;custom_token&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/api/resource&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>要从请求中移除 Bearer Token，请使用 <code>WithoutToken</code> 方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">WithoutToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/api/resource&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上下文" tabindex="-1"><a class="header-anchor" href="#上下文"><span>上下文</span></a></h3><p>你可以使用 <code>WithContext</code> 使你的 HTTP 请求具有上下文感知能力。这允许你控制请求的生命周期，例如，通过设置超时或启用取消。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绑定响应" tabindex="-1"><a class="header-anchor" href="#绑定响应"><span>绑定响应</span></a></h3><p>你可以直接在 <code>Http</code> facade 上使用 <code>Bind</code> 方法来指定响应应该绑定到的结构体。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ID   <span class="token builtin">int</span>    <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line">    Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> user User</span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AcceptJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://jsonplaceholder.typicode.com/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error making request:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;User ID: %d, Name: %s\\n&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>Cookie</span></a></h3><p>要使用 HTTP 请求发送 Cookie，你可以使用 <code>WithCookie</code> 来发送单个 Cookie，或者使用 <code>WithCookies</code> 来发送多个 Cookie。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">WithCookie</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;user_id&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/profile&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 多个 Cookie</span></span>
<span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">WithCookies</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Cookie<span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;session_token&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;xyz&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;language&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com/dashboard&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要阻止发送特定的 Cookie，你可以使用 <code>WithoutCookie</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">WithoutCookie</span><span class="token punctuation">(</span><span class="token string">&quot;language&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57)),a(c)])}const g=l(d,[["render",m],["__file","http-client.html.vue"]]),h=JSON.parse('{"path":"/zh/digging-deeper/http-client.html","title":"HTTP 客户端","lang":"zh-CN","frontmatter":{"description":"HTTP 客户端 简介 在软件开发中，有很多时候你需要调用 API 来获取数据——无论是连接到微服务还是访问第三方 API。在这种情况下，Goravel 提供了一个易于使用、富有表现力且极简的 API，它基于标准的 net/http 库构建，所有这些都旨在提升开发者的体验。 配置 Goravel 的 HTTP 客户端构建于 net/http.Clien...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/digging-deeper/http-client.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/digging-deeper/http-client.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/digging-deeper/http-client.html"}],["meta",{"property":"og:description","content":"HTTP 客户端 简介 在软件开发中，有很多时候你需要调用 API 来获取数据——无论是连接到微服务还是访问第三方 API。在这种情况下，Goravel 提供了一个易于使用、富有表现力且极简的 API，它基于标准的 net/http 库构建，所有这些都旨在提升开发者的体验。 配置 Goravel 的 HTTP 客户端构建于 net/http.Clien..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP 客户端\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"发起请求","slug":"发起请求","link":"#发起请求","children":[{"level":3,"title":"响应接口","slug":"响应接口","link":"#响应接口","children":[]},{"level":3,"title":"URI 模板","slug":"uri-模板","link":"#uri-模板","children":[]},{"level":3,"title":"请求查询参数","slug":"请求查询参数","link":"#请求查询参数","children":[]},{"level":3,"title":"发送请求体","slug":"发送请求体","link":"#发送请求体","children":[]},{"level":3,"title":"请求头","slug":"请求头","link":"#请求头","children":[]},{"level":3,"title":"身份验证","slug":"身份验证","link":"#身份验证","children":[]},{"level":3,"title":"上下文","slug":"上下文","link":"#上下文","children":[]},{"level":3,"title":"绑定响应","slug":"绑定响应","link":"#绑定响应","children":[]},{"level":3,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]}]}],"git":{},"filePathRelative":"zh/digging-deeper/http-client.md","autoDesc":true}');export{g as comp,h as data};
