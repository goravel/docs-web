import{_ as l,r as p,o as i,c as u,a as n,b as a,w as e,d as s,e as r}from"./app-0837LSdt.js";const d={},k=n("h1",{id:"缓存系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#缓存系统"},[n("span",null,"缓存系统")])],-1),v={class:"table-of-contents"},g=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介"},[n("span",null,"简介")])],-1),m=n("p",null,[s("Goravel 提供了可拓展的缓存模块，该模块可以使用 "),n("code",null,"facades.Cache()"),s(" 进行操作。框架默认自带 "),n("code",null,"memory"),s(" 驱动，如需其他驱动，请查看对应的独立扩展包：")],-1),h=n("thead",null,[n("tr",null,[n("th",null,"驱动"),n("th",null,"地址")])],-1),b=n("td",null,"Redis",-1),f={href:"https://github.com/goravel/redis",target:"_blank",rel:"noopener noreferrer"},q=r(`<h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>在 <code>config/cache.go</code> 中进行所有自定义配置。</p><h2 id="使用缓存" tabindex="-1"><a class="header-anchor" href="#使用缓存"><span>使用缓存</span></a></h2><h3 id="注入-context" tabindex="-1"><a class="header-anchor" href="#注入-context"><span>注入 Context</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="访问多个缓存存储" tabindex="-1"><a class="header-anchor" href="#访问多个缓存存储"><span>访问多个缓存存储</span></a></h3><p>您可以通过 <code>Store</code> 方法访问各种缓存存储。传递给 <code>Store</code> 方法的键应该对应于 <code>cache</code> 配置文件中的 <code>stores</code> 配置数组中列出的存储之一：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从缓存中获取数据" tabindex="-1"><a class="header-anchor" href="#从缓存中获取数据"><span>从缓存中获取数据</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetBool</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以传递一个 <code>func</code> 作为默认值。如果指定的数据在缓存中不存在，将返回 <code>func</code> 的结果。传递闭包的方法允许你从数据库或其他外部服务中获取默认值。注意闭包结构 <code>func() any</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> any <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;default&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查缓存项是否存在" tabindex="-1"><a class="header-anchor" href="#检查缓存项是否存在"><span>检查缓存项是否存在</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token builtin">bool</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="递增-递减值" tabindex="-1"><a class="header-anchor" href="#递增-递减值"><span>递增 / 递减值</span></a></h3><p><code>Increment</code> 和 <code>Decrement</code> 方法可用于调整缓存中整数项的值。这两种方法都接受一个可选的第二个参数，指示增加或减少项目值的数量：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decrement</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decrement</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取和存储" tabindex="-1"><a class="header-anchor" href="#获取和存储"><span>获取和存储</span></a></h3><p>有时你可能想从缓存中获取一个数据，而当请求的缓存项不存在时，程序能为你存储一个默认值。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Remember</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果缓存中不存在你想要的数据时，则传递给 <code>Remember</code> 方法的闭包将被执行，然后将其结果返回并放置到缓存中。</p><p>你可以使用 <code>RememberForever</code> 方法从缓存中获取数据或者永久存储它：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RememberForever</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取并删除" tabindex="-1"><a class="header-anchor" href="#获取并删除"><span>获取并删除</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>value <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pull</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在缓存中存储数据" tabindex="-1"><a class="header-anchor" href="#在缓存中存储数据"><span>在缓存中存储数据</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果缓存的过期时间设置为 0， 则缓存将永久有效：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="只存储没有的数据" tabindex="-1"><a class="header-anchor" href="#只存储没有的数据"><span>只存储没有的数据</span></a></h3><p><code>Add</code> 方法将只存储缓存中不存在的数据。如果存储成功，将返回 <code>true</code> ，否则返回 <code>false</code> ：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token builtin">bool</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数据永久存储" tabindex="-1"><a class="header-anchor" href="#数据永久存储"><span>数据永久存储</span></a></h3><p><code>Forever</code> 方法可用于将数据持久化存储到缓存中。因为这些数据不会过期，所以必须通过 <code>Forget</code> 方法从缓存中手动删除它们：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token builtin">bool</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Forever</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从缓存中删除数据" tabindex="-1"><a class="header-anchor" href="#从缓存中删除数据"><span>从缓存中删除数据</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token builtin">bool</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Forget</span><span class="token punctuation">(</span><span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以使用 <code>Flush</code> 方法清空所有的缓存：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token builtin">bool</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="原子锁" tabindex="-1"><a class="header-anchor" href="#原子锁"><span>原子锁</span></a></h2><h3 id="管理锁" tabindex="-1"><a class="header-anchor" href="#管理锁"><span>管理锁</span></a></h3><p>原子锁允许操作分布式锁而不用担心竞争条件。您可以使用 <code>Lock</code> 方法创建和管理锁：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>lock <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 锁定 10 秒...</span>

    lock<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Get</code> 方法也接受一个闭包。闭包执行后，Goravel 会自动释放锁：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 锁定无限期获得并自动释放...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在您请求时锁不可用，您可以指示 Goravel 等待指定的秒数。如果在指定的时间限制内无法获取锁，则会返回 <code>false</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>lock <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token comment">// 等待最多 5 秒后获得锁定...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子可以通过将闭包传递给 <code>Block</code> 方法来简化。当一个闭包被传递给这个方法时，Goravel 将尝试在指定的秒数内获取锁，并在闭包执行后自动释放锁：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Block</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 等待最多 5 秒后获得锁定...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想释放一个锁而不考虑它的当前所有者，你可以使用 <code>ForceRelease</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token string">&quot;processing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForceRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="自定义缓存驱动" tabindex="-1"><a class="header-anchor" href="#自定义缓存驱动"><span>自定义缓存驱动</span></a></h2><h3 id="配置-1" tabindex="-1"><a class="header-anchor" href="#配置-1"><span>配置</span></a></h3><p>如果你想定义一个完全自定义的驱动，可以在 <code>config/cache.go</code> 配置文件中指定 <code>custom</code> 驱动类型。 然后包含一个 <code>via</code> 选项，实现一个 <code>framework/contracts/cache/Driver</code> 接口：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">//config/cache.go</span>
<span class="token string">&quot;stores&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
    <span class="token string">&quot;memory&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
        <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;memory&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;custom&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
        <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;via&quot;</span><span class="token punctuation">:</span>    <span class="token operator">&amp;</span>Logger<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现驱动" tabindex="-1"><a class="header-anchor" href="#实现驱动"><span>实现驱动</span></a></h3><p>实现 <code>framework/contracts/cache/Driver</code> 接口，文件可以统一储存到 <code>app/extensions</code> 文件夹中（可修改）。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// framework/contracts/cache/Driver</span>
<span class="token keyword">package</span> cache

<span class="token keyword">import</span> <span class="token string">&quot;time&quot;</span>

<span class="token keyword">type</span> Driver <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token comment">// Add Driver an item in the cache if the key does not exist.</span>
    <span class="token function">Add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value any<span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token function">Decrement</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token comment">// Forever Driver an item in the cache indefinitely.</span>
    <span class="token function">Forever</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value any<span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token comment">// Forget Remove an item from the cache.</span>
    <span class="token function">Forget</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token comment">// Flush Remove all items from the cache.</span>
    <span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token comment">// Get Retrieve an item from the cache by key.</span>
    <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span>any<span class="token punctuation">)</span> any
    <span class="token function">GetBool</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token function">GetInt</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
    <span class="token function">GetInt64</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span><span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">int64</span>
    <span class="token function">GetString</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token comment">// Has Check an item exists in the cache.</span>
    <span class="token function">Has</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>
    <span class="token function">Increment</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Lock</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> t <span class="token operator">...</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> Lock
    <span class="token comment">// Put Driver an item in the cache for a given time.</span>
    <span class="token function">Put</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value any<span class="token punctuation">,</span> t time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token comment">// Pull Retrieve an item from the cache and delete it.</span>
    <span class="token function">Pull</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> def <span class="token operator">...</span>any<span class="token punctuation">)</span> any
    <span class="token comment">// Remember Get an item from the cache, or execute the given Closure and store the result.</span>
    <span class="token function">Remember</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> ttl time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token comment">// RememberForever Get an item from the cache, or execute the given Closure and store the result forever.</span>
    <span class="token function">RememberForever</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> callback <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">WithContext</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> Driver
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58);function y(x,_){const t=p("router-link"),o=p("ExternalLinkIcon"),c=p("CommentService");return i(),u("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#简介"},{default:e(()=>[s("简介")]),_:1})]),n("li",null,[a(t,{to:"#配置"},{default:e(()=>[s("配置")]),_:1})]),n("li",null,[a(t,{to:"#使用缓存"},{default:e(()=>[s("使用缓存")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#注入-context"},{default:e(()=>[s("注入 Context")]),_:1})]),n("li",null,[a(t,{to:"#访问多个缓存存储"},{default:e(()=>[s("访问多个缓存存储")]),_:1})]),n("li",null,[a(t,{to:"#从缓存中获取数据"},{default:e(()=>[s("从缓存中获取数据")]),_:1})]),n("li",null,[a(t,{to:"#检查缓存项是否存在"},{default:e(()=>[s("检查缓存项是否存在")]),_:1})]),n("li",null,[a(t,{to:"#递增-递减值"},{default:e(()=>[s("递增 / 递减值")]),_:1})]),n("li",null,[a(t,{to:"#获取和存储"},{default:e(()=>[s("获取和存储")]),_:1})]),n("li",null,[a(t,{to:"#获取并删除"},{default:e(()=>[s("获取并删除")]),_:1})]),n("li",null,[a(t,{to:"#在缓存中存储数据"},{default:e(()=>[s("在缓存中存储数据")]),_:1})]),n("li",null,[a(t,{to:"#只存储没有的数据"},{default:e(()=>[s("只存储没有的数据")]),_:1})]),n("li",null,[a(t,{to:"#数据永久存储"},{default:e(()=>[s("数据永久存储")]),_:1})]),n("li",null,[a(t,{to:"#从缓存中删除数据"},{default:e(()=>[s("从缓存中删除数据")]),_:1})])])]),n("li",null,[a(t,{to:"#原子锁"},{default:e(()=>[s("原子锁")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#管理锁"},{default:e(()=>[s("管理锁")]),_:1})])])]),n("li",null,[a(t,{to:"#自定义缓存驱动"},{default:e(()=>[s("自定义缓存驱动")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#配置-1"},{default:e(()=>[s("配置")]),_:1})]),n("li",null,[a(t,{to:"#实现驱动"},{default:e(()=>[s("实现驱动")]),_:1})])])])])]),g,m,n("table",null,[h,n("tbody",null,[n("tr",null,[b,n("td",null,[n("a",f,[s("https://github.com/goravel/redis"),a(o)])])])])]),q,a(c)])}const G=l(d,[["render",y],["__file","cache.html.vue"]]),w=JSON.parse('{"path":"/zh/digging-deeper/cache.html","title":"缓存系统","lang":"zh-CN","frontmatter":{"description":"缓存系统 简介 Goravel 提供了可拓展的缓存模块，该模块可以使用 facades.Cache() 进行操作。框架默认自带 memory 驱动，如需其他驱动，请查看对应的独立扩展包： 配置 在 config/cache.go 中进行所有自定义配置。 使用缓存 注入 Context 访问多个缓存存储 您可以通过 Store 方法访问各种缓存存储。传递...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/digging-deeper/cache.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/digging-deeper/cache.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/digging-deeper/cache.html"}],["meta",{"property":"og:description","content":"缓存系统 简介 Goravel 提供了可拓展的缓存模块，该模块可以使用 facades.Cache() 进行操作。框架默认自带 memory 驱动，如需其他驱动，请查看对应的独立扩展包： 配置 在 config/cache.go 中进行所有自定义配置。 使用缓存 注入 Context 访问多个缓存存储 您可以通过 Store 方法访问各种缓存存储。传递..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"使用缓存","slug":"使用缓存","link":"#使用缓存","children":[{"level":3,"title":"注入 Context","slug":"注入-context","link":"#注入-context","children":[]},{"level":3,"title":"访问多个缓存存储","slug":"访问多个缓存存储","link":"#访问多个缓存存储","children":[]},{"level":3,"title":"从缓存中获取数据","slug":"从缓存中获取数据","link":"#从缓存中获取数据","children":[]},{"level":3,"title":"检查缓存项是否存在","slug":"检查缓存项是否存在","link":"#检查缓存项是否存在","children":[]},{"level":3,"title":"递增 / 递减值","slug":"递增-递减值","link":"#递增-递减值","children":[]},{"level":3,"title":"获取和存储","slug":"获取和存储","link":"#获取和存储","children":[]},{"level":3,"title":"获取并删除","slug":"获取并删除","link":"#获取并删除","children":[]},{"level":3,"title":"在缓存中存储数据","slug":"在缓存中存储数据","link":"#在缓存中存储数据","children":[]},{"level":3,"title":"只存储没有的数据","slug":"只存储没有的数据","link":"#只存储没有的数据","children":[]},{"level":3,"title":"数据永久存储","slug":"数据永久存储","link":"#数据永久存储","children":[]},{"level":3,"title":"从缓存中删除数据","slug":"从缓存中删除数据","link":"#从缓存中删除数据","children":[]}]},{"level":2,"title":"原子锁","slug":"原子锁","link":"#原子锁","children":[{"level":3,"title":"管理锁","slug":"管理锁","link":"#管理锁","children":[]}]},{"level":2,"title":"自定义缓存驱动","slug":"自定义缓存驱动","link":"#自定义缓存驱动","children":[{"level":3,"title":"配置","slug":"配置-1","link":"#配置-1","children":[]},{"level":3,"title":"实现驱动","slug":"实现驱动","link":"#实现驱动","children":[]}]}],"git":{},"filePathRelative":"zh/digging-deeper/cache.md","autoDesc":true}');export{G as comp,w as data};
