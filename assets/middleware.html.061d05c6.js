import{_ as t,r as o,o as n,c as l,b as e,d as i,w as r,e as d,f as s}from"./app.801e74b4.js";const c={},h=e("h1",{id:"middleware",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#middleware","aria-hidden":"true"},"#"),d(" Middleware")],-1),u={class:"table-of-contents"},w=d("Introduction"),p=d("Define Middlewares"),m=d("Register Middlewares"),f=d("Global Middlewares"),_=d("Assign Middlewares for Routing"),g=s(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Middleware can play a role in filtering HTTP requests that enter the application. For example, <code>Goravel</code> provides a CORS middleware, which can be responsible for adding appropriate response headers to all <code>response</code>.</p><p>Goravel comes with some <code>Gin</code> middleware, which are located in the <code>app/http/middleware</code> directory.</p><h2 id="define-middlewares" tabindex="-1"><a class="header-anchor" href="#define-middlewares" aria-hidden="true">#</a> Define Middlewares</h2><p>You can create your own middleware in the <code>app/http/middleware</code> directory, and the writing method is consistent with that of <code>Gin</code> middleware.</p><h2 id="register-middlewares" tabindex="-1"><a class="header-anchor" href="#register-middlewares" aria-hidden="true">#</a> Register Middlewares</h2><h3 id="global-middlewares" tabindex="-1"><a class="header-anchor" href="#global-middlewares" aria-hidden="true">#</a> Global Middlewares</h3><p>If you want to apply middleware for every HTTP request of your application, you only need to register the middleware in the <code>Middleware</code> in the <code>app/http/kernel.go</code> file.</p><h3 id="assign-middlewares-for-routing" tabindex="-1"><a class="header-anchor" href="#assign-middlewares-for-routing" aria-hidden="true">#</a> Assign Middlewares for Routing</h3><p>If you want to separately register middleware for certain routes, you can create a new middleware in the <code>app/http/middleware</code> folder, and then you can process it according to the writing of <code>Gin</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>userAuth := facades.Route.Group(&quot;/&quot;)
userAuth.Use(middleware.Jwt([]string{&quot;user&quot;}))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function b(v,x){const a=o("router-link");return n(),l("div",null,[h,e("nav",u,[e("ul",null,[e("li",null,[i(a,{to:"#introduction"},{default:r(()=>[w]),_:1})]),e("li",null,[i(a,{to:"#define-middlewares"},{default:r(()=>[p]),_:1})]),e("li",null,[i(a,{to:"#register-middlewares"},{default:r(()=>[m]),_:1}),e("ul",null,[e("li",null,[i(a,{to:"#global-middlewares"},{default:r(()=>[f]),_:1})]),e("li",null,[i(a,{to:"#assign-middlewares-for-routing"},{default:r(()=>[_]),_:1})])])])])]),g])}const M=t(c,[["render",b],["__file","middleware.html.vue"]]);export{M as default};
