import{_ as l,c,b as n,e as a,f as t,a as u,r as o,o as r,d as p}from"./app-h6FjBb6B.js";const d={},k={class:"table-of-contents"};function h(m,s){const e=o("router-link"),i=o("CommentService");return r(),c("div",null,[s[53]||(s[53]=n("h1",{id:"http-tests",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#http-tests"},[n("span",null,"HTTP Tests")])],-1)),n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#introduction"},{default:t(()=>s[0]||(s[0]=[p("Introduction")])),_:1})]),n("li",null,[a(e,{to:"#make-requests"},{default:t(()=>s[1]||(s[1]=[p("Make Requests")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#customize-request-headers"},{default:t(()=>s[2]||(s[2]=[p("Customize Request Headers")])),_:1})]),n("li",null,[a(e,{to:"#cookies"},{default:t(()=>s[3]||(s[3]=[p("Cookies")])),_:1})]),n("li",null,[a(e,{to:"#withsession"},{default:t(()=>s[4]||(s[4]=[p("WithSession")])),_:1})]),n("li",null,[a(e,{to:"#debugging-responses"},{default:t(()=>s[5]||(s[5]=[p("Debugging Responses")])),_:1})])])]),n("li",null,[a(e,{to:"#building-body"},{default:t(()=>s[6]||(s[6]=[p("Building Body")])),_:1})]),n("li",null,[a(e,{to:"#testing-json-apis"},{default:t(()=>s[7]||(s[7]=[p("Testing Json APIs")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#asserting-exact-json-matches"},{default:t(()=>s[8]||(s[8]=[p("Asserting Exact JSON Matches")])),_:1})]),n("li",null,[a(e,{to:"#fluent-json-testing"},{default:t(()=>s[9]||(s[9]=[p("Fluent JSON Testing")])),_:1})]),n("li",null,[a(e,{to:"#asserting-attribute-presence-absence"},{default:t(()=>s[10]||(s[10]=[p("Asserting Attribute Presence / Absence")])),_:1})]),n("li",null,[a(e,{to:"#scoping-json-collection-assertions"},{default:t(()=>s[11]||(s[11]=[p("Scoping JSON Collection Assertions")])),_:1})])])]),n("li",null,[a(e,{to:"#available-assertions"},{default:t(()=>s[12]||(s[12]=[p("Available Assertions")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#response-assertions"},{default:t(()=>s[13]||(s[13]=[p("Response Assertions")])),_:1})]),n("li",null,[a(e,{to:"#assertaccepted"},{default:t(()=>s[14]||(s[14]=[p("AssertAccepted")])),_:1})]),n("li",null,[a(e,{to:"#assertbadrequest"},{default:t(()=>s[15]||(s[15]=[p("AssertBadRequest")])),_:1})]),n("li",null,[a(e,{to:"#assertconflict"},{default:t(()=>s[16]||(s[16]=[p("AssertConflict")])),_:1})]),n("li",null,[a(e,{to:"#assertcookie"},{default:t(()=>s[17]||(s[17]=[p("AssertCookie")])),_:1})]),n("li",null,[a(e,{to:"#assertcookieexpired"},{default:t(()=>s[18]||(s[18]=[p("AssertCookieExpired")])),_:1})]),n("li",null,[a(e,{to:"#assertcookiemissing"},{default:t(()=>s[19]||(s[19]=[p("AssertCookieMissing")])),_:1})]),n("li",null,[a(e,{to:"#assertcookienotexpired"},{default:t(()=>s[20]||(s[20]=[p("AssertCookieNotExpired")])),_:1})]),n("li",null,[a(e,{to:"#assertcreated"},{default:t(()=>s[21]||(s[21]=[p("AssertCreated")])),_:1})]),n("li",null,[a(e,{to:"#assertdontsee"},{default:t(()=>s[22]||(s[22]=[p("AssertDontSee")])),_:1})]),n("li",null,[a(e,{to:"#assertexactjson"},{default:t(()=>s[23]||(s[23]=[p("AssertExactJson")])),_:1})]),n("li",null,[a(e,{to:"#assertfluentjson"},{default:t(()=>s[24]||(s[24]=[p("AssertFluentJson")])),_:1})]),n("li",null,[a(e,{to:"#assertforbidden"},{default:t(()=>s[25]||(s[25]=[p("AssertForbidden")])),_:1})]),n("li",null,[a(e,{to:"#assertfound"},{default:t(()=>s[26]||(s[26]=[p("AssertFound")])),_:1})]),n("li",null,[a(e,{to:"#assertgone"},{default:t(()=>s[27]||(s[27]=[p("AssertGone")])),_:1})]),n("li",null,[a(e,{to:"#assertheader"},{default:t(()=>s[28]||(s[28]=[p("AssertHeader")])),_:1})]),n("li",null,[a(e,{to:"#assertheadermissing"},{default:t(()=>s[29]||(s[29]=[p("AssertHeaderMissing")])),_:1})]),n("li",null,[a(e,{to:"#assertinternalservererror"},{default:t(()=>s[30]||(s[30]=[p("AssertInternalServerError")])),_:1})]),n("li",null,[a(e,{to:"#assertjson"},{default:t(()=>s[31]||(s[31]=[p("AssertJson")])),_:1})]),n("li",null,[a(e,{to:"#assertjsonmissing"},{default:t(()=>s[32]||(s[32]=[p("AssertJsonMissing")])),_:1})]),n("li",null,[a(e,{to:"#assertmethodnotallowed"},{default:t(()=>s[33]||(s[33]=[p("AssertMethodNotAllowed")])),_:1})]),n("li",null,[a(e,{to:"#assertmovedpermanently"},{default:t(()=>s[34]||(s[34]=[p("AssertMovedPermanently")])),_:1})]),n("li",null,[a(e,{to:"#assertnocontent"},{default:t(()=>s[35]||(s[35]=[p("AssertNoContent")])),_:1})]),n("li",null,[a(e,{to:"#assertnotacceptable"},{default:t(()=>s[36]||(s[36]=[p("AssertNotAcceptable")])),_:1})]),n("li",null,[a(e,{to:"#assertnotfound"},{default:t(()=>s[37]||(s[37]=[p("AssertNotFound")])),_:1})]),n("li",null,[a(e,{to:"#assertnotmodified"},{default:t(()=>s[38]||(s[38]=[p("AssertNotModified")])),_:1})]),n("li",null,[a(e,{to:"#assertok"},{default:t(()=>s[39]||(s[39]=[p("AssertOk")])),_:1})]),n("li",null,[a(e,{to:"#assertpartialcontent"},{default:t(()=>s[40]||(s[40]=[p("AssertPartialContent")])),_:1})]),n("li",null,[a(e,{to:"#assertpaymentrequired"},{default:t(()=>s[41]||(s[41]=[p("AssertPaymentRequired")])),_:1})]),n("li",null,[a(e,{to:"#assertrequesttimeout"},{default:t(()=>s[42]||(s[42]=[p("AssertRequestTimeout")])),_:1})]),n("li",null,[a(e,{to:"#assertsee"},{default:t(()=>s[43]||(s[43]=[p("AssertSee")])),_:1})]),n("li",null,[a(e,{to:"#assertseeinorder"},{default:t(()=>s[44]||(s[44]=[p("AssertSeeInOrder")])),_:1})]),n("li",null,[a(e,{to:"#assertservererror"},{default:t(()=>s[45]||(s[45]=[p("AssertServerError")])),_:1})]),n("li",null,[a(e,{to:"#assertserviceunavailable"},{default:t(()=>s[46]||(s[46]=[p("AssertServiceUnavailable")])),_:1})]),n("li",null,[a(e,{to:"#assertstatus"},{default:t(()=>s[47]||(s[47]=[p("AssertStatus")])),_:1})]),n("li",null,[a(e,{to:"#assertsuccessful"},{default:t(()=>s[48]||(s[48]=[p("AssertSuccessful")])),_:1})]),n("li",null,[a(e,{to:"#asserttemporaryredirect"},{default:t(()=>s[49]||(s[49]=[p("AssertTemporaryRedirect")])),_:1})]),n("li",null,[a(e,{to:"#asserttoomanyrequests"},{default:t(()=>s[50]||(s[50]=[p("AssertTooManyRequests")])),_:1})]),n("li",null,[a(e,{to:"#assertunauthorized"},{default:t(()=>s[51]||(s[51]=[p("AssertUnauthorized")])),_:1})]),n("li",null,[a(e,{to:"#assertunprocessableentity"},{default:t(()=>s[52]||(s[52]=[p("AssertUnprocessableEntity")])),_:1})])])])])]),s[54]||(s[54]=u(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>When building web applications, you&#39;ll often need to test if your HTTP requests work correctly from start to finish. Goravel&#39;s testing tools make this straightforward - you can simulate requests and verify responses without setting up complex test environments.</p><h2 id="make-requests" tabindex="-1"><a class="header-anchor" href="#make-requests"><span>Make Requests</span></a></h2><p>Testing HTTP endpoints in Goravel uses a simple pattern. Start with the <code>Http</code> method from your <code>TestCase</code>, which needs a <code>*testing.T</code> parameter for assertions. This gives you a request object (<code>framework/contracts/testing.TestRequest</code>) that handles all common HTTP verbs like <code>Get</code>, <code>Post</code>, and <code>Put</code>.</p><p>Instead of making real HTTP calls, these methods simulate your application&#39;s request cycle internally. Each request returns a response object (<code>framework/contracts/testing.TestResponse</code>) with methods to check the results.</p><p>Here&#39;s a basic example:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customize-request-headers" tabindex="-1"><a class="header-anchor" href="#customize-request-headers"><span>Customize Request Headers</span></a></h3><p>You can customize request headers using either <code>WithHeader</code> for a single header or <code>WithHeaders</code> for multiple headers:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Single header</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Multiple headers</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Accept&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies"><span>Cookies</span></a></h3><p>You may use either <code>WithCookie</code> or <code>WithCookies</code> method to set cookies value before making a request.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithCookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// or use WithHeaders for multiple Headers</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;lang&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withsession" tabindex="-1"><a class="header-anchor" href="#withsession"><span>WithSession</span></a></h3><p>You may set the data to the session using the <code>WithSession</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithSession</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debugging-responses" tabindex="-1"><a class="header-anchor" href="#debugging-responses"><span>Debugging Responses</span></a></h3><p>After making request you may use <code>Session</code>, <code>Headers</code>, <code>Content</code>, <code>Cookies</code> or <code>Json</code> method to check data returned from the request.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithSession</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	content<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	cookies <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	headers <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	json<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// response body parsed as json(map[string]any)</span></span>
<span class="line">	</span>
<span class="line">	session<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns all values stored in the current request session</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="building-body" tabindex="-1"><a class="header-anchor" href="#building-body"><span>Building Body</span></a></h2><p>For method like <code>Post</code>, <code>Put</code>, <code>Delete</code> etc. Goravel accepts <code>io.Reader</code> as second argument. To simplify building payloads, the framework provides utility methods for constructing request bodies.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/support/http&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    builder <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="testing-json-apis" tabindex="-1"><a class="header-anchor" href="#testing-json-apis"><span>Testing Json APIs</span></a></h2><p>Goravel provides several helpers to test JSON API responses effectively. It attempts to unmarshal the response body into a Go <code>map[string]any</code>. If unmarshalling fails, the associated assertions will also fail.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">			<span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To access the unmarshalled JSON directly, use the <code>Json</code> method on the <code>TestResponse</code>. This lets you inspect individual elements of the response body.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">json<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">True</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>The <code>AssertJson</code> method checks whether the response contains all the specified values, even if the response includes additional fields. It doesn&#39;t require an exact match unless you use <code>AssertExactJson</code>.</p></div><h3 id="asserting-exact-json-matches" tabindex="-1"><a class="header-anchor" href="#asserting-exact-json-matches"><span>Asserting Exact JSON Matches</span></a></h3><p>If you need to verify that the response matches your expected JSON exactly (with no extra or missing fields), use the <code>AssertExactJson</code> method.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertExactJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">			<span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fluent-json-testing" tabindex="-1"><a class="header-anchor" href="#fluent-json-testing"><span>Fluent JSON Testing</span></a></h3><p>Goravel makes it easy to perform fluent assertions on JSON responses. Using the <code>AssertFluentJson</code> method, you can pass a closure that provides an instance of <code>framework/contracts/testing.AssertableJSON</code>. This instance allows you to check specific values or conditions in the JSON response returned by your request.</p><p>For example, you can use the <code>Where</code> method to assert that a particular value exists in the JSON response, and the <code>Missing</code> method to ensure that an attribute is not present.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> contractstesting <span class="token string">&quot;github.com/goravel/framework/contracts/testing&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bowen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">WhereNot</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">Missing</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="asserting-attribute-presence-absence" tabindex="-1"><a class="header-anchor" href="#asserting-attribute-presence-absence"><span>Asserting Attribute Presence / Absence</span></a></h3><p>If you want to check whether an attribute is present or missing, Goravel makes it simple with the <code>Has</code> and <code>Missing</code> methods.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">Missing</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also assert the presence or absence of multiple attributes at once using <code>HasAll</code> and <code>MissingAll</code>.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">MissingAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;verified&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you only need to check for the presence of at least one attribute from a list, use the <code>HasAny</code> method.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		json<span class="token punctuation">.</span><span class="token function">HasAny</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scoping-json-collection-assertions" tabindex="-1"><a class="header-anchor" href="#scoping-json-collection-assertions"><span>Scoping JSON Collection Assertions</span></a></h3><p>When a response contains a collection of objects under a named key, you can use various methods to assert its structure and content.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ID <span class="token builtin">int</span> <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">    items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token string">&quot;items&quot;</span><span class="token punctuation">:</span> items<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use the <code>Count</code> method to verify the number of elements in the collection. To assert properties of the first element, use the <code>First</code> method, which provides an instance of <code>AssertableJson</code>. Similarly, the <code>Each</code> method allows you to iterate over all elements and assert their properties individually. Alternatively, the <code>HasWithScope</code> method combines the functionality of <code>First</code> and <code>Count</code>, allowing you to assert both the first element and its contents while providing an <code>AssertableJson</code> instance for scoped assertions.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Count and First</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">First</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Each</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">Each</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// HasWithScope</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">HasWithScope</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="available-assertions" tabindex="-1"><a class="header-anchor" href="#available-assertions"><span>Available Assertions</span></a></h2><h3 id="response-assertions" tabindex="-1"><a class="header-anchor" href="#response-assertions"><span>Response Assertions</span></a></h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="#assertaccepted">AssertAccepted</a></td><td><a href="#assertbadrequest">AssertBadRequest</a></td><td><a href="#assertconflict">AssertConflict</a></td></tr><tr><td><a href="#assertcookie">AssertCookie</a></td><td><a href="#assertcookieexpired">AssertCookieExpired</a></td><td><a href="#assertcookiemissing">AssertCookieMissing</a></td></tr><tr><td><a href="#assertcookienotexpired">AssertCookieNotExpired</a></td><td><a href="#assertcreated">AssertCreated</a></td><td><a href="#assertdontsee">AssertDontSee</a></td></tr><tr><td><a href="#assertexactjson">AssertExactJson</a></td><td><a href="#assertfluentjson">AssertFluentJson</a></td><td><a href="#assertforbidden">AssertForbidden</a></td></tr><tr><td><a href="#assertfound">AssertFound</a></td><td><a href="#assertgone">AssertGone</a></td><td><a href="#assertheader">AssertHeader</a></td></tr><tr><td><a href="#assertheadermissing">AssertHeaderMissing</a></td><td><a href="#assertinternalservererror">AssertInternalServerError</a></td><td><a href="#assertjson">AssertJson</a></td></tr><tr><td><a href="#assertjsonmissing">AssertJsonMissing</a></td><td><a href="#assertmethodnotallowed">AssertMethodNotAllowed</a></td><td><a href="#assertmovedpermanently">AssertMovedPermanently</a></td></tr><tr><td><a href="#assertnocontent">AssertNoContent</a></td><td><a href="#assertnotacceptable">AssertNotAcceptable</a></td><td><a href="#assertnotfound">AssertNotFound</a></td></tr><tr><td><a href="#assertnotmodified">AssertNotModified</a></td><td><a href="#assertok">AssertOk</a></td><td><a href="#assertpartialcontent">AssertPartialContent</a></td></tr><tr><td><a href="#assertpaymentrequired">AssertPaymentRequired</a></td><td><a href="#assertrequesttimeout">AssertRequestTimeout</a></td><td><a href="#assertsee">AssertSee</a></td></tr><tr><td><a href="#assertseeinorder">AssertSeeInOrder</a></td><td><a href="#assertservererror">AssertServerError</a></td><td><a href="#assertserviceunavailable">AssertServiceUnavailable</a></td></tr><tr><td><a href="#assertstatus">AssertStatus</a></td><td><a href="#assertsuccessful">AssertSuccessful</a></td><td><a href="#asserttemporaryredirect">AssertTemporaryRedirect</a></td></tr><tr><td><a href="#asserttoomanyrequests">AssertTooManyRequests</a></td><td><a href="#assertunauthorized">AssertUnauthorized</a></td><td><a href="#assertunprocessableentity">AssertUnprocessableEntity</a></td></tr></tbody></table><h3 id="assertaccepted" tabindex="-1"><a class="header-anchor" href="#assertaccepted"><span>AssertAccepted</span></a></h3><p>Asserts that the response has an <code>202 Accepted</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertAccepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertbadrequest" tabindex="-1"><a class="header-anchor" href="#assertbadrequest"><span>AssertBadRequest</span></a></h3><p>Asserts that the response has a <code>400 Bad Request</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertconflict" tabindex="-1"><a class="header-anchor" href="#assertconflict"><span>AssertConflict</span></a></h3><p>Asserts that the response has a <code>409 Conflict</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookie" tabindex="-1"><a class="header-anchor" href="#assertcookie"><span>AssertCookie</span></a></h3><p>Asserts that the response contains a cookie with the specified name and value:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookieexpired" tabindex="-1"><a class="header-anchor" href="#assertcookieexpired"><span>AssertCookieExpired</span></a></h3><p>Asserts that the specified cookie has expired:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieExpired</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookiemissing" tabindex="-1"><a class="header-anchor" href="#assertcookiemissing"><span>AssertCookieMissing</span></a></h3><p>Asserts that the response does not contain a cookie with the specified name:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieMissing</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookienotexpired" tabindex="-1"><a class="header-anchor" href="#assertcookienotexpired"><span>AssertCookieNotExpired</span></a></h3><p>Asserts that the specified cookie has not expired:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieNotExpired</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcreated" tabindex="-1"><a class="header-anchor" href="#assertcreated"><span>AssertCreated</span></a></h3><p>Asserts that the response has a <code>201 Created</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertdontsee" tabindex="-1"><a class="header-anchor" href="#assertdontsee"><span>AssertDontSee</span></a></h3><p>Asserts that the response does not contain the specified values. The second parameter (optional) determines whether to escape special characters in the values before checking. If not provided, it defaults to true.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertDontSee</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&lt;div&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertexactjson" tabindex="-1"><a class="header-anchor" href="#assertexactjson"><span>AssertExactJson</span></a></h3><p>Asserts that the response JSON matches exactly the provided <code>map[string]any</code>:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertExactJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertfluentjson" tabindex="-1"><a class="header-anchor" href="#assertfluentjson"><span>AssertFluentJson</span></a></h3><p>Asserts the response JSON using a fluent interface:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> contractstesting <span class="token string">&quot;github.com/goravel/framework/contracts/testing&quot;</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="assertforbidden" tabindex="-1"><a class="header-anchor" href="#assertforbidden"><span>AssertForbidden</span></a></h3><p>Asserts that the response has a <code>403 Forbidden</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertfound" tabindex="-1"><a class="header-anchor" href="#assertfound"><span>AssertFound</span></a></h3><p>Asserts that the response has a <code>302 Found</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertgone" tabindex="-1"><a class="header-anchor" href="#assertgone"><span>AssertGone</span></a></h3><p>Asserts that the response has a <code>410 Gone</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertGone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertheader" tabindex="-1"><a class="header-anchor" href="#assertheader"><span>AssertHeader</span></a></h3><p>Asserts that the response contains the specified header with the given value:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertheadermissing" tabindex="-1"><a class="header-anchor" href="#assertheadermissing"><span>AssertHeaderMissing</span></a></h3><p>Asserts that the response does not contain the specified header:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertHeaderMissing</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertinternalservererror" tabindex="-1"><a class="header-anchor" href="#assertinternalservererror"><span>AssertInternalServerError</span></a></h3><p>Asserts that the response has a <code>500 Internal Server</code> Error HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertInternalServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertjson" tabindex="-1"><a class="header-anchor" href="#assertjson"><span>AssertJson</span></a></h3><p>Asserts that the response JSON contains the provided fragment:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertjsonmissing" tabindex="-1"><a class="header-anchor" href="#assertjsonmissing"><span>AssertJsonMissing</span></a></h3><p>Asserts that the specified keys or values are missing in the response JSON:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertJsonMissing</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertmethodnotallowed" tabindex="-1"><a class="header-anchor" href="#assertmethodnotallowed"><span>AssertMethodNotAllowed</span></a></h3><p>Asserts that the response has a <code>405 Method Not Allowed</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertMethodNotAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertmovedpermanently" tabindex="-1"><a class="header-anchor" href="#assertmovedpermanently"><span>AssertMovedPermanently</span></a></h3><p>Asserts that the response has a <code>301 Moved Permanently</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertMovedPermanently</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnocontent" tabindex="-1"><a class="header-anchor" href="#assertnocontent"><span>AssertNoContent</span></a></h3><p>Asserts that the response has a <code>204 No Content</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotacceptable" tabindex="-1"><a class="header-anchor" href="#assertnotacceptable"><span>AssertNotAcceptable</span></a></h3><p>Asserts that the response has a <code>406 Not Acceptable</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotfound" tabindex="-1"><a class="header-anchor" href="#assertnotfound"><span>AssertNotFound</span></a></h3><p>Asserts that the response has a <code>404 Not Found</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotmodified" tabindex="-1"><a class="header-anchor" href="#assertnotmodified"><span>AssertNotModified</span></a></h3><p>Asserts that the response has a <code>304 Not Modified</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertok" tabindex="-1"><a class="header-anchor" href="#assertok"><span>AssertOk</span></a></h3><p>Asserts that the response has a <code>200 OK</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertpartialcontent" tabindex="-1"><a class="header-anchor" href="#assertpartialcontent"><span>AssertPartialContent</span></a></h3><p>Asserts that the response has a <code>206 Partial Content</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertPartialContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertpaymentrequired" tabindex="-1"><a class="header-anchor" href="#assertpaymentrequired"><span>AssertPaymentRequired</span></a></h3><p>Asserts that the response has a <code>402 Payment Required</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertPaymentRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertrequesttimeout" tabindex="-1"><a class="header-anchor" href="#assertrequesttimeout"><span>AssertRequestTimeout</span></a></h3><p>Asserts that the response has a <code>408 Request Timeout</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertRequestTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertsee" tabindex="-1"><a class="header-anchor" href="#assertsee"><span>AssertSee</span></a></h3><p>Asserts that the response contains the specified values. The second parameter (optional) determines whether to escape special characters in the values before checking. If not provided, it defaults to <code>true</code>.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSee</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&lt;div&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertseeinorder" tabindex="-1"><a class="header-anchor" href="#assertseeinorder"><span>AssertSeeInOrder</span></a></h3><p>Asserts that the response contains the specified values in the given order. The second parameter (optional) determines whether to escape special characters in the values before checking. If not provided, it defaults to <code>true</code>.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSeeInOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;First&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Second&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertservererror" tabindex="-1"><a class="header-anchor" href="#assertservererror"><span>AssertServerError</span></a></h3><p>Asserts that the response has a server error (&gt;= 500 , &lt; 600) HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertserviceunavailable" tabindex="-1"><a class="header-anchor" href="#assertserviceunavailable"><span>AssertServiceUnavailable</span></a></h3><p>Asserts that the response has a <code>503 Service Unavailable</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertServiceUnavailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertstatus" tabindex="-1"><a class="header-anchor" href="#assertstatus"><span>AssertStatus</span></a></h3><p>Asserts that the response has the specified HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertsuccessful" tabindex="-1"><a class="header-anchor" href="#assertsuccessful"><span>AssertSuccessful</span></a></h3><p>Asserts that the response has a successful HTTP status code (2xx):</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="asserttemporaryredirect" tabindex="-1"><a class="header-anchor" href="#asserttemporaryredirect"><span>AssertTemporaryRedirect</span></a></h3><p>Asserts that the response has a <code>307 Temporary Redirect</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertTemporaryRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="asserttoomanyrequests" tabindex="-1"><a class="header-anchor" href="#asserttoomanyrequests"><span>AssertTooManyRequests</span></a></h3><p>Asserts that the response has a <code>429 Too Many Requests</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertTooManyRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertunauthorized" tabindex="-1"><a class="header-anchor" href="#assertunauthorized"><span>AssertUnauthorized</span></a></h3><p>Asserts that the response has a <code>401 Unauthorized</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertunprocessableentity" tabindex="-1"><a class="header-anchor" href="#assertunprocessableentity"><span>AssertUnprocessableEntity</span></a></h3><p>Asserts that the response has a <code>422 Unprocessable Entity</code> HTTP status code:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertUnprocessableEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,167)),a(i)])}const g=l(d,[["render",h],["__file","http-tests.html.vue"]]),b=JSON.parse(`{"path":"/testing/http-tests.html","title":"HTTP Tests","lang":"en-US","frontmatter":{"description":"HTTP Tests Introduction When building web applications, you'll often need to test if your HTTP requests work correctly from start to finish. Goravel's testing tools make this st...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/testing/http-tests.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/testing/http-tests.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/testing/http-tests.html"}],["meta",{"property":"og:description","content":"HTTP Tests Introduction When building web applications, you'll often need to test if your HTTP requests work correctly from start to finish. Goravel's testing tools make this st..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP Tests\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Make Requests","slug":"make-requests","link":"#make-requests","children":[{"level":3,"title":"Customize Request Headers","slug":"customize-request-headers","link":"#customize-request-headers","children":[]},{"level":3,"title":"Cookies","slug":"cookies","link":"#cookies","children":[]},{"level":3,"title":"WithSession","slug":"withsession","link":"#withsession","children":[]},{"level":3,"title":"Debugging Responses","slug":"debugging-responses","link":"#debugging-responses","children":[]}]},{"level":2,"title":"Building Body","slug":"building-body","link":"#building-body","children":[]},{"level":2,"title":"Testing Json APIs","slug":"testing-json-apis","link":"#testing-json-apis","children":[{"level":3,"title":"Asserting Exact JSON Matches","slug":"asserting-exact-json-matches","link":"#asserting-exact-json-matches","children":[]},{"level":3,"title":"Fluent JSON Testing","slug":"fluent-json-testing","link":"#fluent-json-testing","children":[]},{"level":3,"title":"Asserting Attribute Presence / Absence","slug":"asserting-attribute-presence-absence","link":"#asserting-attribute-presence-absence","children":[]},{"level":3,"title":"Scoping JSON Collection Assertions","slug":"scoping-json-collection-assertions","link":"#scoping-json-collection-assertions","children":[]}]},{"level":2,"title":"Available Assertions","slug":"available-assertions","link":"#available-assertions","children":[{"level":3,"title":"Response Assertions","slug":"response-assertions","link":"#response-assertions","children":[]},{"level":3,"title":"AssertAccepted","slug":"assertaccepted","link":"#assertaccepted","children":[]},{"level":3,"title":"AssertBadRequest","slug":"assertbadrequest","link":"#assertbadrequest","children":[]},{"level":3,"title":"AssertConflict","slug":"assertconflict","link":"#assertconflict","children":[]},{"level":3,"title":"AssertCookie","slug":"assertcookie","link":"#assertcookie","children":[]},{"level":3,"title":"AssertCookieExpired","slug":"assertcookieexpired","link":"#assertcookieexpired","children":[]},{"level":3,"title":"AssertCookieMissing","slug":"assertcookiemissing","link":"#assertcookiemissing","children":[]},{"level":3,"title":"AssertCookieNotExpired","slug":"assertcookienotexpired","link":"#assertcookienotexpired","children":[]},{"level":3,"title":"AssertCreated","slug":"assertcreated","link":"#assertcreated","children":[]},{"level":3,"title":"AssertDontSee","slug":"assertdontsee","link":"#assertdontsee","children":[]},{"level":3,"title":"AssertExactJson","slug":"assertexactjson","link":"#assertexactjson","children":[]},{"level":3,"title":"AssertFluentJson","slug":"assertfluentjson","link":"#assertfluentjson","children":[]},{"level":3,"title":"AssertForbidden","slug":"assertforbidden","link":"#assertforbidden","children":[]},{"level":3,"title":"AssertFound","slug":"assertfound","link":"#assertfound","children":[]},{"level":3,"title":"AssertGone","slug":"assertgone","link":"#assertgone","children":[]},{"level":3,"title":"AssertHeader","slug":"assertheader","link":"#assertheader","children":[]},{"level":3,"title":"AssertHeaderMissing","slug":"assertheadermissing","link":"#assertheadermissing","children":[]},{"level":3,"title":"AssertInternalServerError","slug":"assertinternalservererror","link":"#assertinternalservererror","children":[]},{"level":3,"title":"AssertJson","slug":"assertjson","link":"#assertjson","children":[]},{"level":3,"title":"AssertJsonMissing","slug":"assertjsonmissing","link":"#assertjsonmissing","children":[]},{"level":3,"title":"AssertMethodNotAllowed","slug":"assertmethodnotallowed","link":"#assertmethodnotallowed","children":[]},{"level":3,"title":"AssertMovedPermanently","slug":"assertmovedpermanently","link":"#assertmovedpermanently","children":[]},{"level":3,"title":"AssertNoContent","slug":"assertnocontent","link":"#assertnocontent","children":[]},{"level":3,"title":"AssertNotAcceptable","slug":"assertnotacceptable","link":"#assertnotacceptable","children":[]},{"level":3,"title":"AssertNotFound","slug":"assertnotfound","link":"#assertnotfound","children":[]},{"level":3,"title":"AssertNotModified","slug":"assertnotmodified","link":"#assertnotmodified","children":[]},{"level":3,"title":"AssertOk","slug":"assertok","link":"#assertok","children":[]},{"level":3,"title":"AssertPartialContent","slug":"assertpartialcontent","link":"#assertpartialcontent","children":[]},{"level":3,"title":"AssertPaymentRequired","slug":"assertpaymentrequired","link":"#assertpaymentrequired","children":[]},{"level":3,"title":"AssertRequestTimeout","slug":"assertrequesttimeout","link":"#assertrequesttimeout","children":[]},{"level":3,"title":"AssertSee","slug":"assertsee","link":"#assertsee","children":[]},{"level":3,"title":"AssertSeeInOrder","slug":"assertseeinorder","link":"#assertseeinorder","children":[]},{"level":3,"title":"AssertServerError","slug":"assertservererror","link":"#assertservererror","children":[]},{"level":3,"title":"AssertServiceUnavailable","slug":"assertserviceunavailable","link":"#assertserviceunavailable","children":[]},{"level":3,"title":"AssertStatus","slug":"assertstatus","link":"#assertstatus","children":[]},{"level":3,"title":"AssertSuccessful","slug":"assertsuccessful","link":"#assertsuccessful","children":[]},{"level":3,"title":"AssertTemporaryRedirect","slug":"asserttemporaryredirect","link":"#asserttemporaryredirect","children":[]},{"level":3,"title":"AssertTooManyRequests","slug":"asserttoomanyrequests","link":"#asserttoomanyrequests","children":[]},{"level":3,"title":"AssertUnauthorized","slug":"assertunauthorized","link":"#assertunauthorized","children":[]},{"level":3,"title":"AssertUnprocessableEntity","slug":"assertunprocessableentity","link":"#assertunprocessableentity","children":[]}]}],"git":{},"filePathRelative":"testing/http-tests.md","autoDesc":true}`);export{g as comp,b as data};
