import{_ as c,r as o,o as l,c as i,a as n,b as s,w as t,e as u,d as e}from"./app-R_yqPBBy.js";const d={},r=n("h1",{id:"日志",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日志"},[n("span",null,"日志")])],-1),k={class:"table-of-contents"},g=u(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>为了了解应用程序的运行状况，Goravel 提供了强大的日志模块，可以通过 <code>facades.Log()</code> 将日志消息、系统错误记录到文件或其他通道。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>在 <code>config/logging.go</code> 中进行所有自定义配置，允许配置不同的日志通道。</p><p><code>Goravel</code> 默认使用 <code>stack</code> 通道记录日志，<code>stack</code> 允许日志转发到多个通道中。</p><p><code>single</code> 和 <code>daily</code> 驱动中的 <code>print</code> 配置可以控制日志输出到控制台。</p><h2 id="可用的通道驱动" tabindex="-1"><a class="header-anchor" href="#可用的通道驱动"><span>可用的通道驱动</span></a></h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>stack</code></td><td>允许使用多个通道</td></tr><tr><td><code>single</code></td><td>单日志文件</td></tr><tr><td><code>daily</code></td><td>每天一个日志文件</td></tr><tr><td><code>custom</code></td><td>自定义驱动</td></tr></tbody></table><h3 id="注入-context" tabindex="-1"><a class="header-anchor" href="#注入-context"><span>注入 Context</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="写日志消息" tabindex="-1"><a class="header-anchor" href="#写日志消息"><span>写日志消息</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入特定通道" tabindex="-1"><a class="header-anchor" href="#写入特定通道"><span>写入特定通道</span></a></h3><p>有时，你可能希望将消息记录到应用程序默认频道以外的频道：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token string">&quot;single&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想同时写入多个通道，可以使用 <code>Stack</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;slack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="链式方法" tabindex="-1"><a class="header-anchor" href="#链式方法"><span>链式方法</span></a></h2><p>Goravel 提供有便捷的链式方式，方便在日志中插入更多有用信息：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Method</th><th>Action</th></tr></thead><tbody><tr><td>Code</td><td>设置日志代码。</td></tr><tr><td>Hint</td><td>设置提示，方便调试。</td></tr><tr><td>In</td><td>设置日志相关的分类。</td></tr><tr><td>Owner</td><td>设置日志归属人。</td></tr><tr><td>Request</td><td>记录重要的 Request。</td></tr><tr><td>Response</td><td>记录重要的 Response。</td></tr><tr><td>Tags</td><td>为日志添加标签。</td></tr><tr><td>User</td><td>记录触发日志的用户。</td></tr><tr><td>With</td><td>为日志附加数据。</td></tr><tr><td>WithTrace</td><td>为日志附加堆栈信息。</td></tr></tbody></table><h2 id="创建自定义通道" tabindex="-1"><a class="header-anchor" href="#创建自定义通道"><span>创建自定义通道</span></a></h2><p>如果你想定义一个完全自定义的驱动，可以在 <code>config/logging.go</code> 配置文件中指定 <code>custom</code> 驱动类型。 然后包含 <code>via</code> 选项，实现 <code>framework\\contracts\\log\\Logger</code> 接口：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// config/logging.go 配置
&quot;custom&quot;: map[string]interface{}{
    &quot;driver&quot;: &quot;custom&quot;,
    &quot;via&quot;:    &amp;Logger{},
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写驱动" tabindex="-1"><a class="header-anchor" href="#编写驱动"><span>编写驱动</span></a></h3><p>实现 <code>github.com/goravel/framework/contracts/log/Logger</code> 接口。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// framework/contracts/log/Logger
package log

type Logger interface {
  // Handle pass channel config path here
  Handle(channel string) (Hook, error)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件可以储存到 <code>app/extensions</code> 文件夹中（可修改）。例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> extensions

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>

  <span class="token string">&quot;github.com/goravel/framework/contracts/log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Handle 传入通道配置路径</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>logger <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>channel <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span>Hook<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Hook<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Hook <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Levels 要监控的等级</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Levels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level<span class="token punctuation">{</span>
    log<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>WarningLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>ErrorLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>FatalLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>PanicLevel<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fire 当触发时执行的逻辑</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Fire</span><span class="token punctuation">(</span>entry log<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;context=%v level=%v time=%v message=%s&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function v(m,h){const a=o("router-link"),p=o("CommentService");return l(),i("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[s(a,{to:"#简介"},{default:t(()=>[e("简介")]),_:1})]),n("li",null,[s(a,{to:"#配置"},{default:t(()=>[e("配置")]),_:1})]),n("li",null,[s(a,{to:"#可用的通道驱动"},{default:t(()=>[e("可用的通道驱动")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#注入-context"},{default:t(()=>[e("注入 Context")]),_:1})])])]),n("li",null,[s(a,{to:"#写日志消息"},{default:t(()=>[e("写日志消息")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#写入特定通道"},{default:t(()=>[e("写入特定通道")]),_:1})])])]),n("li",null,[s(a,{to:"#链式方法"},{default:t(()=>[e("链式方法")]),_:1})]),n("li",null,[s(a,{to:"#创建自定义通道"},{default:t(()=>[e("创建自定义通道")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#编写驱动"},{default:t(()=>[e("编写驱动")]),_:1})])])])])]),g,s(p)])}const b=c(d,[["render",v],["__file","logging.html.vue"]]),x=JSON.parse('{"path":"/zh/the-basics/logging.html","title":"日志","lang":"zh-CN","frontmatter":{"description":"日志 简介 为了了解应用程序的运行状况，Goravel 提供了强大的日志模块，可以通过 facades.Log() 将日志消息、系统错误记录到文件或其他通道。 配置 在 config/logging.go 中进行所有自定义配置，允许配置不同的日志通道。 Goravel 默认使用 stack 通道记录日志，stack 允许日志转发到多个通道中。 sing...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/the-basics/logging.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/the-basics/logging.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/the-basics/logging.html"}],["meta",{"property":"og:description","content":"日志 简介 为了了解应用程序的运行状况，Goravel 提供了强大的日志模块，可以通过 facades.Log() 将日志消息、系统错误记录到文件或其他通道。 配置 在 config/logging.go 中进行所有自定义配置，允许配置不同的日志通道。 Goravel 默认使用 stack 通道记录日志，stack 允许日志转发到多个通道中。 sing..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日志\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"可用的通道驱动","slug":"可用的通道驱动","link":"#可用的通道驱动","children":[{"level":3,"title":"注入 Context","slug":"注入-context","link":"#注入-context","children":[]}]},{"level":2,"title":"写日志消息","slug":"写日志消息","link":"#写日志消息","children":[{"level":3,"title":"写入特定通道","slug":"写入特定通道","link":"#写入特定通道","children":[]}]},{"level":2,"title":"链式方法","slug":"链式方法","link":"#链式方法","children":[]},{"level":2,"title":"创建自定义通道","slug":"创建自定义通道","link":"#创建自定义通道","children":[{"level":3,"title":"编写驱动","slug":"编写驱动","link":"#编写驱动","children":[]}]}],"git":{},"filePathRelative":"zh/the-basics/logging.md","autoDesc":true}');export{b as comp,x as data};
