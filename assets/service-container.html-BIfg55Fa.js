import{_ as p,r as o,o as l,c as d,a as n,b as e,w as s,d as a,e as i}from"./app-BzjH1taM.js";const u={},r=n("h1",{id:"service-container",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#service-container"},[n("span",null,"Service Container")])],-1),k={class:"table-of-contents"},h=i('<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>The Goravel service container is a powerful tool for managing class dependencies and performing dependency injection. It contains all the modules of Goravel, and allows you to bind your own services to container and resolve them when needed. The service container provides powerful support for third-party packages around Goravel.</p><h2 id="binding" tabindex="-1"><a class="header-anchor" href="#binding"><span>Binding</span></a></h2><h3 id="simple-bindings" tabindex="-1"><a class="header-anchor" href="#simple-bindings"><span>Simple Bindings</span></a></h3>',4),v=n("code",null,"app",-1),g=n("code",null,"Bind",-1),m=n("code",null,"key",-1),b=i(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> route

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/goravel/framework/contracts/foundation&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> Binding <span class="token operator">=</span> <span class="token string">&quot;goravel.route&quot;</span>

<span class="token keyword">type</span> ServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>route <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	app<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>Binding<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NewRoute</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>route <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As mentioned, you will typically be interacting with the container within service providers; however, if you would like to interact with the container outside of a service provider, you may do so via the <code>App</code> facade:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binding-a-singleton" tabindex="-1"><a class="header-anchor" href="#binding-a-singleton"><span>Binding A Singleton</span></a></h3><p>The <code>Singleton</code> method binds a class or interface into the container that should only be resolved one time. Once a singleton binding is resolved, the same object instance will be returned on subsequent calls into the container:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">NewGin</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="binding-instances" tabindex="-1"><a class="header-anchor" href="#binding-instances"><span>Binding Instances</span></a></h3><p>You may also bind an existing object instance into the container using the <code>Instance</code> method. The given instance will always be returned on subsequent calls into the container:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">Instance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="binding-with-parameter" tabindex="-1"><a class="header-anchor" href="#binding-with-parameter"><span>Binding With Parameter</span></a></h3><p>If you need some extra parameters to construct the service provider, you can use the <code>BindWith</code> method to pass parameters to the closure:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">BindWith</span><span class="token punctuation">(</span>Binding<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">,</span> parameters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">NewRoute</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resolving" tabindex="-1"><a class="header-anchor" href="#resolving"><span>Resolving</span></a></h2><h3 id="the-make-method" tabindex="-1"><a class="header-anchor" href="#the-make-method"><span>The <code>Make</code> Method</span></a></h3><p>You may use the <code>Make</code> method to resolve a class instance from the container. The <code>Make</code> method accepts the <code>key</code> you wish to resolve:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you are outside of a service provider in a location of your code that does not have access to the <code>app</code> variable, you may use the <code>App</code> facade to resolve a class instance from the container:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="the-makewith-method" tabindex="-1"><a class="header-anchor" href="#the-makewith-method"><span>The <code>MakeWith</code> Method</span></a></h3><p>If some of your class&#39;s dependencies are not resolvable via the container, you may inject them by passing them as an associative array into the <code>MakeWith</code> method, corresponding to the <code>BindWith</code> binding method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">MakeWith</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="other-methods" tabindex="-1"><a class="header-anchor" href="#other-methods"><span>Other Methods</span></a></h3><p>The framework provides some convenient methods to quickly resolve various facades: <code>MakeArtisan</code>, <code>MakeAuth</code>, <code>MakeCache</code>, <code>MakeConfig</code>, <code>MakeCrypt</code>, <code>MakeEvent</code>, <code>MakeGate</code>, <code>MakeGrpc</code>, <code>MakeHash</code>, <code>MakeLog</code>, <code>MakeMail</code>, <code>MakeOrm</code>, <code>MakeQueue</code>, <code>MakeRateLimiter</code>, <code>MakeRoute</code>, <code>MakeSchedule</code>, <code>MakeStorage</code>, <code>MakeValidation</code>.</p>`,23);function f(y,w){const t=o("router-link"),c=o("RouteLink");return l(),d("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[e(t,{to:"#introduction"},{default:s(()=>[a("Introduction")]),_:1})]),n("li",null,[e(t,{to:"#binding"},{default:s(()=>[a("Binding")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#simple-bindings"},{default:s(()=>[a("Simple Bindings")]),_:1})]),n("li",null,[e(t,{to:"#binding-a-singleton"},{default:s(()=>[a("Binding A Singleton")]),_:1})]),n("li",null,[e(t,{to:"#binding-instances"},{default:s(()=>[a("Binding Instances")]),_:1})]),n("li",null,[e(t,{to:"#binding-with-parameter"},{default:s(()=>[a("Binding With Parameter")]),_:1})])])]),n("li",null,[e(t,{to:"#resolving"},{default:s(()=>[a("Resolving")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#the-make-method"},{default:s(()=>[a("The Make Method")]),_:1})]),n("li",null,[e(t,{to:"#the-makewith-method"},{default:s(()=>[a("The MakeWith Method")]),_:1})]),n("li",null,[e(t,{to:"#other-methods"},{default:s(()=>[a("Other Methods")]),_:1})])])])])]),h,n("p",null,[a("Almost all of your service container bindings will be registered within "),e(c,{to:"/architecutre-concepts/service-providers.html"},{default:s(()=>[a("service providers")]),_:1}),a(". Within a service provider, you always have access to the container via the "),v,a(" parameter, then register a binding using the "),g,a(" method, passing the "),m,a(" that we wish to register along with a closure that returns an instance of the class:")]),b])}const _=p(u,[["render",f],["__file","service-container.html.vue"]]),B=JSON.parse('{"path":"/architecutre-concepts/service-container.html","title":"Service Container","lang":"en-US","frontmatter":{"description":"Service Container Introduction The Goravel service container is a powerful tool for managing class dependencies and performing dependency injection. It contains all the modules ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/architecutre-concepts/service-container.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/architecutre-concepts/service-container.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/architecutre-concepts/service-container.html"}],["meta",{"property":"og:description","content":"Service Container Introduction The Goravel service container is a powerful tool for managing class dependencies and performing dependency injection. It contains all the modules ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Service Container\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Binding","slug":"binding","link":"#binding","children":[{"level":3,"title":"Simple Bindings","slug":"simple-bindings","link":"#simple-bindings","children":[]},{"level":3,"title":"Binding A Singleton","slug":"binding-a-singleton","link":"#binding-a-singleton","children":[]},{"level":3,"title":"Binding Instances","slug":"binding-instances","link":"#binding-instances","children":[]},{"level":3,"title":"Binding With Parameter","slug":"binding-with-parameter","link":"#binding-with-parameter","children":[]}]},{"level":2,"title":"Resolving","slug":"resolving","link":"#resolving","children":[{"level":3,"title":"The Make Method","slug":"the-make-method","link":"#the-make-method","children":[]},{"level":3,"title":"The MakeWith Method","slug":"the-makewith-method","link":"#the-makewith-method","children":[]},{"level":3,"title":"Other Methods","slug":"other-methods","link":"#other-methods","children":[]}]}],"git":{},"filePathRelative":"architecutre-concepts/service-container.md","autoDesc":true}');export{_ as comp,B as data};
