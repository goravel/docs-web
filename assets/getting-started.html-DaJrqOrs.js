import{_ as o,c as l,b as s,e as t,f as e,a as c,r as i,o as u,d as p}from"./app-CkrpkKpR.js";const r={},d={class:"table-of-contents"};function k(v,n){const a=i("router-link");return u(),l("div",null,[n[16]||(n[16]=s("h1",{id:"快速入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#快速入门"},[s("span",null,"快速入门")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[t(a,{to:"#简介"},{default:e(()=>n[0]||(n[0]=[p("简介")])),_:1})]),s("li",null,[t(a,{to:"#配置"},{default:e(()=>n[1]||(n[1]=[p("配置")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#连接池"},{default:e(()=>n[2]||(n[2]=[p("连接池")])),_:1})]),s("li",null,[t(a,{to:"#读写分离"},{default:e(()=>n[3]||(n[3]=[p("读写分离")])),_:1})])])]),s("li",null,[t(a,{to:"#运行原生-sql-查询"},{default:e(()=>n[4]||(n[4]=[p("运行原生 SQL 查询")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#select"},{default:e(()=>n[5]||(n[5]=[p("Select")])),_:1})]),s("li",null,[t(a,{to:"#insert"},{default:e(()=>n[6]||(n[6]=[p("Insert")])),_:1})]),s("li",null,[t(a,{to:"#update"},{default:e(()=>n[7]||(n[7]=[p("Update")])),_:1})]),s("li",null,[t(a,{to:"#delete"},{default:e(()=>n[8]||(n[8]=[p("Delete")])),_:1})]),s("li",null,[t(a,{to:"#statement"},{default:e(()=>n[9]||(n[9]=[p("Statement")])),_:1})]),s("li",null,[t(a,{to:"#使用多个数据库连接"},{default:e(()=>n[10]||(n[10]=[p("使用多个数据库连接")])),_:1})])])]),s("li",null,[t(a,{to:"#数据库事务"},{default:e(()=>n[11]||(n[11]=[p("数据库事务")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#手动使用事务"},{default:e(()=>n[12]||(n[12]=[p("手动使用事务")])),_:1})])])]),s("li",null,[t(a,{to:"#检查数据库"},{default:e(()=>n[13]||(n[13]=[p("检查数据库")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#数据库概览"},{default:e(()=>n[14]||(n[14]=[p("数据库概览")])),_:1})]),s("li",null,[t(a,{to:"#表的摘要信息"},{default:e(()=>n[15]||(n[15]=[p("表的摘要信息")])),_:1})])])])])]),n[17]||(n[17]=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>几乎所有的应用程序都需要和数据库进行交互，Goravel 为此提供了一套非常简单易用的数据库交互方式。开发者可以使用原生 SQL，查询构造器，以及 <a href="../orm/getting-started">Orm</a> 等方式与数据库交互。目前，Goravel 为以下四种数据库提供了官方支持：</p><table><thead><tr><th>数据库</th><th>驱动</th></tr></thead><tbody><tr><td>PostgreSQL</td><td><a href="https://github.com/goravel/postgres" target="_blank" rel="noopener noreferrer">github.com/goravel/postgres</a></td></tr><tr><td>MySQL</td><td><a href="https://github.com/goravel/mysql" target="_blank" rel="noopener noreferrer">github.com/goravel/mysql</a></td></tr><tr><td>SQL Server</td><td><a href="https://github.com/goravel/sqlserver" target="_blank" rel="noopener noreferrer">github.com/goravel/sqlserver</a></td></tr><tr><td>SQLite</td><td><a href="https://github.com/goravel/sqlite" target="_blank" rel="noopener noreferrer">github.com/goravel/sqlite</a></td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>数据库的配置文件在 <code>config/database.go</code> 文件中。你可以在这个文件中配置所有的数据库连接，并指定默认的数据库连接。该文件中的大部分配置都基于项目的环境变量。</p><h3 id="连接池" tabindex="-1"><a class="header-anchor" href="#连接池"><span>连接池</span></a></h3><p>可以在配置文件中配置数据库连接池，合理的配置连接池参数，可以极大的提高并发性能：</p><table><thead><tr><th>配置键</th><th>作用</th></tr></thead><tbody><tr><td>pool.max_idle_conns</td><td>最大空闲连接</td></tr><tr><td>pool.max_open_conns</td><td>最大连接数</td></tr><tr><td>pool.conn_max_idletime</td><td>连接最大空闲时间</td></tr><tr><td>pool.conn_max_lifetime</td><td>连接最大生命周期</td></tr></tbody></table><h3 id="读写分离" tabindex="-1"><a class="header-anchor" href="#读写分离"><span>读写分离</span></a></h3><p>有时候你可能会希望使用一个数据库连接来执行 <code>SELECT</code> 语句，而 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句则由另一个数据库连接来执行。在 Goravel 中可以轻松实现读写分离。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// config/database.go</span></span>
<span class="line"><span class="token string">&quot;connections&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;read&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.1&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;write&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.2&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;port&quot;</span><span class="token punctuation">:</span>     config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PORT&quot;</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;database&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_DATABASE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PASSWORD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;charset&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;utf8mb4&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在数据库配置中加入了两个键，分别是：<code>read</code>, <code>write</code>，<code>192.168.1.1</code> 将会被用作「读」连接主机，而 <code>192.168.1.2</code> 将作为「写」连接主机。这两个连接将共享 <code>mysql</code> 数组中的各项配置，如数据库前缀、字符编码等。如果 <code>read</code> 或 <code>write</code> 数组中存在多个值，Goravel 将会为每个连接随机选取所使用的数据库主机。</p><h2 id="运行原生-sql-查询" tabindex="-1"><a class="header-anchor" href="#运行原生-sql-查询"><span>运行原生 SQL 查询</span></a></h2><p>配置好数据库连接后，你就可以使用 <code>facades.DB()</code> 来运行查询。<code>facades.DB</code> 提供了各种方法用于运行查询：<code>Select</code>、<code>Insert</code>、<code>Update</code>、<code>Delete</code> 和 <code>Statement</code>。</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h3><p>使用 <code>facades.DB().Select()</code> 方法执行基本的查询：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 获取多条记录</span></span>
<span class="line"><span class="token keyword">var</span> products <span class="token punctuation">[</span><span class="token punctuation">]</span>Product</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM products&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取单条记录</span></span>
<span class="line"><span class="token keyword">var</span> product Product</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM products WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：不同数据库驱动需要使用不同的占位符，例如：<code>?</code> 占位符适用于 MySQL，而 <code>@</code> 占位符适用于 PostgreSQL。</p></blockquote><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h3><p>使用 <code>facades.DB().Insert()</code> 方法执行插入语句：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (name, email) values (?, ?)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel@example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h3><p>使用 <code>facades.DB().Update()</code> 方法执行更新语句：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;update users set name = ? where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h3><p>使用 <code>facades.DB().Delete()</code> 方法执行删除语句：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;delete from users where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="statement" tabindex="-1"><a class="header-anchor" href="#statement"><span>Statement</span></a></h3><p>使用 <code>facades.DB().Statement()</code> 方法执行通用语句：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token string">&quot;drop table users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用多个数据库连接" tabindex="-1"><a class="header-anchor" href="#使用多个数据库连接"><span>使用多个数据库连接</span></a></h3><p>如果你在配置文件中定义了多个数据库连接，你可以通过 <code>facades.DB().Connection()</code> 方法来指定要使用的连接：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">&quot;select * from users where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库事务" tabindex="-1"><a class="header-anchor" href="#数据库事务"><span>数据库事务</span></a></h2><p>你可以使用 <code>facades.DB().Transaction()</code> 方法在数据库事务中执行一系列操作。如果在事务闭包中抛出了异常，事务将自动回滚。如果闭包成功执行，事务将自动提交：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database/db&quot;</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx db<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>Product<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;transaction product1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手动使用事务" tabindex="-1"><a class="header-anchor" href="#手动使用事务"><span>手动使用事务</span></a></h3><p>如果你想手动控制事务的开始、提交和回滚，可以使用 <code>Begin</code>、<code>Commit</code> 和 <code>Rollback</code> 方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (name) values (?)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="检查数据库" tabindex="-1"><a class="header-anchor" href="#检查数据库"><span>检查数据库</span></a></h2><h3 id="数据库概览" tabindex="-1"><a class="header-anchor" href="#数据库概览"><span>数据库概览</span></a></h3><p>Goravel 提供了几个 Artisan 命令来帮助你了解数据库的结构。</p><p>可以使用 <code>db:show</code> 命令查看数据库中的所有表。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:show</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:show <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>db:table</code> 命令查看指定表的结构。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:table</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表的摘要信息" tabindex="-1"><a class="header-anchor" href="#表的摘要信息"><span>表的摘要信息</span></a></h3><p>如果你想获得数据库中单张表的概览，你可以执行 <code>db:table</code> Artisan命令。这个命令提供了一个数据库表的概览，包括它的列、类型、属性、键和索引:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token function">users</span></span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token function">users</span> <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,49))])}const g=o(r,[["render",k],["__file","getting-started.html.vue"]]),b=JSON.parse('{"path":"/zh/database/getting-started.html","title":"快速入门","lang":"zh-CN","frontmatter":{"description":"快速入门 简介 几乎所有的应用程序都需要和数据库进行交互，Goravel 为此提供了一套非常简单易用的数据库交互方式。开发者可以使用原生 SQL，查询构造器，以及 Orm 等方式与数据库交互。目前，Goravel 为以下四种数据库提供了官方支持： 配置 数据库的配置文件在 config/database.go 文件中。你可以在这个文件中配置所有的数据库...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/database/getting-started.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/database/getting-started.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/database/getting-started.html"}],["meta",{"property":"og:description","content":"快速入门 简介 几乎所有的应用程序都需要和数据库进行交互，Goravel 为此提供了一套非常简单易用的数据库交互方式。开发者可以使用原生 SQL，查询构造器，以及 Orm 等方式与数据库交互。目前，Goravel 为以下四种数据库提供了官方支持： 配置 数据库的配置文件在 config/database.go 文件中。你可以在这个文件中配置所有的数据库..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[{"level":3,"title":"连接池","slug":"连接池","link":"#连接池","children":[]},{"level":3,"title":"读写分离","slug":"读写分离","link":"#读写分离","children":[]}]},{"level":2,"title":"运行原生 SQL 查询","slug":"运行原生-sql-查询","link":"#运行原生-sql-查询","children":[{"level":3,"title":"Select","slug":"select","link":"#select","children":[]},{"level":3,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":3,"title":"Update","slug":"update","link":"#update","children":[]},{"level":3,"title":"Delete","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"Statement","slug":"statement","link":"#statement","children":[]},{"level":3,"title":"使用多个数据库连接","slug":"使用多个数据库连接","link":"#使用多个数据库连接","children":[]}]},{"level":2,"title":"数据库事务","slug":"数据库事务","link":"#数据库事务","children":[{"level":3,"title":"手动使用事务","slug":"手动使用事务","link":"#手动使用事务","children":[]}]},{"level":2,"title":"检查数据库","slug":"检查数据库","link":"#检查数据库","children":[{"level":3,"title":"数据库概览","slug":"数据库概览","link":"#数据库概览","children":[]},{"level":3,"title":"表的摘要信息","slug":"表的摘要信息","link":"#表的摘要信息","children":[]}]}],"git":{},"filePathRelative":"zh/database/getting-started.md","autoDesc":true}');export{g as comp,b as data};
