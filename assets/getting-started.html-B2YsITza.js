import{_ as i,r as o,o as l,c as r,a as n,b as a,w as t,d as s,e as p}from"./app-st-TiGai.js";const d={},k=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started"},[n("span",null,"Getting Started")])],-1),m={class:"table-of-contents"},v=p(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Goravel makes it easy for developers to interact with databases using <code>facades.Orm()</code>. Currently, it provides official support for the following four databases:</p><ul><li>MySQL 5.7+</li><li>PostgreSQL 9.6+</li><li>SQLite 3.8.8+</li><li>SQL Server 2017+</li></ul><p>Before you start, configure the database in <code>.env</code> and confirm the <code>default</code> configuration in <code>config/database.go</code>.</p><h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h1><p>To configure databases, navigate to <code>config/database.go</code>. This is where you can customize all database connections and choose a <code>default</code> connection. The configuration in this file relies on the project&#39;s environment variables and showcases various database configurations that Goravel supports.</p><h3 id="read-write-connections" tabindex="-1"><a class="header-anchor" href="#read-write-connections"><span>Read &amp; Write Connections</span></a></h3><p>Sometimes you may wish to use one database connection for <code>SELECT</code> statements, and another for <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements. Goravel makes this a breeze.</p><p>To see how read/write connections should be configured, let&#39;s look at this example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database&quot;</span>

<span class="token comment">// config/database.go</span>
<span class="token string">&quot;connections&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
  <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
    <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;read&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.1&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;write&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>
      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.2&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;port&quot;</span><span class="token punctuation">:</span>     config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PORT&quot;</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;database&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_DATABASE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PASSWORD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&quot;charset&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;utf8mb4&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;loc&quot;</span><span class="token punctuation">:</span>      <span class="token string">&quot;Local&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have updated the configuration array with two new keys - <code>read</code> and <code>write</code>. The <code>read</code> connection will use <code>192.168.1.1</code> as the host, while the <code>write</code> connection will use <code>192.168.1.2</code>. Both connections will share the same database prefix, character set, and other options specified in the main mysql array. In case of multiple values in the <code>host</code> configuration array, a database host will be selected randomly for each request.</p><h3 id="connection-pool" tabindex="-1"><a class="header-anchor" href="#connection-pool"><span>Connection Pool</span></a></h3><p>You can configure a connection pool in the configuration file, reasonable configuration of connection pool parameters can greatly improve concurrency performance:</p><table><thead><tr><th>Key</th><th>Action</th></tr></thead><tbody><tr><td>pool.max_idle_conns</td><td>Max idle connections</td></tr><tr><td>pool.max_open_conns</td><td>Max open connections</td></tr><tr><td>pool.conn_max_idletime</td><td>Connections max idle time</td></tr><tr><td>pool.conn_max_lifetime</td><td>Connections max lifetime</td></tr></tbody></table><h2 id="model-definition" tabindex="-1"><a class="header-anchor" href="#model-definition"><span>Model Definition</span></a></h2><p>To create a custom model, refer to the model file <code>app/models/user.go</code> that is included in the framework. The <code>struct</code> in <code>app/models/user.go</code> contains two embedded frameworks: <code>orm.Model</code> and <code>orm.SoftDeletes</code>. These frameworks define <code>id</code>, <code>created_at</code>, <code>updated_at</code>, and <code>deleted_at</code> properties respectively. With <code>orm.SoftDeletes</code>, you can enable soft deletion for the model.</p><h3 id="model-convention" tabindex="-1"><a class="header-anchor" href="#model-convention"><span>Model Convention</span></a></h3><ol><li>The model is named with a big hump;</li><li>Use the plural form of the model &quot;snake naming&quot; as the table name;</li></ol><p>For example, the model name is <code>UserOrder</code>, and the table name is <code>user_orders</code>.</p><h3 id="create-model" tabindex="-1"><a class="header-anchor" href="#create-model"><span>Create Model</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan make:model User
go run <span class="token builtin class-name">.</span> artisan make:model user/User
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specify-table-name" tabindex="-1"><a class="header-anchor" href="#specify-table-name"><span>Specify Table Name</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> models

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/database/orm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Avatar <span class="token builtin">string</span>
  orm<span class="token punctuation">.</span>SoftDeletes
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;goravel_user&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="database-connections" tabindex="-1"><a class="header-anchor" href="#database-connections"><span>Database Connections</span></a></h3><p>By default, all models utilize the default database connection configured for your application. If you wish to specify a distinct connection to be used when interacting with a particular model, you need to define a <code>Connection</code> method on the model.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> models

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/database/orm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  orm<span class="token punctuation">.</span>Model
  Name   <span class="token builtin">string</span>
  Avatar <span class="token builtin">string</span>
  orm<span class="token punctuation">.</span>SoftDeletes
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;postgresql&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="facades-orm-available-functions" tabindex="-1"><a class="header-anchor" href="#facades-orm-available-functions"><span>facades.Orm available functions</span></a></h2><table><thead><tr><th>Name</th><th>Action</th></tr></thead><tbody><tr><td>Connection</td><td><a href="#specify-database-connection">Specify Database Connection</a></td></tr><tr><td>DB</td><td><a href="#generic-database-interface-sql-db">Generic Database Interface sql.DB</a></td></tr><tr><td>Query</td><td><a href="#get-database-instance">Get Database Instance</a></td></tr><tr><td>Transaction</td><td><a href="#transaction">Transaction</a></td></tr><tr><td>WithContext</td><td><a href="#inject-context">Inject Context</a></td></tr></tbody></table><h2 id="facades-orm-query-facades-orm-transaction-available-functions" tabindex="-1"><a class="header-anchor" href="#facades-orm-query-facades-orm-transaction-available-functions"><span>facades.Orm().Query &amp; facades.Orm().Transaction available functions</span></a></h2><table><thead><tr><th>Functions</th><th>Action</th></tr></thead><tbody><tr><td>Begin</td><td><a href="#transaction">Begin transaction</a></td></tr><tr><td>Commit</td><td><a href="#transaction">Commit transaction</a></td></tr><tr><td>Count</td><td><a href="#count">Count</a></td></tr><tr><td>Create</td><td><a href="#create">Create</a></td></tr><tr><td>Cursor</td><td><a href="#cursor">Cursor</a></td></tr><tr><td>Delete</td><td><a href="#delete">Delete</a></td></tr><tr><td>Distinct</td><td><a href="#filter-repetition">Filter Repetition</a></td></tr><tr><td>Driver</td><td><a href="#get-driver">Get Driver</a></td></tr><tr><td>Exec</td><td><a href="#execute-native-update-sql">Execute native update SQL</a></td></tr><tr><td>Exists</td><td><a href="#exists">Exists</a></td></tr><tr><td>Find</td><td><a href="#query-one-or-multiple-lines-by-id">Query one or multiple lines by ID</a></td></tr><tr><td>FindOrFail</td><td><a href="#not-found-return-error">Not found return error</a></td></tr><tr><td>First</td><td><a href="#query-one-line">Query one line</a></td></tr><tr><td>FirstOr</td><td><a href="#query-one-line">Query or return data through callback</a></td></tr><tr><td>FirstOrCreate</td><td><a href="#retrieving-or-creating-models">Retrieving Or Creating Models</a></td></tr><tr><td>FirstOrNew</td><td><a href="#retrieving-or-creating-models">Retrieving Or New Models</a></td></tr><tr><td>FirstOrFail</td><td><a href="#not-found-error">Not Found Error</a></td></tr><tr><td>ForceDelete</td><td><a href="#delete">Force delete</a></td></tr><tr><td>Get</td><td><a href="#query-multiple-lines">Query multiple lines</a></td></tr><tr><td>Group</td><td><a href="#group-by--having">Group</a></td></tr><tr><td>Having</td><td><a href="#group-by-having">Having</a></td></tr><tr><td>Join</td><td><a href="#join">Join</a></td></tr><tr><td>Limit</td><td><a href="#limit">Limit</a></td></tr><tr><td>LockForUpdate</td><td><a href="#pessimistic-locking">Pessimistic Locking</a></td></tr><tr><td>Model</td><td><a href="#specify-table-query">Specify a model</a></td></tr><tr><td>Offset</td><td><a href="#offset">Offset</a></td></tr><tr><td>Order</td><td><a href="#order">Order</a></td></tr><tr><td>OrderBy</td><td><a href="#order">Order</a></td></tr><tr><td>OrderByDesc</td><td><a href="#order">Order</a></td></tr><tr><td>InRandomOrder</td><td><a href="#order">Order</a></td></tr><tr><td>OrWhere</td><td><a href="#where">OrWhere</a></td></tr><tr><td>OrWhereNotIn</td><td><a href="#where">OrWhereNotIn</a></td></tr><tr><td>OrWhereNull</td><td><a href="#where">OrWhereNull</a></td></tr><tr><td>OrWhereIn</td><td><a href="#where">OrWhereIn</a></td></tr><tr><td>Paginate</td><td><a href="#paginate">Paginate</a></td></tr><tr><td>Pluck</td><td><a href="#query-single-column">Query single column</a></td></tr><tr><td>Raw</td><td><a href="#execute-native-sql">Execute native SQL</a></td></tr><tr><td>Rollback</td><td><a href="#transaction">Rollback transaction</a></td></tr><tr><td>Save</td><td><a href="#update-a-existing-model">Update a existing model</a></td></tr><tr><td>SaveQuietly</td><td><a href="#saving-a-single-model-without-events">Saving a single model without events</a></td></tr><tr><td>Scan</td><td><a href="#execute-native-sql">Scan struct</a></td></tr><tr><td>Scopes</td><td><a href="#scopes">Scopes</a></td></tr><tr><td>Select</td><td><a href="#specify-fields">Specify Fields</a></td></tr><tr><td>SharedLock</td><td><a href="#pessimistic-locking">Pessimistic Locking</a></td></tr><tr><td>Sum</td><td><a href="#sum">Sum</a></td></tr><tr><td>Table</td><td><a href="#specify-table-query">Specify a table</a></td></tr><tr><td>ToSql</td><td><a href="#get-sql">Get SQL</a></td></tr><tr><td>ToRawSql</td><td><a href="#get-sql">Get SQL</a></td></tr><tr><td>Update</td><td><a href="#update-a-single-column">Update a single column</a></td></tr><tr><td>UpdateOrCreate</td><td><a href="#update-or-create">Update or create</a></td></tr><tr><td>Where</td><td><a href="#where">Where</a></td></tr><tr><td>WhereBetween</td><td><a href="#where">WhereBetween</a></td></tr><tr><td>WhereNotBetween</td><td><a href="#where">WhereNotBetween</a></td></tr><tr><td>WhereNotIn</td><td><a href="#where">WhereNotIn</a></td></tr><tr><td>WhereNull</td><td><a href="#where">WhereNull</a></td></tr><tr><td>WhereIn</td><td><a href="#where">WhereIn</a></td></tr><tr><td>WithoutEvents</td><td><a href="#muting-events">Muting events</a></td></tr><tr><td>WithTrashed</td><td><a href="#query-soft-delete-data">Query soft delete data</a></td></tr></tbody></table><h2 id="query-builder" tabindex="-1"><a class="header-anchor" href="#query-builder"><span>Query Builder</span></a></h2><h3 id="inject-context" tabindex="-1"><a class="header-anchor" href="#inject-context"><span>Inject Context</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="specify-database-connection" tabindex="-1"><a class="header-anchor" href="#specify-database-connection"><span>Specify Database Connection</span></a></h3><p>If multiple database connections are defined in <code>config/database.go</code>, you can use them through the <code>Connection</code> function of <code>facades.Orm()</code>. The connection name passed to <code>Connection</code> should be one of the connections configured in <code>config/database.go</code>:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="generic-database-interface-sql-db" tabindex="-1"><a class="header-anchor" href="#generic-database-interface-sql-db"><span>Generic Database Interface sql.DB</span></a></h3><p>Generic database interface sql.DB, then use the functionality it provides:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
db<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Ping</span>
db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Close</span>
db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Returns database statistics</span>
db<span class="token punctuation">.</span><span class="token function">Stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// SetMaxIdleConns sets the maximum number of connections in the idle connection pool</span>
db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">// SetMaxOpenConns sets the maximum number of open connections to the database</span>
db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment">// SetConnMaxLifetime sets the maximum amount of time a connection may be reused</span>
db<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-database-instance" tabindex="-1"><a class="header-anchor" href="#get-database-instance"><span>Get Database Instance</span></a></h3><p>Before each specific database operation, it&#39;s necessary to obtain an instance of the database.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h3><h4 id="query-one-line" tabindex="-1"><a class="header-anchor" href="#query-one-line"><span>Query one line</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` ORDER BY \`users\`.\`id\` LIMIT 1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sometimes you may wish to perform some other action if no results are found. The <code>FirstOr</code> method will return a single model instance or, if no results are found, execute the given closure. You can set values to model in closure:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;first_user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;goravel&quot;</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-one-or-multiple-lines-by-id" tabindex="-1"><a class="header-anchor" href="#query-one-or-multiple-lines-by-id"><span>Query one or multiple lines by ID</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`users\`.\`id\` = 1;</span>

<span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`users\`.\`id\` IN (1,2,3);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="not-found-return-error" tabindex="-1"><a class="header-anchor" href="#not-found-return-error"><span>Not found return error</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FindOrFail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="when-the-primary-key-of-the-user-table-is-string-type-you-need-to-specify-the-primary-key-when-calling-find-method" tabindex="-1"><a class="header-anchor" href="#when-the-primary-key-of-the-user-table-is-string-type-you-need-to-specify-the-primary-key-when-calling-find-method"><span>When the primary key of the user table is <code>string</code> type, you need to specify the primary key when calling <code>Find</code> method</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">&quot;uuid=?&quot;</span> <span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`users\`.\`uuid\` = &quot;a&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="query-multiple-lines" tabindex="-1"><a class="header-anchor" href="#query-multiple-lines"><span>Query multiple lines</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id in ?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE id in (1,2,3);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="retrieving-or-creating-models" tabindex="-1"><a class="header-anchor" href="#retrieving-or-creating-models"><span>Retrieving Or Creating Models</span></a></h4><p>The <code>FirstOrCreate</code> method searches for a database record using the specified column/value pairs. If the model cannot be found in the database, it creates a new record with the attributes from merging the first argument with the optional second argument.</p><p>Similarly, the <code>FirstOrNew</code> method also tries to locate a record in the database based on the attributes given. However, if it is not found, a new instance of the model is returned. It&#39;s important to note that this new model has not been saved to the database yet and you need to manually call the <code>Save</code> method to do so.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`gender\` = 1 AND \`users\`.\`name\` = &#39;tom&#39; ORDER BY \`users\`.\`id\` LIMIT 1;</span>
<span class="token comment">// INSERT INTO \`users\` (\`created_at\`,\`updated_at\`,\`name\`) VALUES (&#39;2023-09-18 12:51:32.556&#39;,&#39;2023-09-18 12:51:32.556&#39;,&#39;tom&#39;);</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Avatar<span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`gender\` = 1 AND \`users\`.\`name\` = &#39;tom&#39; ORDER BY \`users\`.\`id\` LIMIT 1;</span>
<span class="token comment">// INSERT INTO \`users\` (\`created_at\`,\`updated_at\`,\`name\`,\`avatar\`) VALUES (&#39;2023-09-18 12:52:59.913&#39;,&#39;2023-09-18 12:52:59.913&#39;,&#39;tom&#39;,&#39;avatar&#39;);</span>

<span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrNew</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`gender\` = 1 AND \`users\`.\`name\` = &#39;tom&#39; ORDER BY \`users\`.\`id\` LIMIT 1;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;gender&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrNew</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Avatar<span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`gender\` = 1 AND \`users\`.\`name\` = &#39;tom&#39; ORDER BY \`users\`.\`id\` LIMIT 1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="not-found-error" tabindex="-1"><a class="header-anchor" href="#not-found-error"><span>Not Found Error</span></a></h4><p>When the requested item is not found, the <code>First</code> method does not generate an error. To generate an error, use the <code>FirstOrFail</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrFail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// err == orm.ErrRecordNotFound</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>Where</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = &#39;tom&#39;&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereBetween</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereNotBetween</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereNotIn</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereNull</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereIn</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrWhere</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrWhereNotIn</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrWhereNull</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrWhereIn</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit" tabindex="-1"><a class="header-anchor" href="#limit"><span>Limit</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; LIMIT 3;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="offset" tabindex="-1"><a class="header-anchor" href="#offset"><span>Offset</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; LIMIT 3 OFFSET 5;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order"><span>Order</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;sort asc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span><span class="token string">&quot;id desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; ORDER BY sort asc,id desc;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; ORDER BY sort asc;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; ORDER BY sort desc;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OrderByDesc</span><span class="token punctuation">(</span><span class="token string">&quot;sort&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; ORDER BY sort desc;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InRandomOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE name = &#39;tom&#39; ORDER BY RAND();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="paginate" tabindex="-1"><a class="header-anchor" href="#paginate"><span>Paginate</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
<span class="token keyword">var</span> total <span class="token builtin">int64</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Paginate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>users<span class="token punctuation">,</span> <span class="token operator">&amp;</span>total<span class="token punctuation">)</span>
<span class="token comment">// SELECT count(*) FROM \`users\`;</span>
<span class="token comment">// SELECT * FROM \`users\` LIMIT 10;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="query-single-column" tabindex="-1"><a class="header-anchor" href="#query-single-column"><span>Query Single Column</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> ages <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Pluck</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ages<span class="token punctuation">)</span>
<span class="token comment">// SELECT \`age\` FROM \`users\`;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specify-table-query" tabindex="-1"><a class="header-anchor" href="#specify-table-query"><span>Specify Table Query</span></a></h3><p>If you want to query some aggregate data, you need to specify a specific table.</p><p>Specify a model</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> count <span class="token builtin">int64</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
<span class="token comment">// SELECT count(*) FROM \`users\` WHERE deleted_at IS NULL;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Specify a table</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> count <span class="token builtin">int</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
<span class="token comment">// SELECT count(*) FROM \`users\`; // get all records, whether deleted or not</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-sql" tabindex="-1"><a class="header-anchor" href="#get-sql"><span>Get SQL</span></a></h3><p>Get SQL with placeholder:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM &quot;users&quot; WHERE &quot;id&quot; = $1 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Get SQL with value:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToRawSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM &quot;users&quot; WHERE &quot;id&quot; = 1 AND &quot;users&quot;.&quot;deleted_at&quot; IS NULL</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The methods can be called after <code>ToSql</code> and <code>ToRawSql</code>: <code>Count</code>, <code>Create</code>, <code>Delete</code>, <code>Find</code>, <code>First</code>, <code>Get</code>, <code>Pluck</code>, <code>Save</code>, <code>Sum</code>, <code>Update</code>.</p><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count"><span>Count</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> count <span class="token builtin">int64</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
<span class="token comment">// SELECT count(*) FROM \`users\` WHERE name = &#39;tom&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specify-fields" tabindex="-1"><a class="header-anchor" href="#specify-fields"><span>Specify Fields</span></a></h3><p><code>Select</code> allows you to specify which fields to retrieve from the database, by default the ORM retrieves all fields.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT \`name\`,\`age\` FROM \`users\`;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
<span class="token comment">// SELECT \`name\`,\`age\` FROM \`users\`;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="group-by-having" tabindex="-1"><a class="header-anchor" href="#group-by-having"><span>Group By &amp; Having</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name  <span class="token builtin">string</span>
  Total <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result Result
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;name, sum(age) as total&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Having</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>
<span class="token comment">// SELECT name, sum(age) as total FROM \`users\` GROUP BY \`name\` HAVING name = &quot;tom&quot;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>Join</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name  <span class="token builtin">string</span>
  Email <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result Result
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;users.name, emails.email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;left join emails on emails.user_id = users.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>
<span class="token comment">// SELECT users.name, emails.email FROM \`users\` LEFT JOIN emails ON emails.user_id = users.id;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create"><span>Create</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>user <span class="token operator">:=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>
result <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// INSERT INTO users (name, age, created_at, updated_at) VALUES (&quot;tom&quot;, 18, &quot;2022-09-27 22:00:00&quot;, &quot;2022-09-27 22:00:00&quot;);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multiple-create" tabindex="-1"><a class="header-anchor" href="#multiple-create"><span>Multiple create</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>users <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;tim&quot;</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
result <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>created_at</code> and <code>updated_at</code> will be filled automatically.</p></blockquote><h3 id="cursor" tabindex="-1"><a class="header-anchor" href="#cursor"><span>Cursor</span></a></h3>`,101),g=n("code",null,"Cursor",-1),b=n("code",null,"With",-1),f=n("code",null,"for",-1),h=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>cursor<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
<span class="token keyword">for</span> row <span class="token operator">:=</span> <span class="token keyword">range</span> cursor <span class="token punctuation">{</span>
  <span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
  <span class="token keyword">if</span> err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> err
  <span class="token punctuation">}</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="save-model" tabindex="-1"><a class="header-anchor" href="#save-model"><span>Save Model</span></a></h3><h4 id="update-an-existing-model" tabindex="-1"><a class="header-anchor" href="#update-an-existing-model"><span>Update an existing model</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span>
user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">100</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// UPDATE \`users\` SET \`created_at\`=&#39;2023-09-14 16:03:29.454&#39;,\`updated_at\`=&#39;2023-09-18 21:05:59.896&#39;,\`name\`=&#39;tom&#39;,\`age\`=100,\`avatar\`=&#39;&#39; WHERE \`id\` = 1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-columns" tabindex="-1"><a class="header-anchor" href="#update-columns"><span>Update columns</span></a></h4><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// UPDATE \`users\` SET \`name\`=&#39;hello&#39;,\`updated_at\`=&#39;2023-09-18 21:06:30.373&#39; WHERE \`name\` = &#39;tom&#39;;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// UPDATE \`users\` SET \`updated_at\`=&#39;2023-09-18 21:07:06.489&#39;,\`name\`=&#39;hello&#39;,\`age\`=18 WHERE \`name\` = &#39;tom&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>When updating with <code>struct</code>, Orm will only update non-zero fields. You might want to use <code>map</code> to update attributes or use <code>Select</code> to specify fields to update. Note that <code>struct</code> can only be <code>Model</code>, if you want to update with non <code>Model</code>, you need to use <code>.Table(&quot;users&quot;)</code>, however, the <code>updated_at</code> field cannot be updated automatically at this time.</p></blockquote><h4 id="update-or-create" tabindex="-1"><a class="header-anchor" href="#update-or-create"><span>Update or create</span></a></h4><p>Query by <code>name</code>, if not exist, create by <code>name</code>, <code>avatar</code>, if exists, update <code>avatar</code> based on <code>name</code>:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UpdateOrCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Avatar<span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// SELECT * FROM \`users\` WHERE \`users\`.\`name\` = &#39;name&#39; AND \`users\`.\`deleted_at\` IS NULL ORDER BY \`users\`.\`id\` LIMIT 1;</span>
<span class="token comment">// INSERT INTO \`users\` (\`created_at\`,\`updated_at\`,\`deleted_at\`,\`name\`,\`avatar\`) VALUES (&#39;2023-03-11 10:11:08.869&#39;,&#39;2023-03-11 10:11:08.869&#39;,NULL,&#39;name&#39;,&#39;avatar&#39;);</span>
<span class="token comment">// UPDATE \`users\` SET \`name\`=&#39;name&#39;,avatar\`=&#39;avatar&#39;,\`updated_at\`=&#39;2023-03-11 10:11:08.881&#39; WHERE users\`.\`deleted_at\` IS NULL AND \`id\` = 1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h3><p>Delete by model, the number of rows affected by the statement is returned by the method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
res<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM \`users\` WHERE \`users\`.\`id\` = 1;</span>

num <span class="token operator">:=</span> res<span class="token punctuation">.</span>RowsAffected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Delete by ID</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM \`users\` WHERE \`users\`.\`id\` = 10;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM \`users\` WHERE \`users\`.\`id\` IN (1,2,3);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Multiple delete</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// DELETE FROM \`users\` WHERE name = &#39;tom&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Want to force delete a soft-delete data.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForceDelete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can delete records with model associations via <code>Select</code>:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Delete Account of user when deleting user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// Delete Orders and CreditCards of user when deleting user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Orders&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CreditCards&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// Delete all child associations of user when deleting user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>orm<span class="token punctuation">.</span>Associations<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

<span class="token comment">// Delete all Account of users when deleting users</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: The associations will be deleted only if the primary key of the record is not empty, and Orm uses these primary keys as conditions to delete associated records:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Delete user that name=&#39;goravel&#39;, but don&#39;t delete account of user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Delete user that name=&#39;goravel&#39; and id = 1, and delete account of user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Delete user that id = 1 and delete account of that user</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If execute batch delete without any conditions, ORM doesn&#39;t do that and returns an error. So you have to add some conditions, or use native SQL.</p><h3 id="query-soft-delete-data" tabindex="-1"><a class="header-anchor" href="#query-soft-delete-data"><span>Query Soft Delete Data</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-repetition" tabindex="-1"><a class="header-anchor" href="#filter-repetition"><span>Filter Repetition</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Distinct</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-driver" tabindex="-1"><a class="header-anchor" href="#get-driver"><span>Get Driver</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>driver <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Judge driver</span>
<span class="token keyword">if</span> driver <span class="token operator">==</span> orm<span class="token punctuation">.</span>DriverMysql <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-native-sql" tabindex="-1"><a class="header-anchor" href="#execute-native-sql"><span>Execute Native SQL</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  ID   <span class="token builtin">int</span>
  Name <span class="token builtin">string</span>
  Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result Result
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT id, name, age FROM users WHERE name = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="execute-native-update-sql" tabindex="-1"><a class="header-anchor" href="#execute-native-update-sql"><span>Execute Native Update SQL</span></a></h3><p>The number of rows affected by the statement is returned by the method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">&quot;DROP TABLE users&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// DROP TABLE \`users\`;</span>

num <span class="token operator">:=</span> res<span class="token punctuation">.</span>RowsAffected
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exists" tabindex="-1"><a class="header-anchor" href="#exists"><span>Exists</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> exists <span class="token builtin">bool</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>exists<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction" tabindex="-1"><a class="header-anchor" href="#transaction"><span>Transaction</span></a></h3><p>You can execute a transaction by <code>Transaction</code> function.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/database/orm&quot;</span>
  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span>

  <span class="token string">&quot;goravel/app/models&quot;</span>
<span class="token punctuation">)</span>

<span class="token operator">...</span>

<span class="token keyword">return</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx orm<span class="token punctuation">.</span>Transaction<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> user models<span class="token punctuation">.</span>User

  <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also manually control the flow of the transaction yourself:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
user <span class="token operator">:=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scopes" tabindex="-1"><a class="header-anchor" href="#scopes"><span>Scopes</span></a></h3><p>Allows you to specify commonly used queries that can be referenced when method are called.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Paginator</span><span class="token punctuation">(</span>page <span class="token builtin">string</span><span class="token punctuation">,</span> limit <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>methods orm<span class="token punctuation">.</span>Query<span class="token punctuation">)</span> orm<span class="token punctuation">.</span>Query <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>query orm<span class="token punctuation">.</span>Query<span class="token punctuation">)</span> orm<span class="token punctuation">.</span>Query <span class="token punctuation">{</span>
    page<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>
    limit<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
    offset <span class="token operator">:=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit

    <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// scopes.Paginator is a custom function: func(ormcontract.Query) ormcontract.Query</span>
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scopes</span><span class="token punctuation">(</span>scopes<span class="token punctuation">.</span><span class="token function">Paginator</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entries<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="raw-expressions" tabindex="-1"><a class="header-anchor" href="#raw-expressions"><span>Raw Expressions</span></a></h3><p>You can use the <code>db.Raw</code> method to update fields:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/database/db&quot;</span>

facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">&quot;age - ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// UPDATE \`users\` SET \`age\`=age - 1,\`updated_at\`=&#39;2023-09-14 14:03:20.899&#39; WHERE \`users\`.\`deleted_at\` IS NULL AND \`id\` = 1;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pessimistic-locking" tabindex="-1"><a class="header-anchor" href="#pessimistic-locking"><span>Pessimistic Locking</span></a></h3><p>The query builder also includes a few functions to help you achieve &quot;pessimistic locking&quot; when executing your <code>select</code> statements.</p><p>To execute a statement with a &quot;shared lock&quot;, you may call the <code>SharedLock</code> method. A shared lock prevents the selected rows from being modified until your transaction is committed:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SharedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you may use the <code>LockForUpdate</code> method. A &quot;for update&quot; lock prevents the selected records from being modified or from being selected with another shared lock:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;votes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">LockForUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum"><span>Sum</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> sum <span class="token builtin">int</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h2><p>Orm models dispatch several events, allowing you to hook into the following moments in a model&#39;s lifecycle: <code>Retrieved</code>, <code>Creating</code>, <code>Created</code>, <code>Updating</code>, <code>Updated</code>, <code>Saving</code>, <code>Saved</code>, <code>Deleting</code>, <code>Deleted</code>, <code>ForceDeleting</code>, <code>ForceDeleted</code>.</p><p>The <code>Retrieved</code> event will dispatch when an existing model is retrieved from the database. When a new model is saved for the first time, the <code>Creating</code> and <code>Created</code> events will dispatch. The <code>Updating</code> / <code>Updated</code> events will dispatch when an existing model is modified and the <code>Save</code> method is called. The <code>Saving</code> / <code>Saved</code> events will dispatch when a model is created or updated - even if the model&#39;s attributes have not been changed. Event names ending with <code>-ing</code> are dispatched before any changes to the model are persisted, while events ending with <code>-ed</code> are dispatched after the changes to the model are persisted.</p><p>To start listening to model events, define a <code>DispatchesEvents</code> method on your model. This property maps various points of the model&#39;s lifecycle to your own event classes.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  contractsorm <span class="token string">&quot;github.com/goravel/framework/contracts/database/orm&quot;</span>
	<span class="token string">&quot;github.com/goravel/framework/database/orm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	orm<span class="token punctuation">.</span>Model
	Name    <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">DispatchesEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span>contractsorm<span class="token punctuation">.</span>EventType<span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span>contractsorm<span class="token punctuation">.</span>EventType<span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span>contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span>
		contractsorm<span class="token punctuation">.</span>EventCreating<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventCreated<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventSaving<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventSaved<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventUpdating<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventUpdated<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventDeleting<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventDeleted<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventForceDeleting<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventForceDeleted<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		contractsorm<span class="token punctuation">.</span>EventRetrieved<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>event contractsorm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note: Just register the events you need. Model events are not dispatched when doing batch operations through Orm.</p></blockquote><h3 id="observers" tabindex="-1"><a class="header-anchor" href="#observers"><span>Observers</span></a></h3><h4 id="defining-observers" tabindex="-1"><a class="header-anchor" href="#defining-observers"><span>Defining Observers</span></a></h4><p>If you are listening to many events on a given model, you may use observers to group all of your listeners into a single class. Observer classes have method names that reflect the Eloquent events you wish to listen for. Each of these methods receives the affected model as their only argument. The <code>make:observer</code> Artisan command is the easiest way to create a new observer class:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan make:observer UserObserver
go run <span class="token builtin class-name">.</span> artisan make:observer user/UserObserver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This command will place the new observer in your <code>app/observers</code> directory. If this directory does not exist, Artisan will create it for you. Your fresh observer will look like the following:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> observers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>

	<span class="token string">&quot;github.com/goravel/framework/contracts/database/orm&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> UserObserver <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Retrieved</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Creating</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Created</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Updating</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Updated</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Saving</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Saved</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Deleting</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">Deleted</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">ForceDeleting</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>UserObserver<span class="token punctuation">)</span> <span class="token function">ForceDeleted</span><span class="token punctuation">(</span>event orm<span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To register an observer, you need to call the <code>Observe</code> method on the model you wish to observe. You may register observers in the <code>Boot</code> method of your application&#39;s <code>app/providers/event_service_provider.go::Boot</code> service provider:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> providers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/goravel/framework/facades&quot;</span>

	<span class="token string">&quot;goravel/app/models&quot;</span>
	<span class="token string">&quot;goravel/app/observers&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> EventServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>EventServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	facades<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>EventServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>observers<span class="token punctuation">.</span>UserObserver<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>EventServiceProvider<span class="token punctuation">)</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span>event<span class="token punctuation">.</span>Event<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>Listener <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span>event<span class="token punctuation">.</span>Event<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>event<span class="token punctuation">.</span>Listener<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note: If you set <code>DispatchesEvents</code> and <code>Observer</code> at the same time, only <code>DispatchesEvents</code> will be applied.</p></blockquote><h4 id="parameter-in-observer" tabindex="-1"><a class="header-anchor" href="#parameter-in-observer"><span>Parameter in Observer</span></a></h4><p>The <code>event</code> parameter will be passed to all observers:</p><table><thead><tr><th>Method</th><th>Action</th></tr></thead><tbody><tr><td>Context</td><td>Get context that passed by <code>facades.Orm().WithContext()</code></td></tr><tr><td>GetAttribute</td><td>Get the modified value, if not modified, get the original value, if there is no original value, return nil</td></tr><tr><td>GetOriginal</td><td>Get the original value, if there is no original value, return nil</td></tr><tr><td>IsDirty</td><td>Determine whether the field is modified</td></tr><tr><td>IsClean</td><td>IsDirty reverse</td></tr><tr><td>Query</td><td>Get a new Query, which can be used with transaction</td></tr><tr><td>SetAttribute</td><td>Set a new value for a field</td></tr></tbody></table><h3 id="muting-events" tabindex="-1"><a class="header-anchor" href="#muting-events"><span>Muting Events</span></a></h3><p>You may occasionally need to temporarily &quot;mute&quot; all events fired by a model. You may achieve this using the <code>WithoutEvents</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithoutEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="saving-a-single-model-without-events" tabindex="-1"><a class="header-anchor" href="#saving-a-single-model-without-events"><span>Saving A Single Model Without Events</span></a></h4><p>Sometimes you may wish to &quot;save&quot; a given model without dispatching any events. You may accomplish this with the <code>SaveQuietly</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FindOrFail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;Goravel&quot;</span>
err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SaveQuietly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,80);function y(q,w){const e=o("router-link"),c=o("RouteLink"),u=o("CommentService");return l(),r("div",null,[k,n("nav",m,[n("ul",null,[n("li",null,[a(e,{to:"#introduction"},{default:t(()=>[s("Introduction")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#read-write-connections"},{default:t(()=>[s("Read & Write Connections")]),_:1})]),n("li",null,[a(e,{to:"#connection-pool"},{default:t(()=>[s("Connection Pool")]),_:1})])])]),n("li",null,[a(e,{to:"#model-definition"},{default:t(()=>[s("Model Definition")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#model-convention"},{default:t(()=>[s("Model Convention")]),_:1})]),n("li",null,[a(e,{to:"#create-model"},{default:t(()=>[s("Create Model")]),_:1})]),n("li",null,[a(e,{to:"#specify-table-name"},{default:t(()=>[s("Specify Table Name")]),_:1})]),n("li",null,[a(e,{to:"#database-connections"},{default:t(()=>[s("Database Connections")]),_:1})])])]),n("li",null,[a(e,{to:"#facades-orm-available-functions"},{default:t(()=>[s("facades.Orm available functions")]),_:1})]),n("li",null,[a(e,{to:"#facades-orm-query-facades-orm-transaction-available-functions"},{default:t(()=>[s("facades.Orm().Query & facades.Orm().Transaction available functions")]),_:1})]),n("li",null,[a(e,{to:"#query-builder"},{default:t(()=>[s("Query Builder")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#inject-context"},{default:t(()=>[s("Inject Context")]),_:1})]),n("li",null,[a(e,{to:"#specify-database-connection"},{default:t(()=>[s("Specify Database Connection")]),_:1})]),n("li",null,[a(e,{to:"#generic-database-interface-sql-db"},{default:t(()=>[s("Generic Database Interface sql.DB")]),_:1})]),n("li",null,[a(e,{to:"#get-database-instance"},{default:t(()=>[s("Get Database Instance")]),_:1})]),n("li",null,[a(e,{to:"#select"},{default:t(()=>[s("Select")]),_:1})]),n("li",null,[a(e,{to:"#where"},{default:t(()=>[s("Where")]),_:1})]),n("li",null,[a(e,{to:"#limit"},{default:t(()=>[s("Limit")]),_:1})]),n("li",null,[a(e,{to:"#offset"},{default:t(()=>[s("Offset")]),_:1})]),n("li",null,[a(e,{to:"#order"},{default:t(()=>[s("Order")]),_:1})]),n("li",null,[a(e,{to:"#paginate"},{default:t(()=>[s("Paginate")]),_:1})]),n("li",null,[a(e,{to:"#query-single-column"},{default:t(()=>[s("Query Single Column")]),_:1})]),n("li",null,[a(e,{to:"#specify-table-query"},{default:t(()=>[s("Specify Table Query")]),_:1})]),n("li",null,[a(e,{to:"#get-sql"},{default:t(()=>[s("Get SQL")]),_:1})]),n("li",null,[a(e,{to:"#count"},{default:t(()=>[s("Count")]),_:1})]),n("li",null,[a(e,{to:"#specify-fields"},{default:t(()=>[s("Specify Fields")]),_:1})]),n("li",null,[a(e,{to:"#group-by-having"},{default:t(()=>[s("Group By & Having")]),_:1})]),n("li",null,[a(e,{to:"#join"},{default:t(()=>[s("Join")]),_:1})]),n("li",null,[a(e,{to:"#create"},{default:t(()=>[s("Create")]),_:1})]),n("li",null,[a(e,{to:"#multiple-create"},{default:t(()=>[s("Multiple create")]),_:1})]),n("li",null,[a(e,{to:"#cursor"},{default:t(()=>[s("Cursor")]),_:1})]),n("li",null,[a(e,{to:"#save-model"},{default:t(()=>[s("Save Model")]),_:1})]),n("li",null,[a(e,{to:"#delete"},{default:t(()=>[s("Delete")]),_:1})]),n("li",null,[a(e,{to:"#query-soft-delete-data"},{default:t(()=>[s("Query Soft Delete Data")]),_:1})]),n("li",null,[a(e,{to:"#filter-repetition"},{default:t(()=>[s("Filter Repetition")]),_:1})]),n("li",null,[a(e,{to:"#get-driver"},{default:t(()=>[s("Get Driver")]),_:1})]),n("li",null,[a(e,{to:"#execute-native-sql"},{default:t(()=>[s("Execute Native SQL")]),_:1})]),n("li",null,[a(e,{to:"#execute-native-update-sql"},{default:t(()=>[s("Execute Native Update SQL")]),_:1})]),n("li",null,[a(e,{to:"#exists"},{default:t(()=>[s("Exists")]),_:1})]),n("li",null,[a(e,{to:"#transaction"},{default:t(()=>[s("Transaction")]),_:1})]),n("li",null,[a(e,{to:"#scopes"},{default:t(()=>[s("Scopes")]),_:1})]),n("li",null,[a(e,{to:"#raw-expressions"},{default:t(()=>[s("Raw Expressions")]),_:1})]),n("li",null,[a(e,{to:"#pessimistic-locking"},{default:t(()=>[s("Pessimistic Locking")]),_:1})]),n("li",null,[a(e,{to:"#sum"},{default:t(()=>[s("Sum")]),_:1})])])]),n("li",null,[a(e,{to:"#events"},{default:t(()=>[s("Events")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#observers"},{default:t(()=>[s("Observers")]),_:1})]),n("li",null,[a(e,{to:"#muting-events"},{default:t(()=>[s("Muting Events")]),_:1})])])])])]),v,n("p",null,[s("Can be used to significantly reduce your application's memory consumption when iterating through tens of thousands of Eloquent model records. Note, the "),g,s(" method can be used with "),b,s(" at the same time, please use "),a(c,{to:"/orm/relationships.html#lazy-eager-loading"},{default:t(()=>[s("Lazy Eager Loading")]),_:1}),s(" to load relationship in the "),f,s(" logic.")]),h,a(u)])}const O=i(d,[["render",y],["__file","getting-started.html.vue"]]),x=JSON.parse('{"path":"/orm/getting-started.html","title":"Getting Started","lang":"en-US","frontmatter":{"description":"Getting Started Introduction Goravel makes it easy for developers to interact with databases using facades.Orm(). Currently, it provides official support for the following four ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/orm/getting-started.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/orm/getting-started.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/getting-started.html"}],["meta",{"property":"og:description","content":"Getting Started Introduction Goravel makes it easy for developers to interact with databases using facades.Orm(). Currently, it provides official support for the following four ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Read & Write Connections","slug":"read-write-connections","link":"#read-write-connections","children":[]},{"level":3,"title":"Connection Pool","slug":"connection-pool","link":"#connection-pool","children":[]}]},{"level":2,"title":"Model Definition","slug":"model-definition","link":"#model-definition","children":[{"level":3,"title":"Model Convention","slug":"model-convention","link":"#model-convention","children":[]},{"level":3,"title":"Create Model","slug":"create-model","link":"#create-model","children":[]},{"level":3,"title":"Specify Table Name","slug":"specify-table-name","link":"#specify-table-name","children":[]},{"level":3,"title":"Database Connections","slug":"database-connections","link":"#database-connections","children":[]}]},{"level":2,"title":"facades.Orm available functions","slug":"facades-orm-available-functions","link":"#facades-orm-available-functions","children":[]},{"level":2,"title":"facades.Orm().Query & facades.Orm().Transaction available functions","slug":"facades-orm-query-facades-orm-transaction-available-functions","link":"#facades-orm-query-facades-orm-transaction-available-functions","children":[]},{"level":2,"title":"Query Builder","slug":"query-builder","link":"#query-builder","children":[{"level":3,"title":"Inject Context","slug":"inject-context","link":"#inject-context","children":[]},{"level":3,"title":"Specify Database Connection","slug":"specify-database-connection","link":"#specify-database-connection","children":[]},{"level":3,"title":"Generic Database Interface sql.DB","slug":"generic-database-interface-sql-db","link":"#generic-database-interface-sql-db","children":[]},{"level":3,"title":"Get Database Instance","slug":"get-database-instance","link":"#get-database-instance","children":[]},{"level":3,"title":"Select","slug":"select","link":"#select","children":[]},{"level":3,"title":"Where","slug":"where","link":"#where","children":[]},{"level":3,"title":"Limit","slug":"limit","link":"#limit","children":[]},{"level":3,"title":"Offset","slug":"offset","link":"#offset","children":[]},{"level":3,"title":"Order","slug":"order","link":"#order","children":[]},{"level":3,"title":"Paginate","slug":"paginate","link":"#paginate","children":[]},{"level":3,"title":"Query Single Column","slug":"query-single-column","link":"#query-single-column","children":[]},{"level":3,"title":"Specify Table Query","slug":"specify-table-query","link":"#specify-table-query","children":[]},{"level":3,"title":"Get SQL","slug":"get-sql","link":"#get-sql","children":[]},{"level":3,"title":"Count","slug":"count","link":"#count","children":[]},{"level":3,"title":"Specify Fields","slug":"specify-fields","link":"#specify-fields","children":[]},{"level":3,"title":"Group By & Having","slug":"group-by-having","link":"#group-by-having","children":[]},{"level":3,"title":"Join","slug":"join","link":"#join","children":[]},{"level":3,"title":"Create","slug":"create","link":"#create","children":[]},{"level":3,"title":"Multiple create","slug":"multiple-create","link":"#multiple-create","children":[]},{"level":3,"title":"Cursor","slug":"cursor","link":"#cursor","children":[]},{"level":3,"title":"Save Model","slug":"save-model","link":"#save-model","children":[]},{"level":3,"title":"Delete","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"Query Soft Delete Data","slug":"query-soft-delete-data","link":"#query-soft-delete-data","children":[]},{"level":3,"title":"Filter Repetition","slug":"filter-repetition","link":"#filter-repetition","children":[]},{"level":3,"title":"Get Driver","slug":"get-driver","link":"#get-driver","children":[]},{"level":3,"title":"Execute Native SQL","slug":"execute-native-sql","link":"#execute-native-sql","children":[]},{"level":3,"title":"Execute Native Update SQL","slug":"execute-native-update-sql","link":"#execute-native-update-sql","children":[]},{"level":3,"title":"Exists","slug":"exists","link":"#exists","children":[]},{"level":3,"title":"Transaction","slug":"transaction","link":"#transaction","children":[]},{"level":3,"title":"Scopes","slug":"scopes","link":"#scopes","children":[]},{"level":3,"title":"Raw Expressions","slug":"raw-expressions","link":"#raw-expressions","children":[]},{"level":3,"title":"Pessimistic Locking","slug":"pessimistic-locking","link":"#pessimistic-locking","children":[]},{"level":3,"title":"Sum","slug":"sum","link":"#sum","children":[]}]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[{"level":3,"title":"Observers","slug":"observers","link":"#observers","children":[]},{"level":3,"title":"Muting Events","slug":"muting-events","link":"#muting-events","children":[]}]}],"git":{},"filePathRelative":"orm/getting-started.md","autoDesc":true}');export{O as comp,x as data};
