import{_ as l,c,b as s,e as a,f as t,a as u,r as i,o as r,d as p}from"./app-Dq5zG3mR.js";const d={},k={class:"table-of-contents"};function m(v,n){const e=i("router-link"),o=i("CommentService");return r(),c("div",null,[n[10]||(n[10]=s("h1",{id:"artisan-console",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#artisan-console"},[s("span",null,"Artisan Console")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[a(e,{to:"#introduction"},{default:t(()=>n[0]||(n[0]=[p("Introduction")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#generating-commands"},{default:t(()=>n[1]||(n[1]=[p("Generating Commands")])),_:1})]),s("li",null,[a(e,{to:"#command-structure"},{default:t(()=>n[2]||(n[2]=[p("Command Structure")])),_:1})])])]),s("li",null,[a(e,{to:"#command-i-o"},{default:t(()=>n[3]||(n[3]=[p("Command I/O")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#retrieving-input"},{default:t(()=>n[4]||(n[4]=[p("Retrieving Input")])),_:1})]),s("li",null,[a(e,{to:"#prompting-for-input"},{default:t(()=>n[5]||(n[5]=[p("Prompting For Input")])),_:1})]),s("li",null,[a(e,{to:"#writing-output"},{default:t(()=>n[6]||(n[6]=[p("Writing Output")])),_:1})])])]),s("li",null,[a(e,{to:"#category"},{default:t(()=>n[7]||(n[7]=[p("Category")])),_:1})]),s("li",null,[a(e,{to:"#registering-commands"},{default:t(()=>n[8]||(n[8]=[p("Registering Commands")])),_:1})]),s("li",null,[a(e,{to:"#programmatically-executing-commands"},{default:t(()=>n[9]||(n[9]=[p("Programmatically Executing Commands")])),_:1})])])]),n[11]||(n[11]=u(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Artisan is the CLI tool that comes with Goravel for interacting with the command line. You can access it using <code>facades.Artisan()</code>. This tool has several useful commands that can assist you in the development of your application. Utilize the following command to view all available commands.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan list</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Each command also has a &quot;help&quot; feature that shows and explains the arguments and options associated with the command. To see the help screen, just add &quot;help&quot; before the command name.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan <span class="token builtin class-name">help</span> migrate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Instead of repeating <code>go run . artisan ...</code> command, you may want to add an alias to your shell configuration with the terminal command below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>alias artisan=<span class="token entity" title="\\&quot;">\\&quot;</span>go run . artisan<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token operator">&gt;&gt;</span>~/.zshrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then you can simply run your commands like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">artisan make:controller DemoController</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can also use <code>artisan</code> shell script like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">./artisan make:controller DemoController</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="generating-commands" tabindex="-1"><a class="header-anchor" href="#generating-commands"><span>Generating Commands</span></a></h3><p>You can use the <code>make:command</code> command to create a new command in the <code>app/console/commands</code> directory. Don&#39;t worry if this directory does not exist in your application, it will be created the first time you run the <code>make:command</code> command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan make:command SendEmails</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan make:command user/SendEmails</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="command-structure" tabindex="-1"><a class="header-anchor" href="#command-structure"><span>Command Structure</span></a></h3><p>After generating your command, assign suitable values to the signature and description properties of the struct. The <code>Handle</code> method will be called when your command is executed. You need to implement your logic in this method.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> commands</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/console&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/console/command&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> SendEmails <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Signature The name and signature of the console command.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;send:emails&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Description The console command description.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;Send emails&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Extend The console command extend.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Handle Execute the console command.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="command-i-o" tabindex="-1"><a class="header-anchor" href="#command-i-o"><span>Command I/O</span></a></h2><h3 id="retrieving-input" tabindex="-1"><a class="header-anchor" href="#retrieving-input"><span>Retrieving Input</span></a></h3><p>When you write console commands, it&#39;s typical to collect user input through <code>arguments</code> or <code>options</code>. With Goravel, it&#39;s extremely easy to retrieve the arguments and options that the user provides.</p><h4 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments"><span>Arguments</span></a></h4><p>Follow the arguments after the command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan send:emails NAME EMAIL</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Get arguments:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  name <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Argument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  email <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Argument</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">  all <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>Options</span></a></h4><p>Options, like arguments, are another form of user input. Options are prefixed by two hyphens (--) when they are provided via the command line.</p><p>Definition：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ListCommand<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span></span>
<span class="line">    Flags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>command<span class="token punctuation">.</span>Flag<span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">&amp;</span>command<span class="token punctuation">.</span>StringFlag<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span>    <span class="token string">&quot;lang&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Value<span class="token punctuation">:</span>   <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Usage<span class="token punctuation">:</span>   <span class="token string">&quot;language for the greeting&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ListCommand<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  lang <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Option</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Usage：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">--lang</span> Chinese</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">-l</span> Chinese</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice: When using both arguments and options, define the options before the arguments. Example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">// Right</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">--lang</span><span class="token operator">=</span>Chinese name</span>
<span class="line">// Wrong</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan emails name <span class="token parameter variable">--lang</span><span class="token operator">=</span>Chinese name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Except <code>command.StringFlag</code>, we can also use other type <code>Flag</code> and <code>Option*</code>: <code>StringSliceFlag</code>, <code>BoolFlag</code>, <code>Float64Flag</code>, <code>Float64SliceFlag</code>, <code>IntFlag</code>, <code>IntSliceFlag</code>, <code>Int64Flag</code>, <code>Int64SliceFlag</code>.</p><h3 id="prompting-for-input" tabindex="-1"><a class="header-anchor" href="#prompting-for-input"><span>Prompting For Input</span></a></h3><h4 id="asking-questions" tabindex="-1"><a class="header-anchor" href="#asking-questions"><span>Asking Questions</span></a></h4><p>In addition to arguments and options, you may also prompt the user for input during the execution of a command. The <code>Ask</code> method will prompt the user with the given question and return their response:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  email<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Ask</span><span class="token punctuation">(</span><span class="token string">&quot;What is your email address?&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, you can pass options to the <code>Ask</code> method as optional second argument:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Ask</span><span class="token punctuation">(</span><span class="token string">&quot;What is your name?&quot;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>AskOption<span class="token punctuation">{</span></span>
<span class="line">        Default<span class="token punctuation">:</span> <span class="token string">&quot;Krishan&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Available options</span></span>
<span class="line"><span class="token keyword">type</span> AskOption <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Default the default value for the input.</span></span>
<span class="line">    Default <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Description the input description.</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Lines the number of lines for the input.(use for multiple lines text)</span></span>
<span class="line">    Lines <span class="token builtin">int</span></span>
<span class="line">    <span class="token comment">// Limit the character limit for the input.</span></span>
<span class="line">    Limit <span class="token builtin">int</span></span>
<span class="line">    <span class="token comment">// Multiple determines if input is single line or multiple lines text</span></span>
<span class="line">    Multiple <span class="token builtin">bool</span></span>
<span class="line">    <span class="token comment">// Placeholder the input placeholder.</span></span>
<span class="line">    Placeholder <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Prompt the prompt message.(use for single line input)</span></span>
<span class="line">    Prompt <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Validate the input validation function.</span></span>
<span class="line">    Validate <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sometimes you may need to hide the user input, such as when prompting for a password. You can use the <code>Secret</code> method to hide the user input:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    password<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;What is the password?&quot;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>SecretOption<span class="token punctuation">{</span></span>
<span class="line">        Validate<span class="token punctuation">:</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;password length should be at least 8&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Available options</span></span>
<span class="line"><span class="token keyword">type</span> SecretOption <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Default the default value for the input.</span></span>
<span class="line">    Default <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Description the input description.</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Limit the character limit for the input.</span></span>
<span class="line">    Limit <span class="token builtin">int</span></span>
<span class="line">    <span class="token comment">// Placeholder the input placeholder.</span></span>
<span class="line">    Placeholder <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Validate the input validation function.</span></span>
<span class="line">    Validate <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="confirming-actions" tabindex="-1"><a class="header-anchor" href="#confirming-actions"><span>Confirming Actions</span></a></h4><p>If you need to ask the user to confirm an action before proceeding, you may use the <code>Confirm</code> method. By default, this method will return <code>false</code> unless the user select affirmative option.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> answer<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Do you wish to continue?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>answer <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also pass a second argument to the <code>Confirm</code> method to customize the default value, label of the affirmative and negative buttons:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> answer<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Do you wish to continue?&quot;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>ConfirmOption<span class="token punctuation">;</span> <span class="token operator">!</span>answer <span class="token punctuation">{</span></span>
<span class="line">	Default <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">	Affirmative <span class="token punctuation">:</span> <span class="token string">&quot;Yes&quot;</span><span class="token punctuation">,</span></span>
<span class="line">	Negative <span class="token punctuation">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Available options</span></span>
<span class="line"><span class="token keyword">type</span> ConfirmOption <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Affirmative label for the affirmative button.</span></span>
<span class="line">    Affirmative <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Default the default value for the input.</span></span>
<span class="line">    Default <span class="token builtin">bool</span></span>
<span class="line">    <span class="token comment">// Description the input description.</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Negative label for the negative button.</span></span>
<span class="line">    Negative <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="single-select-questions" tabindex="-1"><a class="header-anchor" href="#single-select-questions"><span>Single Select Questions</span></a></h4><p>If you need to ask the user to select an option from a list of options, you may use the <code>Choice</code> method. The <code>Choice</code> method will return the value of the selected option:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">question <span class="token operator">:=</span> <span class="token string">&quot;What is your favorite programming language?&quot;</span></span>
<span class="line">options <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Choice<span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;cpp&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> Selected<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">color<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Choice</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, you can pass options to the <code>Choice</code> method as optional second argument:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">question <span class="token operator">:=</span> <span class="token string">&quot;What is your favorite programming language?&quot;</span></span>
<span class="line">options <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Choice<span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;cpp&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> Selected<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">color<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Choice</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> options<span class="token punctuation">,</span> console<span class="token punctuation">.</span>ChoiceOption<span class="token punctuation">{</span></span>
<span class="line">    Default<span class="token punctuation">:</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Available options</span></span>
<span class="line"><span class="token keyword">type</span> ChoiceOption <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Default the default value for the input.</span></span>
<span class="line">    Default <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Description the input description.</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Validate the input validation function.</span></span>
<span class="line">    Validate <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="multiple-select-questions" tabindex="-1"><a class="header-anchor" href="#multiple-select-questions"><span>Multiple Select Questions</span></a></h4><p>If you need to ask the user to select multiple options from a list of options, you may use the <code>MultiSelect</code> method. The <code>MultiSelect</code> method will return the values of the selected options:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">question <span class="token operator">:=</span> <span class="token string">&quot;What are your favorite programming languages?&quot;</span></span>
<span class="line">options <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Choice<span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;cpp&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> Selected<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">colors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">MultiSelect</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Additionally, you can pass options to the <code>MultiSelect</code> method as optional second argument:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">question <span class="token operator">:=</span> <span class="token string">&quot;What are your favorite programming languages?&quot;</span></span>
<span class="line">options <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Choice<span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;php&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;PHP&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span>Key<span class="token punctuation">:</span> <span class="token string">&quot;cpp&quot;</span><span class="token punctuation">,</span> Value<span class="token punctuation">:</span> <span class="token string">&quot;C++&quot;</span><span class="token punctuation">,</span> Selected<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">colors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">MultiSelect</span><span class="token punctuation">(</span>question<span class="token punctuation">,</span> options<span class="token punctuation">,</span> console<span class="token punctuation">.</span>MultiSelectOption<span class="token punctuation">{</span></span>
<span class="line">    Default<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;go&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;php&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Available options</span></span>
<span class="line"><span class="token keyword">type</span> MultiSelectOption <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Default the default value for the input.</span></span>
<span class="line">    Default <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Description the input description.</span></span>
<span class="line">    Description <span class="token builtin">string</span></span>
<span class="line">    <span class="token comment">// Filterable determines if the choices can be filtered, type \`/\` to starting filter.</span></span>
<span class="line">    Filterable <span class="token builtin">bool</span></span>
<span class="line">    <span class="token comment">// Limit the number of choices that can be selected.</span></span>
<span class="line">    Limit <span class="token builtin">int</span></span>
<span class="line">    <span class="token comment">// Validate the input validation function.</span></span>
<span class="line">    Validate <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="writing-output" tabindex="-1"><a class="header-anchor" href="#writing-output"><span>Writing Output</span></a></h3><p>Sometimes you may need to write output to the console. Goravel provides several methods to assist you in writing output to the console. Each of the method have their appropriate colorized output. For example, <code>Error</code> will display the text in red.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">Comment</span><span class="token punctuation">(</span><span class="token string">&quot;This is a comment message&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;This is an info message&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;This is an error message&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">Line</span><span class="token punctuation">(</span><span class="token string">&quot;This is a line message&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  ctx<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">&quot;This is a warning message&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use the <code>NewLine</code> method to write a new line to the console:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// write single blank line</span></span>
<span class="line">ctx<span class="token punctuation">.</span><span class="token function">NewLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// write multiple blank lines</span></span>
<span class="line">ctx<span class="token punctuation">.</span><span class="token function">NewLine</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="progress-bars" tabindex="-1"><a class="header-anchor" href="#progress-bars"><span>Progress Bars</span></a></h4><p>For long-running tasks, it is often helpful to provide the user with some indication of how much time the task will take. You may use the <code>WithProgressBar</code> method to display a progress bar.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;item2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;item3&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">WithProgressBar</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>item any<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// performTask(item)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sometimes you may need to update the progress bar manually. You can use the <code>CreateProgressBar</code> method to update the progress bar:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">users <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;user1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user3&quot;</span><span class="token punctuation">}</span></span>
<span class="line">bar <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">CreateProgressBar</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">:=</span> bar<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// process user</span></span>
<span class="line">    bar<span class="token punctuation">.</span><span class="token function">Advance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// sleep for a while to simulate processing </span></span>
<span class="line">    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">=</span> bar<span class="token punctuation">.</span><span class="token function">Finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spinner" tabindex="-1"><a class="header-anchor" href="#spinner"><span>Spinner</span></a></h4><p>If you need to display a spinner while a task is running, you may use the <code>Spinner</code> method.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Spinner</span><span class="token punctuation">(</span><span class="token string">&quot;Loading...&quot;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>SpinnerOption<span class="token punctuation">{</span></span>
<span class="line">    Action<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// when to stop the spinner</span></span>
<span class="line">        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="category" tabindex="-1"><a class="header-anchor" href="#category"><span>Category</span></a></h2><p>You can set a set of commands to the same category, convenient in <code>go run . artisan list</code>:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Extend The console command extend.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ConsoleMakeCommand<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span></span>
<span class="line">    Category<span class="token punctuation">:</span> <span class="token string">&quot;make&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="registering-commands" tabindex="-1"><a class="header-anchor" href="#registering-commands"><span>Registering Commands</span></a></h2><p>All of your console commands need to be registered within the <code>Commands</code> function in <code>app\\console\\kernel.go</code>.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>kernel Kernel<span class="token punctuation">)</span> <span class="token function">Commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Command <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Command<span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&amp;</span>commands<span class="token punctuation">.</span>SendEmails<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="programmatically-executing-commands" tabindex="-1"><a class="header-anchor" href="#programmatically-executing-commands"><span>Programmatically Executing Commands</span></a></h2><p>Sometimes you may wish to execute an Artisan command outside of the CLI, you can use the <code>Call</code> method on the <code>facades.Artisan()</code> to operate this.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  facades<span class="token punctuation">.</span><span class="token function">Artisan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;emails&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  facades<span class="token punctuation">.</span><span class="token function">Artisan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;emails --lang Chinese name&quot;</span><span class="token punctuation">)</span> <span class="token comment">// With arguments and options</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81)),a(o)])}const h=l(d,[["render",m],["__file","artisan-console.html.vue"]]),b=JSON.parse('{"path":"/digging-deeper/artisan-console.html","title":"Artisan Console","lang":"en-US","frontmatter":{"description":"Artisan Console Introduction Artisan is the CLI tool that comes with Goravel for interacting with the command line. You can access it using facades.Artisan(). This tool has seve...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/digging-deeper/artisan-console.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/digging-deeper/artisan-console.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/digging-deeper/artisan-console.html"}],["meta",{"property":"og:description","content":"Artisan Console Introduction Artisan is the CLI tool that comes with Goravel for interacting with the command line. You can access it using facades.Artisan(). This tool has seve..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Artisan Console\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"Generating Commands","slug":"generating-commands","link":"#generating-commands","children":[]},{"level":3,"title":"Command Structure","slug":"command-structure","link":"#command-structure","children":[]}]},{"level":2,"title":"Command I/O","slug":"command-i-o","link":"#command-i-o","children":[{"level":3,"title":"Retrieving Input","slug":"retrieving-input","link":"#retrieving-input","children":[]},{"level":3,"title":"Prompting For Input","slug":"prompting-for-input","link":"#prompting-for-input","children":[]},{"level":3,"title":"Writing Output","slug":"writing-output","link":"#writing-output","children":[]}]},{"level":2,"title":"Category","slug":"category","link":"#category","children":[]},{"level":2,"title":"Registering Commands","slug":"registering-commands","link":"#registering-commands","children":[]},{"level":2,"title":"Programmatically Executing Commands","slug":"programmatically-executing-commands","link":"#programmatically-executing-commands","children":[]}],"git":{},"filePathRelative":"digging-deeper/artisan-console.md","autoDesc":true}');export{h as comp,b as data};
