import{_ as o,r as c,o as i,c as p,b as n,d as e,w as t,e as s,f as l}from"./app.c57080ea.js";const u={},d=n("h1",{id:"logging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logging","aria-hidden":"true"},"#"),s(" Logging")],-1),r={class:"table-of-contents"},k=s("Introduction"),v=s("Configuration"),g=s("Available channel drivers"),m=s("Write log messages"),f=s("Create a custom channel"),h=s("\u7F16\u5199\u9A71\u52A8"),b=l(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>In order to understand the running status of the application, Goravel provides a powerful log service that can record log messages and system errors to a file or other channels through <code>facades.Log</code>.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Make custom configurations in <code>config/logging.go</code>, allows to configure different log channels.</p><p><code>Goravel</code> uses <code>stack</code> channel to record logs by default, <code>stack</code> allows logs to be forwarded to multiple channels.</p><h2 id="available-channel-drivers" tabindex="-1"><a class="header-anchor" href="#available-channel-drivers" aria-hidden="true">#</a> Available channel drivers</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>stack</code></td><td>Allow multiple channels</td></tr><tr><td><code>single</code></td><td>Single log file</td></tr><tr><td><code>daily</code></td><td>One log file per day</td></tr><tr><td><code>custom</code></td><td>Custom drive</td></tr></tbody></table><h2 id="write-log-messages" tabindex="-1"><a class="header-anchor" href="#write-log-messages" aria-hidden="true">#</a> Write log messages</h2><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span>Log<span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-a-custom-channel" tabindex="-1"><a class="header-anchor" href="#create-a-custom-channel" aria-hidden="true">#</a> Create a custom channel</h2><p>If you want to define a completely custom channel, you can specify the <code>custom</code> driver type in the <code>config/logging.go</code> configuration file. Then include a <code>via</code> option to implement a <code>framework\\contracts\\log\\Logger</code> structure:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//config/logging.go
&quot;custom&quot;: map[string]interface{}{
    &quot;driver&quot;: &quot;custom&quot;,
    &quot;via&quot;:    CustomTest{},
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7F16\u5199\u9A71\u52A8" tabindex="-1"><a class="header-anchor" href="#\u7F16\u5199\u9A71\u52A8" aria-hidden="true">#</a> \u7F16\u5199\u9A71\u52A8</h3><p>Implement <code>framework\\contracts\\log\\Logger</code> interface.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//framework\\contracts\\log\\Logger
package log

type Logger interface {
	// Handle pass channel config path here
	Handle(channel string) (Hook, error)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>files can be stored in the <code>app/extensions</code> folder (modifiable). Example:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> extensions

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>

	<span class="token string">&quot;github.com/goravel/framework/contracts/log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Handle pass channel config path here</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>logger <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>channel <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span>Hook<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Hook<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Hook <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Levels monitoring level</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Levels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level<span class="token punctuation">{</span>
		log<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">,</span>
		log<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">,</span>
		log<span class="token punctuation">.</span>WarningLevel<span class="token punctuation">,</span>
		log<span class="token punctuation">.</span>ErrorLevel<span class="token punctuation">,</span>
		log<span class="token punctuation">.</span>FatalLevel<span class="token punctuation">,</span>
		log<span class="token punctuation">.</span>PanicLevel<span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fire execute logic when trigger</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Fire</span><span class="token punctuation">(</span>entry <span class="token operator">*</span>log<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;level=%v time=%v message=%s&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">GetLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">GetTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function _(y,L){const a=c("router-link");return i(),p("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[e(a,{to:"#introduction"},{default:t(()=>[k]),_:1})]),n("li",null,[e(a,{to:"#configuration"},{default:t(()=>[v]),_:1})]),n("li",null,[e(a,{to:"#available-channel-drivers"},{default:t(()=>[g]),_:1})]),n("li",null,[e(a,{to:"#write-log-messages"},{default:t(()=>[m]),_:1})]),n("li",null,[e(a,{to:"#create-a-custom-channel"},{default:t(()=>[f]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#\u7F16\u5199\u9A71\u52A8"},{default:t(()=>[h]),_:1})])])])])]),b])}const x=o(u,[["render",_],["__file","logging.html.vue"]]);export{x as default};
