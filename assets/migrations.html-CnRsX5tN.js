import{_ as o,r as i,o as r,c,a,b as e,w as s,e as d,d as t}from"./app-R_yqPBBy.js";const p={},u=a("h1",{id:"migrations",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#migrations"},[a("span",null,"Migrations")])],-1),m={class:"table-of-contents"},g=d(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>When multiple people collaborate to develop applications, it&#39;s crucial to have a standardized database structure for synchronization. Without this, there could be chaos as everyone&#39;s individual data won&#39;t match up. Database migration is the solution to this problem. The database structure is version-controlled to ensure its consistency within all developers.</p><h2 id="create-migrations" tabindex="-1"><a class="header-anchor" href="#create-migrations"><span>Create Migrations</span></a></h2><p>Use the <code>make:migration</code> command to create the migration:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan make:migration create_users_table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This command will generate migration files in the <code>database/migrations</code> directory. Each migration file will begin with a timestamp, which Goravel will use to determine the execution order of the migration files. All migration files are in <code>.sql</code> format, and you can customize the table structure using SQL statements.</p><p>The migration command will generate two migration files simultaneously: <code>***.up.sql</code> for execution and <code>***.down.sql</code> for rollback.</p><h2 id="run-migrations" tabindex="-1"><a class="header-anchor" href="#run-migrations"><span>Run Migrations</span></a></h2><p>To run all of your outstanding migrations, execute the <code>migrate</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you would like to see which migrations have run thus far, you may use the <code>migrate:status</code> Artisan command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="rolling-back-migrations" tabindex="-1"><a class="header-anchor" href="#rolling-back-migrations"><span>Rolling Back Migrations</span></a></h2><p>To roll back the latest migration, use the <code>rollback</code> Artisan command. This command rolls back the last &quot;batch&quot; of migrations, which may include multiple migration files:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:rollback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may roll back a limited number of migrations by providing the <code>step</code> option to the <code>rollback</code> command. For example, the following command will roll back the last five migrations:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:rollback <span class="token parameter variable">--step</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>migrate:reset</code> command will roll back all of your application&#39;s migrations:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="roll-back-migrate-using-a-single-command" tabindex="-1"><a class="header-anchor" href="#roll-back-migrate-using-a-single-command"><span>Roll Back &amp; Migrate Using A Single Command</span></a></h3><p>The <code>migrate:refresh</code> command will roll back all of your migrations and then execute the <code>migrate</code> command. This command effectively re-creates your entire database:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You may roll back and re-migrate a limited number of migrations by providing the <code>step</code> option to the <code>refresh</code> command. For example, the following command will roll back and re-migrate the last five migrations:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:refresh <span class="token parameter variable">--step</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="drop-all-tables-migrate" tabindex="-1"><a class="header-anchor" href="#drop-all-tables-migrate"><span>Drop All Tables &amp; Migrate</span></a></h3><p>The <code>migrate:fresh</code> command will drop all tables from the database and then execute the <code>migrate</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:fresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="quickly-create" tabindex="-1"><a class="header-anchor" href="#quickly-create"><span>Quickly Create</span></a></h2><p>Using <code>create_users_table</code> will automatically generate a table containing the infrastructure of <code>users</code>:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>
  id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  created_at <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  updated_at <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> idx_users_created_at <span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> idx_users_updated_at <span class="token punctuation">(</span>updated_at<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> DummyDatabaseCharset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The realization principle is to match according to the regularity:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>^create_<span class="token punctuation">(</span><span class="token punctuation">\\</span>w+<span class="token punctuation">)</span>_table$
^create_<span class="token punctuation">(</span><span class="token punctuation">\\</span>w+<span class="token punctuation">)</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>add_avatar_to_users_table</code> will automatically generate a structure for adding fields to the <code>users</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">ADD</span> <span class="token keyword">column</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- ALTER TABLE users ADD \`avatar\` varchar(255) NOT NULL DEFAULT &#39;&#39; AFTER \`id\` COMMENT &#39;avatar&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The realization principle is to match according to the regularity:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>_(to|from|in)_(\\w+)_table$
_(to|from|in)_(\\w+)$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>When the above conditions are not matched, the framework will generate an empty migration file.</p>`,37);function h(b,k){const n=i("router-link"),l=i("CommentService");return r(),c("div",null,[u,a("nav",m,[a("ul",null,[a("li",null,[e(n,{to:"#introduction"},{default:s(()=>[t("Introduction")]),_:1})]),a("li",null,[e(n,{to:"#create-migrations"},{default:s(()=>[t("Create Migrations")]),_:1})]),a("li",null,[e(n,{to:"#run-migrations"},{default:s(()=>[t("Run Migrations")]),_:1})]),a("li",null,[e(n,{to:"#rolling-back-migrations"},{default:s(()=>[t("Rolling Back Migrations")]),_:1}),a("ul",null,[a("li",null,[e(n,{to:"#roll-back-migrate-using-a-single-command"},{default:s(()=>[t("Roll Back & Migrate Using A Single Command")]),_:1})]),a("li",null,[e(n,{to:"#drop-all-tables-migrate"},{default:s(()=>[t("Drop All Tables & Migrate")]),_:1})])])]),a("li",null,[e(n,{to:"#quickly-create"},{default:s(()=>[t("Quickly Create")]),_:1})])])]),g,e(l)])}const f=o(p,[["render",h],["__file","migrations.html.vue"]]),y=JSON.parse(`{"path":"/orm/migrations.html","title":"Migrations","lang":"en-US","frontmatter":{"description":"Migrations Introduction When multiple people collaborate to develop applications, it's crucial to have a standardized database structure for synchronization. Without this, there...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/orm/migrations.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/orm/migrations.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/migrations.html"}],["meta",{"property":"og:description","content":"Migrations Introduction When multiple people collaborate to develop applications, it's crucial to have a standardized database structure for synchronization. Without this, there..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Migrations\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Create Migrations","slug":"create-migrations","link":"#create-migrations","children":[]},{"level":2,"title":"Run Migrations","slug":"run-migrations","link":"#run-migrations","children":[]},{"level":2,"title":"Rolling Back Migrations","slug":"rolling-back-migrations","link":"#rolling-back-migrations","children":[{"level":3,"title":"Roll Back & Migrate Using A Single Command","slug":"roll-back-migrate-using-a-single-command","link":"#roll-back-migrate-using-a-single-command","children":[]},{"level":3,"title":"Drop All Tables & Migrate","slug":"drop-all-tables-migrate","link":"#drop-all-tables-migrate","children":[]}]},{"level":2,"title":"Quickly Create","slug":"quickly-create","link":"#quickly-create","children":[]}],"git":{},"filePathRelative":"orm/migrations.md","autoDesc":true}`);export{f as comp,y as data};
