import{_ as c,c as u,b as s,e,f as t,a as o,d as a,r as l,o as r}from"./app-Jnelnv2S.js";const d={},k={class:"table-of-contents"};function m(v,n){const p=l("router-link"),i=l("RouteLink");return r(),u("div",null,[n[12]||(n[12]=s("h1",{id:"模型工厂",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#模型工厂"},[s("span",null,"模型工厂")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[e(p,{to:"#介绍"},{default:t(()=>n[0]||(n[0]=[a("介绍")])),_:1})]),s("li",null,[e(p,{to:"#创建工厂"},{default:t(()=>n[1]||(n[1]=[a("创建工厂")])),_:1}),s("ul",null,[s("li",null,[e(p,{to:"#模型和工厂的关联约定"},{default:t(()=>n[2]||(n[2]=[a("模型和工厂的关联约定")])),_:1})])])]),s("li",null,[e(p,{to:"#使用工厂创建模型"},{default:t(()=>n[3]||(n[3]=[a("使用工厂创建模型")])),_:1}),s("ul",null,[s("li",null,[e(p,{to:"#实例化模型"},{default:t(()=>n[4]||(n[4]=[a("实例化模型")])),_:1})]),s("li",null,[e(p,{to:"#持久化模型"},{default:t(()=>n[5]||(n[5]=[a("持久化模型")])),_:1})]),s("li",null,[e(p,{to:"#忽略模型事件"},{default:t(()=>n[6]||(n[6]=[a("忽略模型事件")])),_:1})])])])])]),n[13]||(n[13]=o(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>测试时您可能需要在执行测试之前向数据库中插入一些记录。Goravel 允许你使用模型工厂为每个模型定义一组默认属性，而不是在创建测试数据时手动指定每一列的值。</p><p>要了解如何编写工厂，请查看应用程序中的 <code>database/factories/user_factory.go</code> 文件：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> factories</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> UserFactory <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Definition Define the model&#39;s default state.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>UserFactory<span class="token punctuation">)</span> <span class="token function">Definition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如您所见，在最基本的形式中，factories 是定义 <code>Definition</code> 方法的 struct。<code>Definition</code> 方法返回对应模型的属性值。可以使用 <a href="https://github.com/brianvoe/gofakeit" target="_blank" rel="noopener noreferrer">brianvoe/gofakeit</a> 包来生成各种随机数据。</p><h2 id="创建工厂" tabindex="-1"><a class="header-anchor" href="#创建工厂"><span>创建工厂</span></a></h2><p>可以使用 Artisan 命令 <code>make:factory</code> 创建工厂：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">go run . artisan make:factory PostFactory</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>新工厂将放置在您的 <code>database/factories</code> 目录下。</p><h3 id="模型和工厂的关联约定" tabindex="-1"><a class="header-anchor" href="#模型和工厂的关联约定"><span>模型和工厂的关联约定</span></a></h3><p>定义工厂后，可以在模型中使用 <code>Factory()</code> 方法将工厂与模型绑定在一起：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> models</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/database/factory&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/database/orm&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;goravel/database/factories&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  orm<span class="token punctuation">.</span>Model</span>
<span class="line">  Name   <span class="token builtin">string</span></span>
<span class="line">  Avatar <span class="token builtin">string</span></span>
<span class="line">  orm<span class="token punctuation">.</span>SoftDeletes</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span>Factory <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>factories<span class="token punctuation">.</span>UserFactory<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用工厂创建模型" tabindex="-1"><a class="header-anchor" href="#使用工厂创建模型"><span>使用工厂创建模型</span></a></h2><h3 id="实例化模型" tabindex="-1"><a class="header-anchor" href="#实例化模型"><span>实例化模型</span></a></h3><p>我们可以使用 <code>Make</code> 方法来创建模型而且不需要将它们持久化到数据库中：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>Count</code> 方法创建许多模型的集合：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您想覆盖模型的一些默认值，你可以将 <code>map[string]any</code> 传递给 <code>Make</code> 方法。只有指定的属性将被替换，而这些属性的其余部分保持设置为其默认值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Avatar&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="持久化模型" tabindex="-1"><a class="header-anchor" href="#持久化模型"><span>持久化模型</span></a></h3><p><code>Create</code> 方法创建模型实例，并使用 Orm 的 <code>Save</code> 方法其持久化到数据库中：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以通过将 <code>map[string]any</code> 传递给 <code>Create</code> 方法来覆盖模型上的属性：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Avatar&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="忽略模型事件" tabindex="-1"><a class="header-anchor" href="#忽略模型事件"><span>忽略模型事件</span></a></h3>`,26)),s("p",null,[n[8]||(n[8]=a("在模型上可能会定义有")),e(i,{to:"/zh/orm/getting-started.html#events"},{default:t(()=>n[7]||(n[7]=[a("模型事件")])),_:1}),n[9]||(n[9]=a("，您可以使用 ")),n[10]||(n[10]=s("code",null,"CreateQuietly",-1)),n[11]||(n[11]=a(" 忽略这些事件："))]),n[14]||(n[14]=o(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateQuietly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const b=c(d,[["render",m],["__file","factories.html.vue"]]),f=JSON.parse('{"path":"/zh/orm/factories.html","title":"模型工厂","lang":"zh-CN","frontmatter":{"description":"模型工厂 介绍 测试时您可能需要在执行测试之前向数据库中插入一些记录。Goravel 允许你使用模型工厂为每个模型定义一组默认属性，而不是在创建测试数据时手动指定每一列的值。 要了解如何编写工厂，请查看应用程序中的 database/factories/user_factory.go 文件： 正如您所见，在最基本的形式中，factories 是定义 D...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/orm/factories.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/orm/factories.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/factories.html"}],["meta",{"property":"og:description","content":"模型工厂 介绍 测试时您可能需要在执行测试之前向数据库中插入一些记录。Goravel 允许你使用模型工厂为每个模型定义一组默认属性，而不是在创建测试数据时手动指定每一列的值。 要了解如何编写工厂，请查看应用程序中的 database/factories/user_factory.go 文件： 正如您所见，在最基本的形式中，factories 是定义 D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模型工厂\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"创建工厂","slug":"创建工厂","link":"#创建工厂","children":[{"level":3,"title":"模型和工厂的关联约定","slug":"模型和工厂的关联约定","link":"#模型和工厂的关联约定","children":[]}]},{"level":2,"title":"使用工厂创建模型","slug":"使用工厂创建模型","link":"#使用工厂创建模型","children":[{"level":3,"title":"实例化模型","slug":"实例化模型","link":"#实例化模型","children":[]},{"level":3,"title":"持久化模型","slug":"持久化模型","link":"#持久化模型","children":[]},{"level":3,"title":"忽略模型事件","slug":"忽略模型事件","link":"#忽略模型事件","children":[]}]}],"git":{},"filePathRelative":"zh/orm/factories.md","autoDesc":true}');export{b as comp,f as data};
