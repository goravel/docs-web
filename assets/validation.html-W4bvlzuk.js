import{_ as u,c as r,b as s,e as t,f as e,a as p,d as a,r as i,o as d}from"./app-hjPvX2yP.js";const k={},v={class:"table-of-contents"};function m(g,n){const o=i("router-link"),l=i("RouteLink"),c=i("CommentService");return d(),r("div",null,[n[35]||(n[35]=s("h1",{id:"validation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#validation"},[s("span",null,"Validation")])],-1)),s("nav",v,[s("ul",null,[s("li",null,[t(o,{to:"#introduction"},{default:e(()=>n[0]||(n[0]=[a("Introduction")])),_:1})]),s("li",null,[t(o,{to:"#validation-quickstart"},{default:e(()=>n[1]||(n[1]=[a("Validation Quickstart")])),_:1}),s("ul",null,[s("li",null,[t(o,{to:"#defining-the-routes"},{default:e(()=>n[2]||(n[2]=[a("Defining The Routes")])),_:1})]),s("li",null,[t(o,{to:"#creating-the-controller"},{default:e(()=>n[3]||(n[3]=[a("Creating The Controller")])),_:1})]),s("li",null,[t(o,{to:"#writing-the-validation-logic"},{default:e(()=>n[4]||(n[4]=[a("Writing The Validation Logic")])),_:1})]),s("li",null,[t(o,{to:"#nested-attributes"},{default:e(()=>n[5]||(n[5]=[a("Nested Attributes")])),_:1})]),s("li",null,[t(o,{to:"#slice-validation"},{default:e(()=>n[6]||(n[6]=[a("Slice Validation")])),_:1})])])]),s("li",null,[t(o,{to:"#form-request-validation"},{default:e(()=>n[7]||(n[7]=[a("Form Request Validation")])),_:1}),s("ul",null,[s("li",null,[t(o,{to:"#creating-form-requests"},{default:e(()=>n[8]||(n[8]=[a("Creating Form Requests")])),_:1})]),s("li",null,[t(o,{to:"#authorizing-form-requests"},{default:e(()=>n[9]||(n[9]=[a("Authorizing Form Requests")])),_:1})]),s("li",null,[t(o,{to:"#filter-input-data"},{default:e(()=>n[10]||(n[10]=[a("Filter Input Data")])),_:1})]),s("li",null,[t(o,{to:"#customizing-the-error-messages"},{default:e(()=>n[11]||(n[11]=[a("Customizing The Error Messages")])),_:1})]),s("li",null,[t(o,{to:"#customizing-the-validation-attributes"},{default:e(()=>n[12]||(n[12]=[a("Customizing The Validation Attributes")])),_:1})]),s("li",null,[t(o,{to:"#preparing-input-for-validation"},{default:e(()=>n[13]||(n[13]=[a("Preparing Input For Validation")])),_:1})])])]),s("li",null,[t(o,{to:"#manually-creating-validators"},{default:e(()=>n[14]||(n[14]=[a("Manually Creating Validators")])),_:1}),s("ul",null,[s("li",null,[t(o,{to:"#customizing-the-error-messages-1"},{default:e(()=>n[15]||(n[15]=[a("Customizing The Error Messages")])),_:1})]),s("li",null,[t(o,{to:"#specifying-a-custom-message-for-a-given-attribute"},{default:e(()=>n[16]||(n[16]=[a("Specifying A Custom Message For A Given Attribute")])),_:1})]),s("li",null,[t(o,{to:"#specifying-custom-attribute-values"},{default:e(()=>n[17]||(n[17]=[a("Specifying Custom Attribute Values")])),_:1})]),s("li",null,[t(o,{to:"#format-data-before-validation"},{default:e(()=>n[18]||(n[18]=[a("Format Data Before Validation")])),_:1})])])]),s("li",null,[t(o,{to:"#working-with-validated-input"},{default:e(()=>n[19]||(n[19]=[a("Working With Validated Input")])),_:1})]),s("li",null,[t(o,{to:"#working-with-error-messages"},{default:e(()=>n[20]||(n[20]=[a("Working With Error Messages")])),_:1}),s("ul",null,[s("li",null,[t(o,{to:"#retrieving-one-error-message-for-a-field-random"},{default:e(()=>n[21]||(n[21]=[a("Retrieving one Error Message For A Field (Random)")])),_:1})]),s("li",null,[t(o,{to:"#retrieving-all-error-messages-for-a-field"},{default:e(()=>n[22]||(n[22]=[a("Retrieving All Error Messages For A Field")])),_:1})]),s("li",null,[t(o,{to:"#retrieving-all-error-messages-for-all-fields"},{default:e(()=>n[23]||(n[23]=[a("Retrieving All Error Messages For All Fields")])),_:1})]),s("li",null,[t(o,{to:"#determining-if-error-messages-exist-for-a-field"},{default:e(()=>n[24]||(n[24]=[a("Determining If Error Messages Exist For A Field")])),_:1})])])]),s("li",null,[t(o,{to:"#available-validation-rules"},{default:e(()=>n[25]||(n[25]=[a("Available Validation Rules")])),_:1}),s("ul",null,[s("li",null,[t(o,{to:"#points-for-using-rules"},{default:e(()=>n[26]||(n[26]=[a("Points For Using Rules")])),_:1})])])]),s("li",null,[t(o,{to:"#custom-validation-rules"},{default:e(()=>n[27]||(n[27]=[a("Custom Validation Rules")])),_:1})]),s("li",null,[t(o,{to:"#available-validation-filters"},{default:e(()=>n[28]||(n[28]=[a("Available Validation Filters")])),_:1})]),s("li",null,[t(o,{to:"#custom-filter"},{default:e(()=>n[29]||(n[29]=[a("Custom filter")])),_:1})])])]),n[36]||(n[36]=p(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Goravel provides several different approaches to validate your application&#39;s incoming data. It is most common to use the <code>Validate</code> method available on all incoming HTTP requests. Goravel includes a wide variety of convenient validation rules.</p><h2 id="validation-quickstart" tabindex="-1"><a class="header-anchor" href="#validation-quickstart"><span>Validation Quickstart</span></a></h2><p>Let&#39;s take a closer look at a complete example of how to validate a form and return error messages to the user. This overview will provide you with a general understanding of how to validate incoming request data using Goravel.</p><h3 id="defining-the-routes" tabindex="-1"><a class="header-anchor" href="#defining-the-routes"><span>Defining The Routes</span></a></h3><p>First, let&#39;s assume we have the following routes defined in our <code>routes/web.go</code> file:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;goravel/app/http/controllers&quot;</span></span>
<span class="line"></span>
<span class="line">postController <span class="token operator">:=</span> controllers<span class="token punctuation">.</span><span class="token function">NewPostController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/post/create&quot;</span><span class="token punctuation">,</span> postController<span class="token punctuation">.</span>Create<span class="token punctuation">)</span></span>
<span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> postController<span class="token punctuation">.</span>Store<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>GET</code> route displays a form for creating a new blog post. The <code>POST</code> route stores the new post in the database.</p><h3 id="creating-the-controller" tabindex="-1"><a class="header-anchor" href="#creating-the-controller"><span>Creating The Controller</span></a></h3><p>Next, let&#39;s take a look at a simple controller that handles incoming requests to these routes. We&#39;ll leave the <code>Store</code> method empty for now:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> controllers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/http&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> PostController <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Dependent services</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewPostController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>PostController <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>PostController<span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Inject services</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="writing-the-validation-logic" tabindex="-1"><a class="header-anchor" href="#writing-the-validation-logic"><span>Writing The Validation Logic</span></a></h3><p>Now we are ready to fill in our <code>Store</code> method with the logic to validate the new blog post.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|regex:^\\d{4,6}$&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-attributes" tabindex="-1"><a class="header-anchor" href="#nested-attributes"><span>Nested Attributes</span></a></h3><p>If the incoming HTTP request contains &quot;nested&quot; field data, you may specify these fields in your validation rules using the &quot;dot&quot; syntax:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;author.name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string">&quot;author.description&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="slice-validation" tabindex="-1"><a class="header-anchor" href="#slice-validation"><span>Slice Validation</span></a></h3><p>If the incoming HTTP request contains &quot;array&quot; field data, you may specify these fields in your validation rules using the <code>*</code> syntax:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;tags.*&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="form-request-validation" tabindex="-1"><a class="header-anchor" href="#form-request-validation"><span>Form Request Validation</span></a></h2><h3 id="creating-form-requests" tabindex="-1"><a class="header-anchor" href="#creating-form-requests"><span>Creating Form Requests</span></a></h3><p>For more complex validation scenarios, you may wish to create a &quot;form request&quot;. Form requests are custom request classes that encapsulate their own validation and authorization logic. To create a form request class, you may use the <code>make:request</code> Artisan CLI command:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>request StorePostRequest</span>
<span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>request user<span class="token operator">/</span>StorePostRequest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The generated form request class will be placed in the <code>app/http/requests</code> directory. If this directory does not exist, it will be created when you run the <code>make:request</code> command. Each form request generated by Goravel has six methods: <code>Authorize</code>, <code>Rules</code>. In addition, you can customize the <code>Filters</code>, <code>Messages</code>, <code>Attributes</code> and <code>PrepareForValidation</code> methods for further operations.</p><p>The <code>Authorize</code> method is responsible for determining if the currently authenticated user can perform the action represented by the request, while the <code>Rules</code> method returns the validation rules that should apply to the request&#39;s data:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> requests</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/http&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> StorePostRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  Name <span class="token builtin">string</span> <span class="token string">\`form:&quot;name&quot; json:&quot;name&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Rules</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The keys are consistent with the incoming keys.</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Filters</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;trim&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Messages</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Attributes</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">PrepareForValidation</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data validation<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, how are the validation rules evaluated? All you need to do is type-hint the request on your controller method. The incoming form request is validated before the controller method is called, meaning you do not need to clutter your controller with any validation logic:</p><p>Then you can use the <code>ValidateRequest</code> method to validate the request in the controller:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> storePost requests<span class="token punctuation">.</span>StorePostRequest</span>
<span class="line">  errors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>storePost<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Check more rules in the <a href="#available-validation-rules">Available Validation Rules</a> section.</p><blockquote><p>Note that since <code>form</code> passed values ​​are of <code>string</code> type by default, all fields in request should also be of <code>string</code> type, otherwise please use <code>JSON</code> to pass values.</p></blockquote><h3 id="authorizing-form-requests" tabindex="-1"><a class="header-anchor" href="#authorizing-form-requests"><span>Authorizing Form Requests</span></a></h3>`,33)),s("p",null,[n[31]||(n[31]=a("The form request class also contains an ")),n[32]||(n[32]=s("code",null,"Authorize",-1)),n[33]||(n[33]=a(" method. Within this method, you may determine if the authenticated user actually has the authority to update a given resource. For example, you may determine if a user actually owns a blog comment they are attempting to update. Most likely, you will interact with your ")),t(l,{to:"/security/authorization.html"},{default:e(()=>n[30]||(n[30]=[a("authorization gates and policies")])),_:1}),n[34]||(n[34]=a(" within this method:"))]),n[37]||(n[37]=p(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> comment models<span class="token punctuation">.</span>Comment</span>
<span class="line">  facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>comment<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> comment<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;no comment is found&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token operator">!</span>facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Allows</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;comment&quot;</span><span class="token punctuation">:</span> comment<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t update comment&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>error</code> will be passed to the return value of <code>ctx.Request().ValidateRequest</code>.</p><h3 id="filter-input-data" tabindex="-1"><a class="header-anchor" href="#filter-input-data"><span>Filter Input Data</span></a></h3><p>You can format the input data by improving the <code>Filters</code> method of the form request. This method should return an map of <code>attribute/filter</code>:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Filters</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;trim&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customizing-the-error-messages" tabindex="-1"><a class="header-anchor" href="#customizing-the-error-messages"><span>Customizing The Error Messages</span></a></h3><p>You may customize the error messages used by the form request by overriding the <code>Messages</code> method. This method should return an array of attribute / rule pairs and their corresponding error messages:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;title.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A title is required&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;body.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A message is required&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customizing-the-validation-attributes" tabindex="-1"><a class="header-anchor" href="#customizing-the-validation-attributes"><span>Customizing The Validation Attributes</span></a></h3><p>Many of Goravel&#39;s built-in validation rule error messages contain an <code>:attribute</code> placeholder. If you would like the <code>:attribute</code> placeholder of your validation message to be replaced with a custom attribute name, you may specify the custom names by overriding the <code>Attributes</code> method. This method should return an array of attribute / name pairs:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;email address&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="preparing-input-for-validation" tabindex="-1"><a class="header-anchor" href="#preparing-input-for-validation"><span>Preparing Input For Validation</span></a></h3><p>If you need to prepare or sanitize any data from the request before you apply your validation rules, you may use the <code>PrepareForValidation</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">PrepareForValidation</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data validation<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> name<span class="token punctuation">,</span> exist <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="manually-creating-validators" tabindex="-1"><a class="header-anchor" href="#manually-creating-validators"><span>Manually Creating Validators</span></a></h2><p>If you do not want to use the <code>Validate</code> method on the request, you may create a validator instance manually using the <code>facades.Validator</code>. The <code>Make</code> method of the facade generates a new validator instance:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  validator<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> validator<span class="token punctuation">.</span><span class="token function">Fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Return fail</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">  err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first argument passed to the <code>Make</code> method is the data under validation which can be <code>map[string]any</code> or <code>struct</code>. The second argument is an array of validation rules to be applied to the data.</p><h3 id="customizing-the-error-messages-1" tabindex="-1"><a class="header-anchor" href="#customizing-the-error-messages-1"><span>Customizing The Error Messages</span></a></h3><p>If needed, you may provide custom error messages that a validator instance should use instead of the default error messages provided by Goravel. You may pass the custom messages as the third argument to the <code>Make</code> method (also applicable to <code>ctx.Request().Validate()</code>):</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;The :attribute field is required.&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specifying-a-custom-message-for-a-given-attribute" tabindex="-1"><a class="header-anchor" href="#specifying-a-custom-message-for-a-given-attribute"><span>Specifying A Custom Message For A Given Attribute</span></a></h3><p>Sometimes you may wish to specify a custom error message only for a specific attribute. You may do so using &quot;dot&quot; notation. Specify the attribute&#39;s name first, followed by the rule (also applicable to <code>ctx.Request().Validate()</code>):</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;email.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;We need to know your email address!&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="specifying-custom-attribute-values" tabindex="-1"><a class="header-anchor" href="#specifying-custom-attribute-values"><span>Specifying Custom Attribute Values</span></a></h3><p>Many of Goravel&#39;s built-in error messages include an <code>:attribute</code> placeholder that is replaced with the name of the field or attribute under validation. To customize the values used to replace these placeholders for specific fields, you may pass an array of custom attributes as the third argument to the <code>Make</code> method (also applicable to <code>ctx.Request().Validate()</code>):</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Attributes</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;email address&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="format-data-before-validation" tabindex="-1"><a class="header-anchor" href="#format-data-before-validation"><span>Format Data Before Validation</span></a></h3><p>You can format the data before validating the data for more flexible data validation, and you can pass the method of formatting the data as the third parameter to the <code>Make</code> method (also applicable to <code>ctx.Request().Validate()</code>):</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  validationcontract <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/validation&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span></span>
<span class="line">    validation<span class="token punctuation">.</span><span class="token function">PrepareForValidation</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data validationcontract<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> name<span class="token punctuation">,</span> exist <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-validated-input" tabindex="-1"><a class="header-anchor" href="#working-with-validated-input"><span>Working With Validated Input</span></a></h2><p>After validating incoming request data using form requests or manually created validator instances, you still want to bind the request data to a <code>struct</code>, there are two ways to do this:</p><ol><li>Use the <code>Bind</code> method, this will bind all incoming data, including unvalidated data:</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>The incoming data is automatically bound to the form when you use request for validation:</li></ol><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> storePost requests<span class="token punctuation">.</span>StorePostRequest</span>
<span class="line">errors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>storePost<span class="token punctuation">)</span></span>
<span class="line">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>storePost<span class="token punctuation">.</span>Name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-error-messages" tabindex="-1"><a class="header-anchor" href="#working-with-error-messages"><span>Working With Error Messages</span></a></h2><h3 id="retrieving-one-error-message-for-a-field-random" tabindex="-1"><a class="header-anchor" href="#retrieving-one-error-message-for-a-field-random"><span>Retrieving one Error Message For A Field (Random)</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span></span>
<span class="line">validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">message <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">One</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="retrieving-all-error-messages-for-a-field" tabindex="-1"><a class="header-anchor" href="#retrieving-all-error-messages-for-a-field"><span>Retrieving All Error Messages For A Field</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">messages <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="retrieving-all-error-messages-for-all-fields" tabindex="-1"><a class="header-anchor" href="#retrieving-all-error-messages-for-all-fields"><span>Retrieving All Error Messages For All Fields</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">messages <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="determining-if-error-messages-exist-for-a-field" tabindex="-1"><a class="header-anchor" href="#determining-if-error-messages-exist-for-a-field"><span>Determining If Error Messages Exist For A Field</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">//</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="available-validation-rules" tabindex="-1"><a class="header-anchor" href="#available-validation-rules"><span>Available Validation Rules</span></a></h2><p>Below is a list of all available validation rules and their function:</p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>required</code></td><td>Check value is required and cannot be zero value. For example, field type is <code>bool</code>, the passing value is <code>false</code>, it can not pass the validation.</td></tr><tr><td><code>required_if</code></td><td><code>required_if:anotherfield,value,...</code> The field under validation must be present and not empty if the anotherField field is equal to any value.</td></tr><tr><td><code>required_unless</code></td><td><code>required_unless:anotherfield,value,...</code> The field under validation must be present and not empty unless the anotherField field is equal to any value.</td></tr><tr><td><code>required_with</code></td><td><code>required_with:foo,bar,...</code> The field under validation must be present and not empty only if any of the other specified fields are present.</td></tr><tr><td><code>required_with_all</code></td><td><code>required_with_all:foo,bar,...</code> The field under validation must be present and not empty only if all of the other specified fields are present.</td></tr><tr><td><code>required_without</code></td><td><code>required_without:foo,bar,...</code> The field under validation must be present and not empty only when any of the other specified fields are not present.</td></tr><tr><td><code>required_without_all</code></td><td><code>required_without_all:foo,bar,...</code> The field under validation must be present and not empty only when all of the other specified fields are not present.</td></tr><tr><td><code>int</code></td><td>Check value is <code>intX</code> <code>uintX</code> type, and support size checking. eg: <code>int</code> <code>int:2</code> <code>int:2,12</code>. Notice: <a href="#int">Points for using rules</a></td></tr><tr><td><code>uint</code></td><td>Check value is <code>uint(uintX)</code> type, <code>value &gt;= 0</code></td></tr><tr><td><code>bool</code></td><td>Check value is bool string(<code>true</code>: &quot;1&quot;, &quot;on&quot;, &quot;yes&quot;, &quot;true&quot;, <code>false</code>: &quot;0&quot;, &quot;off&quot;, &quot;no&quot;, &quot;false&quot;).</td></tr><tr><td><code>string</code></td><td>Check value is string type, and support size checking. eg:<code>string</code> <code>string:2</code> <code>string:2,12</code></td></tr><tr><td><code>float</code></td><td>Check value is <code>float(floatX)</code> type</td></tr><tr><td><code>slice</code></td><td>Check value is slice type(<code>[]intX</code> <code>[]uintX</code> <code>[]byte</code> <code>[]string</code>)</td></tr><tr><td><code>in</code></td><td><code>in:foo,bar,…</code> Check if the value is in the given enumeration</td></tr><tr><td><code>not_in</code></td><td><code>not_in:foo,bar,…</code> Check if the value is not in the given enumeration</td></tr><tr><td><code>starts_with</code></td><td><code>starts_with:foo</code> Check if the input string value is starts with the given sub-string</td></tr><tr><td><code>ends_with</code></td><td><code>ends_with:foo</code> Check if the input string value is ends with the given sub-string</td></tr><tr><td><code>between</code></td><td><code>between:min,max</code> Check that the value is a number and is within the given range</td></tr><tr><td><code>max</code></td><td><code>max:value</code> Check value is less than or equal to the given value(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>min</code></td><td><code>min:value</code> Check value is greater than or equal to the given value(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>eq</code></td><td><code>eq:value</code> Check that the input value is equal to the given value</td></tr><tr><td><code>ne</code></td><td><code>ne:value</code> Check that the input value is not equal to the given value</td></tr><tr><td><code>lt</code></td><td><code>lt:value</code> Check value is less than the given value(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>gt</code></td><td><code>gt:value</code> Check value is greater than the given value(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>len</code></td><td><code>len:value</code> Check value length is equals to the given size(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>min_len</code></td><td><code>min_len:value</code> Check the minimum length of the value is the given size(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>max_len</code></td><td><code>max_len:value</code> Check the maximum length of the value is the given size(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>email</code></td><td>Check value is email address string</td></tr><tr><td><code>array</code></td><td>Check value is array, slice type</td></tr><tr><td><code>map</code></td><td>Check value is a MAP type</td></tr><tr><td><code>eq_field</code></td><td><code>eq_field:field</code> Check that the field value is equals to the value of another field</td></tr><tr><td><code>ne_field</code></td><td><code>ne_field:field</code> Check that the field value is not equals to the value of another field</td></tr><tr><td><code>gt_field</code></td><td><code>gt_field:field</code> Check that the field value is greater than the value of another field</td></tr><tr><td><code>gte_field</code></td><td><code>gte_field:field</code> Check that the field value is greater than or equal to the value of another field</td></tr><tr><td><code>lt_field</code></td><td><code>lt_field:field</code> Check that the field value is less than the value of another field</td></tr><tr><td><code>lte_field</code></td><td><code>lte_field:field</code> Check if the field value is less than or equal to the value of another field</td></tr><tr><td><code>file</code></td><td>Verify if it is an uploaded file</td></tr><tr><td><code>image</code></td><td>Check if it is an uploaded image file and support suffix check</td></tr><tr><td><code>date</code></td><td>Check the field value is date string</td></tr><tr><td><code>gt_date</code></td><td><code>gt_date:value</code> Check that the input value is greater than the given date string</td></tr><tr><td><code>lt_date</code></td><td><code>lt_date:value</code> Check that the input value is less than the given date string</td></tr><tr><td><code>gte_date</code></td><td><code>gte_date:value</code> Check that the input value is greater than or equal to the given date string</td></tr><tr><td><code>lte_date</code></td><td><code>lte_date:value</code> Check that the input value is less than or equal to the given date string</td></tr><tr><td><code>alpha</code></td><td>Verify that the value contains only alphabetic characters</td></tr><tr><td><code>alpha_num</code></td><td>Check that only letters, numbers are included</td></tr><tr><td><code>alpha_dash</code></td><td>Check to include only letters, numbers, dashes ( - ), and underscores ( _ )</td></tr><tr><td><code>json</code></td><td>Check value is JSON string</td></tr><tr><td><code>number</code></td><td>Check value is number string <code>&gt;= 0</code></td></tr><tr><td><code>full_url</code></td><td>Check value is full URL string(must start with http,https)</td></tr><tr><td><code>ip</code></td><td>Check value is IP(v4 or v6) string</td></tr><tr><td><code>ipv4</code></td><td>Check value is IPv4 string</td></tr><tr><td><code>ipv6</code></td><td>Check value is IPv6 string</td></tr><tr><td><code>regex</code></td><td>Check if the value can pass the regular verification</td></tr></tbody></table><h3 id="points-for-using-rules" tabindex="-1"><a class="header-anchor" href="#points-for-using-rules"><span>Points For Using Rules</span></a></h3><h4 id="int" tabindex="-1"><a class="header-anchor" href="#int"><span>int</span></a></h4><p>When using <code>ctx.Request().Validate(rules)</code> for validation, the incoming <code>int</code> type data will be parsed by <code>json.Unmarshal</code> into <code>float64</code> type, which will cause the int rule validation to fail.</p><p><strong>Solutions</strong></p><p>Option 1: Add <a href="#Format-Data-Before-Validation"><code>validation.PrepareForValidation</code></a>, format the data before validating the data;</p><p>Option 2: Use <code>facades.Validation().Make()</code> for rule validation;</p><h2 id="custom-validation-rules" tabindex="-1"><a class="header-anchor" href="#custom-validation-rules"><span>Custom Validation Rules</span></a></h2><p>Goravel provides a variety of helpful validation rules; however, you may wish to specify some of your own. One method of registering custom validation rules is using rule objects. To generate a new rule object, you can simply use the <code>make:rule</code> Artisan command.</p><p>For instance, if you want to verify that a string is uppercase, you can create a rule with this command. Goravel will then save this new rule in the <code>app/rules</code> directory. If this directory does not exist, Goravel will create it when you run the Artisan command to create your rule.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>rule Uppercase</span>
<span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>rule user<span class="token operator">/</span>Uppercase</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>After creating the rule, we need to define its behavior. A rule object has two methods: <code>Passes</code> and <code>Message</code>. The Passes method receives all data, including the data to be validated and the validation parameters. It should return <code>true</code> or <code>false</code> depending on whether the attribute value is valid. The <code>Message</code> method should return the error message for validation that should be used when the validation fails.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> rules</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;strings&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Uppercase <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Signature The name of the rule.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;uppercase&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Passes Determine if the validation rule passes.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Passes</span><span class="token punctuation">(</span>data validation<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> val any<span class="token punctuation">,</span> options <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Message Get the validation error message.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;The :attribute must be uppercase.&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you need to register the rule to the <code>rules</code> method in the <code>app/providers/validation_service_provider.go</code> file, and the rule can be used like other rules:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> providers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;goravel/app/rules&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> ValidationServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRules</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;add rules error: %+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Rule <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Rule<span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&amp;</span>rules<span class="token punctuation">.</span>Uppercase<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="available-validation-filters" tabindex="-1"><a class="header-anchor" href="#available-validation-filters"><span>Available Validation Filters</span></a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>int/toInt</code></td><td>Convert value(string/intX/floatX) to <code>int</code> type <code>v.FilterRule(&quot;id&quot;, &quot;int&quot;)</code></td></tr><tr><td><code>uint/toUint</code></td><td>Convert value(string/intX/floatX) to <code>uint</code> type <code>v.FilterRule(&quot;id&quot;, &quot;uint&quot;)</code></td></tr><tr><td><code>int64/toInt64</code></td><td>Convert value(string/intX/floatX) to <code>int64</code> type <code>v.FilterRule(&quot;id&quot;, &quot;int64&quot;)</code></td></tr><tr><td><code>float/toFloat</code></td><td>Convert value(string/intX/floatX) to <code>float</code> type</td></tr><tr><td><code>bool/toBool</code></td><td>Convert string value to bool. (<code>true</code>: &quot;1&quot;, &quot;on&quot;, &quot;yes&quot;, &quot;true&quot;, <code>false</code>: &quot;0&quot;, &quot;off&quot;, &quot;no&quot;, &quot;false&quot;)</td></tr><tr><td><code>trim/trimSpace</code></td><td>Clean up whitespace characters on both sides of the string</td></tr><tr><td><code>ltrim/trimLeft</code></td><td>Clean up whitespace characters on left sides of the string</td></tr><tr><td><code>rtrim/trimRight</code></td><td>Clean up whitespace characters on right sides of the string</td></tr><tr><td><code>int/integer</code></td><td>Convert value(string/intX/floatX) to <code>int</code> type <code>v.FilterRule(&quot;id&quot;, &quot;int&quot;)</code></td></tr><tr><td><code>lower/lowercase</code></td><td>Convert string to lowercase</td></tr><tr><td><code>upper/uppercase</code></td><td>Convert string to uppercase</td></tr><tr><td><code>lcFirst/lowerFirst</code></td><td>Convert the first character of a string to lowercase</td></tr><tr><td><code>ucFirst/upperFirst</code></td><td>Convert the first character of a string to uppercase</td></tr><tr><td><code>ucWord/upperWord</code></td><td>Convert the first character of each word to uppercase</td></tr><tr><td><code>camel/camelCase</code></td><td>Convert string to camel naming style</td></tr><tr><td><code>snake/snakeCase</code></td><td>Convert string to snake naming style</td></tr><tr><td><code>escapeJs/escapeJS</code></td><td>Escape JS string.</td></tr><tr><td><code>escapeHtml/escapeHTML</code></td><td>Escape HTML string.</td></tr><tr><td><code>str2ints/strToInts</code></td><td>Convert string to int slice <code>[]int</code></td></tr><tr><td><code>str2time/strToTime</code></td><td>Convert date string to <code>time.Time</code>.</td></tr><tr><td><code>str2arr/str2array/strToArray</code></td><td>Convert string to string slice <code>[]string</code></td></tr></tbody></table><h2 id="custom-filter" tabindex="-1"><a class="header-anchor" href="#custom-filter"><span>Custom filter</span></a></h2><p>Goravel provides a variety of helpful filters, however, you may wish to specify some of your own. To generate a new rule object, you can simply use the <code>make:filter</code> Artisan command. Let&#39;s use this command to generate a rule that converts a string to an integer. This rule is already built into the framework, we just create it as an example. Goravel will save this new filter in the <code>app/filters</code> directory. If this directory does not exist, Goravel will create it when you run the Artisan command to create the rule:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>filter ToInt</span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>filter user<span class="token operator">/</span>ToInt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One filter contains two methods: <code>Signature</code> and <code>Handle</code>. The <code>Signature</code> method sets the name of the filter. The <code>Handle</code> method performs the specific filtering logic:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> filters</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;strings&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;github.com/spf13/cast&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> ToInt <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Signature The signature of the filter.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ToInt<span class="token punctuation">)</span> <span class="token function">Signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token string">&quot;ToInt&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Handle defines the filter function to apply.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ToInt<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> any <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>val any<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> cast<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you need to register the filter to the <code>filters</code> method in the <code>app/providers/validation_service_provider.go</code> file, and the filter can be used like others:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> providers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;goravel/app/filters&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> ValidationServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddFilters</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;add filters error: %+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">filters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Filter <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Filter<span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">&amp;</span>filters<span class="token punctuation">.</span>ToInt<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,71)),t(c)])}const b=u(k,[["render",m],["__file","validation.html.vue"]]),f=JSON.parse(`{"path":"/the-basics/validation.html","title":"Validation","lang":"en-US","frontmatter":{"description":"Validation Introduction Goravel provides several different approaches to validate your application's incoming data. It is most common to use the Validate method available on all...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/the-basics/validation.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/the-basics/validation.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/the-basics/validation.html"}],["meta",{"property":"og:description","content":"Validation Introduction Goravel provides several different approaches to validate your application's incoming data. It is most common to use the Validate method available on all..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Validation\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Validation Quickstart","slug":"validation-quickstart","link":"#validation-quickstart","children":[{"level":3,"title":"Defining The Routes","slug":"defining-the-routes","link":"#defining-the-routes","children":[]},{"level":3,"title":"Creating The Controller","slug":"creating-the-controller","link":"#creating-the-controller","children":[]},{"level":3,"title":"Writing The Validation Logic","slug":"writing-the-validation-logic","link":"#writing-the-validation-logic","children":[]},{"level":3,"title":"Nested Attributes","slug":"nested-attributes","link":"#nested-attributes","children":[]},{"level":3,"title":"Slice Validation","slug":"slice-validation","link":"#slice-validation","children":[]}]},{"level":2,"title":"Form Request Validation","slug":"form-request-validation","link":"#form-request-validation","children":[{"level":3,"title":"Creating Form Requests","slug":"creating-form-requests","link":"#creating-form-requests","children":[]},{"level":3,"title":"Authorizing Form Requests","slug":"authorizing-form-requests","link":"#authorizing-form-requests","children":[]},{"level":3,"title":"Filter Input Data","slug":"filter-input-data","link":"#filter-input-data","children":[]},{"level":3,"title":"Customizing The Error Messages","slug":"customizing-the-error-messages","link":"#customizing-the-error-messages","children":[]},{"level":3,"title":"Customizing The Validation Attributes","slug":"customizing-the-validation-attributes","link":"#customizing-the-validation-attributes","children":[]},{"level":3,"title":"Preparing Input For Validation","slug":"preparing-input-for-validation","link":"#preparing-input-for-validation","children":[]}]},{"level":2,"title":"Manually Creating Validators","slug":"manually-creating-validators","link":"#manually-creating-validators","children":[{"level":3,"title":"Customizing The Error Messages","slug":"customizing-the-error-messages-1","link":"#customizing-the-error-messages-1","children":[]},{"level":3,"title":"Specifying A Custom Message For A Given Attribute","slug":"specifying-a-custom-message-for-a-given-attribute","link":"#specifying-a-custom-message-for-a-given-attribute","children":[]},{"level":3,"title":"Specifying Custom Attribute Values","slug":"specifying-custom-attribute-values","link":"#specifying-custom-attribute-values","children":[]},{"level":3,"title":"Format Data Before Validation","slug":"format-data-before-validation","link":"#format-data-before-validation","children":[]}]},{"level":2,"title":"Working With Validated Input","slug":"working-with-validated-input","link":"#working-with-validated-input","children":[]},{"level":2,"title":"Working With Error Messages","slug":"working-with-error-messages","link":"#working-with-error-messages","children":[{"level":3,"title":"Retrieving one Error Message For A Field (Random)","slug":"retrieving-one-error-message-for-a-field-random","link":"#retrieving-one-error-message-for-a-field-random","children":[]},{"level":3,"title":"Retrieving All Error Messages For A Field","slug":"retrieving-all-error-messages-for-a-field","link":"#retrieving-all-error-messages-for-a-field","children":[]},{"level":3,"title":"Retrieving All Error Messages For All Fields","slug":"retrieving-all-error-messages-for-all-fields","link":"#retrieving-all-error-messages-for-all-fields","children":[]},{"level":3,"title":"Determining If Error Messages Exist For A Field","slug":"determining-if-error-messages-exist-for-a-field","link":"#determining-if-error-messages-exist-for-a-field","children":[]}]},{"level":2,"title":"Available Validation Rules","slug":"available-validation-rules","link":"#available-validation-rules","children":[{"level":3,"title":"Points For Using Rules","slug":"points-for-using-rules","link":"#points-for-using-rules","children":[]}]},{"level":2,"title":"Custom Validation Rules","slug":"custom-validation-rules","link":"#custom-validation-rules","children":[]},{"level":2,"title":"Available Validation Filters","slug":"available-validation-filters","link":"#available-validation-filters","children":[]},{"level":2,"title":"Custom filter","slug":"custom-filter","link":"#custom-filter","children":[]}],"git":{},"filePathRelative":"the-basics/validation.md","autoDesc":true}`);export{b as comp,f as data};
