import{_ as l,c,b as n,e as a,f as e,a as u,r as o,o as r,d as p}from"./app-CkrpkKpR.js";const d={},k={class:"table-of-contents"};function v(m,s){const t=o("router-link"),i=o("CommentService");return r(),c("div",null,[s[53]||(s[53]=n("h1",{id:"http-tests",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#http-tests"},[n("span",null,"HTTP Tests")])],-1)),n("nav",k,[n("ul",null,[n("li",null,[a(t,{to:"#介绍"},{default:e(()=>s[0]||(s[0]=[p("介绍")])),_:1})]),n("li",null,[a(t,{to:"#发起-http-请求"},{default:e(()=>s[1]||(s[1]=[p("发起 HTTP 请求")])),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#自定义请求头"},{default:e(()=>s[2]||(s[2]=[p("自定义请求头")])),_:1})]),n("li",null,[a(t,{to:"#cookies"},{default:e(()=>s[3]||(s[3]=[p("Cookies")])),_:1})]),n("li",null,[a(t,{to:"#withsession"},{default:e(()=>s[4]||(s[4]=[p("WithSession")])),_:1})]),n("li",null,[a(t,{to:"#调试响应"},{default:e(()=>s[5]||(s[5]=[p("调试响应")])),_:1})])])]),n("li",null,[a(t,{to:"#构建请求体"},{default:e(()=>s[6]||(s[6]=[p("构建请求体")])),_:1})]),n("li",null,[a(t,{to:"#测试-json-api"},{default:e(()=>s[7]||(s[7]=[p("测试 JSON API")])),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#断言精确匹配的-json"},{default:e(()=>s[8]||(s[8]=[p("断言精确匹配的 JSON")])),_:1})]),n("li",null,[a(t,{to:"#fluent-json-testing"},{default:e(()=>s[9]||(s[9]=[p("Fluent JSON Testing")])),_:1})]),n("li",null,[a(t,{to:"#断言属性的存在-缺失"},{default:e(()=>s[10]||(s[10]=[p("断言属性的存在/缺失")])),_:1})]),n("li",null,[a(t,{to:"#断言-json-集合"},{default:e(()=>s[11]||(s[11]=[p("断言 JSON 集合")])),_:1})])])]),n("li",null,[a(t,{to:"#可用断言"},{default:e(()=>s[12]||(s[12]=[p("可用断言")])),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#断言响应"},{default:e(()=>s[13]||(s[13]=[p("断言响应")])),_:1})]),n("li",null,[a(t,{to:"#assertaccepted"},{default:e(()=>s[14]||(s[14]=[p("AssertAccepted")])),_:1})]),n("li",null,[a(t,{to:"#assertbadrequest"},{default:e(()=>s[15]||(s[15]=[p("AssertBadRequest")])),_:1})]),n("li",null,[a(t,{to:"#assertconflict"},{default:e(()=>s[16]||(s[16]=[p("AssertConflict")])),_:1})]),n("li",null,[a(t,{to:"#assertcookie"},{default:e(()=>s[17]||(s[17]=[p("AssertCookie")])),_:1})]),n("li",null,[a(t,{to:"#assertcookieexpired"},{default:e(()=>s[18]||(s[18]=[p("AssertCookieExpired")])),_:1})]),n("li",null,[a(t,{to:"#assertcookiemissing"},{default:e(()=>s[19]||(s[19]=[p("AssertCookieMissing")])),_:1})]),n("li",null,[a(t,{to:"#assertcookienotexpired"},{default:e(()=>s[20]||(s[20]=[p("AssertCookieNotExpired")])),_:1})]),n("li",null,[a(t,{to:"#assertcreated"},{default:e(()=>s[21]||(s[21]=[p("AssertCreated")])),_:1})]),n("li",null,[a(t,{to:"#assertdontsee"},{default:e(()=>s[22]||(s[22]=[p("AssertDontSee")])),_:1})]),n("li",null,[a(t,{to:"#assertexactjson"},{default:e(()=>s[23]||(s[23]=[p("AssertExactJson")])),_:1})]),n("li",null,[a(t,{to:"#assertfluentjson"},{default:e(()=>s[24]||(s[24]=[p("AssertFluentJson")])),_:1})]),n("li",null,[a(t,{to:"#assertforbidden"},{default:e(()=>s[25]||(s[25]=[p("AssertForbidden")])),_:1})]),n("li",null,[a(t,{to:"#assertfound"},{default:e(()=>s[26]||(s[26]=[p("AssertFound")])),_:1})]),n("li",null,[a(t,{to:"#assertgone"},{default:e(()=>s[27]||(s[27]=[p("AssertGone")])),_:1})]),n("li",null,[a(t,{to:"#assertheader"},{default:e(()=>s[28]||(s[28]=[p("AssertHeader")])),_:1})]),n("li",null,[a(t,{to:"#assertheadermissing"},{default:e(()=>s[29]||(s[29]=[p("AssertHeaderMissing")])),_:1})]),n("li",null,[a(t,{to:"#assertinternalservererror"},{default:e(()=>s[30]||(s[30]=[p("AssertInternalServerError")])),_:1})]),n("li",null,[a(t,{to:"#assertjson"},{default:e(()=>s[31]||(s[31]=[p("AssertJson")])),_:1})]),n("li",null,[a(t,{to:"#assertjsonmissing"},{default:e(()=>s[32]||(s[32]=[p("AssertJsonMissing")])),_:1})]),n("li",null,[a(t,{to:"#assertmethodnotallowed"},{default:e(()=>s[33]||(s[33]=[p("AssertMethodNotAllowed")])),_:1})]),n("li",null,[a(t,{to:"#assertmovedpermanently"},{default:e(()=>s[34]||(s[34]=[p("AssertMovedPermanently")])),_:1})]),n("li",null,[a(t,{to:"#assertnocontent"},{default:e(()=>s[35]||(s[35]=[p("AssertNoContent")])),_:1})]),n("li",null,[a(t,{to:"#assertnotacceptable"},{default:e(()=>s[36]||(s[36]=[p("AssertNotAcceptable")])),_:1})]),n("li",null,[a(t,{to:"#assertnotfound"},{default:e(()=>s[37]||(s[37]=[p("AssertNotFound")])),_:1})]),n("li",null,[a(t,{to:"#assertnotmodified"},{default:e(()=>s[38]||(s[38]=[p("AssertNotModified")])),_:1})]),n("li",null,[a(t,{to:"#assertok"},{default:e(()=>s[39]||(s[39]=[p("AssertOk")])),_:1})]),n("li",null,[a(t,{to:"#assertpartialcontent"},{default:e(()=>s[40]||(s[40]=[p("AssertPartialContent")])),_:1})]),n("li",null,[a(t,{to:"#assertpaymentrequired"},{default:e(()=>s[41]||(s[41]=[p("AssertPaymentRequired")])),_:1})]),n("li",null,[a(t,{to:"#assertrequesttimeout"},{default:e(()=>s[42]||(s[42]=[p("AssertRequestTimeout")])),_:1})]),n("li",null,[a(t,{to:"#assertsee"},{default:e(()=>s[43]||(s[43]=[p("AssertSee")])),_:1})]),n("li",null,[a(t,{to:"#assertseeinorder"},{default:e(()=>s[44]||(s[44]=[p("AssertSeeInOrder")])),_:1})]),n("li",null,[a(t,{to:"#assertservererror"},{default:e(()=>s[45]||(s[45]=[p("AssertServerError")])),_:1})]),n("li",null,[a(t,{to:"#assertserviceunavailable"},{default:e(()=>s[46]||(s[46]=[p("AssertServiceUnavailable")])),_:1})]),n("li",null,[a(t,{to:"#assertstatus"},{default:e(()=>s[47]||(s[47]=[p("AssertStatus")])),_:1})]),n("li",null,[a(t,{to:"#assertsuccessful"},{default:e(()=>s[48]||(s[48]=[p("AssertSuccessful")])),_:1})]),n("li",null,[a(t,{to:"#asserttemporaryredirect"},{default:e(()=>s[49]||(s[49]=[p("AssertTemporaryRedirect")])),_:1})]),n("li",null,[a(t,{to:"#asserttoomanyrequests"},{default:e(()=>s[50]||(s[50]=[p("AssertTooManyRequests")])),_:1})]),n("li",null,[a(t,{to:"#assertunauthorized"},{default:e(()=>s[51]||(s[51]=[p("AssertUnauthorized")])),_:1})]),n("li",null,[a(t,{to:"#assertunprocessableentity"},{default:e(()=>s[52]||(s[52]=[p("AssertUnprocessableEntity")])),_:1})])])])])]),s[54]||(s[54]=u(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在构建Web应用程序时，您通常需要从头到尾测试您的HTTP请求是否正常工作。Goravel的测试工具使这变得简单——您可以模拟请求并验证响应，而无需设置复杂的测试环境。</p><h2 id="发起-http-请求" tabindex="-1"><a class="header-anchor" href="#发起-http-请求"><span>发起 HTTP 请求</span></a></h2><p>测试 Goravel 中的 HTTP 接口使用了一个简单的模式。使用 <code>TestCase</code> 的 <code>Http</code> 方法，它需要一个 <code>*testing.T</code> 参数用于断言。该方法将返回一个实例(<code>framework/contracts/testing.TestRequest</code>)，它处理所有常见的 HTTP 请求，如 <code>Get</code> 、<code>Post</code> 和 <code>Put</code>。</p><p>不需要真正的 HTTP 调用，这些方法在内部模拟了应用程序的请求周期。每个请求都返回一个响应对象(<code>framework/contracts/testing.TestResponse</code>)，其中包含检查结果的方法。</p><p>一个简单的例子：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义请求头" tabindex="-1"><a class="header-anchor" href="#自定义请求头"><span>自定义请求头</span></a></h3><p>你可以使用 <code>WithHeader</code> 设置单个请求头，或者使用 <code>WithHeaders</code> 设置多个请求头：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Single header</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Multiple headers</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeaders</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;Accept&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies"><span>Cookies</span></a></h3><p>你可以使用 <code>WithCookie</code> 或 <code>WithCookies</code> 方法在发起请求前设置 cookie 值。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/testing/http&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithCookie</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// or use WithCookies for multiple Cookies</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithCookies</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;lang&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="withsession" tabindex="-1"><a class="header-anchor" href="#withsession"><span>WithSession</span></a></h3><p>你可以使用 <code>WithSession</code> 方法设置 session 数据：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithSession</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调试响应" tabindex="-1"><a class="header-anchor" href="#调试响应"><span>调试响应</span></a></h3><p>在发起请求后，你可以使用 <code>Session</code>、<code>Headers</code>、<code>Content</code>、<code>Cookies</code> 或 <code>Json</code> 方法来检查从请求返回的数据。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithSession</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	content<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	cookies <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	headers <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	json<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// response body parsed as json(map[string]any)</span></span>
<span class="line">	</span>
<span class="line">	session<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns all values stored in the current request session</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建请求体" tabindex="-1"><a class="header-anchor" href="#构建请求体"><span>构建请求体</span></a></h2><p>如 <code>Post</code>、<code>Put</code>、<code>Delete</code> 等方法。Goravel 接受 <code>io.Reader</code> 作为第二个参数。为了简化构建请求体，框架提供了用于构建请求体的实用方法。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/support/http&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    builder <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetField</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;krishan&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试-json-api" tabindex="-1"><a class="header-anchor" href="#测试-json-api"><span>测试 JSON API</span></a></h2><p>Goravel 提供了多个帮助方法来有效地测试 JSON API 响应。它尝试将响应体解析为 Go <code>map[string]any</code>。如果解析失败，相关的断言也会失败。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">			<span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>TestResponse</code> 的 <code>Json</code> 方法可以直接访问解析后的 JSON，这样你可以检查响应体的各个元素。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">json<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">s<span class="token punctuation">.</span><span class="token function">True</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>AssertJson</code> 方法检查响应是否包含所有指定的值，即使响应包含额外的字段。除非使用 <code>AssertExactJson</code>，否则不需要完全匹配。</p></div><h3 id="断言精确匹配的-json" tabindex="-1"><a class="header-anchor" href="#断言精确匹配的-json"><span>断言精确匹配的 JSON</span></a></h3><p>如果需要验证响应是否完全匹配您的预期 JSON（没有额外或缺少的字段），请使用 <code>AssertExactJson</code> 方法。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertExactJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">			<span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fluent-json-testing" tabindex="-1"><a class="header-anchor" href="#fluent-json-testing"><span>Fluent JSON Testing</span></a></h3><p>Goravel 可以轻松地对 JSON 响应执行流畅的断言。使用 <code>AssertFluentJson</code> 方法，你可以传递一个闭包，该闭包提供了 <code>framework/contracts/testing.AssertableJSON</code> 的实例。这个实例允许你检查请求返回的 JSON 响应中的特定值或条件。</p><p>例如，你可以使用 <code>Where</code> 方法来断言 JSON 响应中是否存在特定值，使用 <code>Missing</code> 方法来确保属性不存在。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> contractstesting <span class="token string">&quot;github.com/goravel/framework/contracts/testing&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>ExampleTestSuite<span class="token punctuation">)</span> <span class="token function">TestIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Http</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/users/1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	s<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">	</span>
<span class="line">	response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bowen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">WhereNot</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">				<span class="token function">Missing</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言属性的存在-缺失" tabindex="-1"><a class="header-anchor" href="#断言属性的存在-缺失"><span>断言属性的存在/缺失</span></a></h3><p>如果你想检查属性是否存在或缺失，可以使用 <code>Has</code> 和 <code>Missing</code> 方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">Missing</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以一次性断言多个属性的存在或缺失，使用 <code>HasAll</code> 和 <code>MissingAll</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">MissingAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;verified&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你只需要检查列表中至少一个属性的存在，请使用 <code>HasAny</code> 方法：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span> <span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		json<span class="token punctuation">.</span><span class="token function">HasAny</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断言-json-集合" tabindex="-1"><a class="header-anchor" href="#断言-json-集合"><span>断言 JSON 集合</span></a></h3><p>当响应包含一个对象集合时，可以使用各种方法来断言其结构和内容。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ID <span class="token builtin">int</span> <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">    items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Item<span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span>ID<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token string">&quot;items&quot;</span><span class="token punctuation">:</span> items<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>Count</code> 方法验证集合中元素的数量。要断言第一个元素的属性，请使用 <code>First</code> 方法，该方法提供了一个 <code>AssertableJson</code> 实例。同样，使用 <code>Each</code> 方法可以遍历所有元素并逐个断言其属性。另外，<code>HasWithScope</code> 方法结合了 <code>First</code> 和 <code>Count</code> 的功能，允许你断言第一个元素及其内容，同时为范围断言提供一个 <code>AssertableJson</code> 实例。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Count and First</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">First</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Each</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">            <span class="token function">Each</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                json<span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// HasWithScope</span></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">HasWithScope</span><span class="token punctuation">(</span><span class="token string">&quot;items&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可用断言" tabindex="-1"><a class="header-anchor" href="#可用断言"><span>可用断言</span></a></h2><h3 id="断言响应" tabindex="-1"><a class="header-anchor" href="#断言响应"><span>断言响应</span></a></h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="#assertaccepted">AssertAccepted</a></td><td><a href="#assertbadrequest">AssertBadRequest</a></td><td><a href="#assertconflict">AssertConflict</a></td></tr><tr><td><a href="#assertcookie">AssertCookie</a></td><td><a href="#assertcookieexpired">AssertCookieExpired</a></td><td><a href="#assertcookiemissing">AssertCookieMissing</a></td></tr><tr><td><a href="#assertcookienotexpired">AssertCookieNotExpired</a></td><td><a href="#assertcreated">AssertCreated</a></td><td><a href="#assertdontsee">AssertDontSee</a></td></tr><tr><td><a href="#assertexactjson">AssertExactJson</a></td><td><a href="#assertfluentjson">AssertFluentJson</a></td><td><a href="#assertforbidden">AssertForbidden</a></td></tr><tr><td><a href="#assertfound">AssertFound</a></td><td><a href="#assertgone">AssertGone</a></td><td><a href="#assertheader">AssertHeader</a></td></tr><tr><td><a href="#assertheadermissing">AssertHeaderMissing</a></td><td><a href="#assertinternalservererror">AssertInternalServerError</a></td><td><a href="#assertjson">AssertJson</a></td></tr><tr><td><a href="#assertjsonmissing">AssertJsonMissing</a></td><td><a href="#assertmethodnotallowed">AssertMethodNotAllowed</a></td><td><a href="#assertmovedpermanently">AssertMovedPermanently</a></td></tr><tr><td><a href="#assertnocontent">AssertNoContent</a></td><td><a href="#assertnotacceptable">AssertNotAcceptable</a></td><td><a href="#assertnotfound">AssertNotFound</a></td></tr><tr><td><a href="#assertnotmodified">AssertNotModified</a></td><td><a href="#assertok">AssertOk</a></td><td><a href="#assertpartialcontent">AssertPartialContent</a></td></tr><tr><td><a href="#assertpaymentrequired">AssertPaymentRequired</a></td><td><a href="#assertrequesttimeout">AssertRequestTimeout</a></td><td><a href="#assertsee">AssertSee</a></td></tr><tr><td><a href="#assertseeinorder">AssertSeeInOrder</a></td><td><a href="#assertservererror">AssertServerError</a></td><td><a href="#assertserviceunavailable">AssertServiceUnavailable</a></td></tr><tr><td><a href="#assertstatus">AssertStatus</a></td><td><a href="#assertsuccessful">AssertSuccessful</a></td><td><a href="#asserttemporaryredirect">AssertTemporaryRedirect</a></td></tr><tr><td><a href="#asserttoomanyrequests">AssertTooManyRequests</a></td><td><a href="#assertunauthorized">AssertUnauthorized</a></td><td><a href="#assertunprocessableentity">AssertUnprocessableEntity</a></td></tr></tbody></table><h3 id="assertaccepted" tabindex="-1"><a class="header-anchor" href="#assertaccepted"><span>AssertAccepted</span></a></h3><p>断言响应的 HTTP 状态码为 <code>202 Accepted</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertAccepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertbadrequest" tabindex="-1"><a class="header-anchor" href="#assertbadrequest"><span>AssertBadRequest</span></a></h3><p>断言响应的 HTTP 状态码为 <code>400 Bad Request</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertconflict" tabindex="-1"><a class="header-anchor" href="#assertconflict"><span>AssertConflict</span></a></h3><p>断言响应的 HTTP 状态码为 <code>409 Conflict</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookie" tabindex="-1"><a class="header-anchor" href="#assertcookie"><span>AssertCookie</span></a></h3><p>断言响应包含指定名称和值的 cookie：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookieexpired" tabindex="-1"><a class="header-anchor" href="#assertcookieexpired"><span>AssertCookieExpired</span></a></h3><p>断言指定的 cookie 已过期：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieExpired</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookiemissing" tabindex="-1"><a class="header-anchor" href="#assertcookiemissing"><span>AssertCookieMissing</span></a></h3><p>断言响应不包含指定名称的 cookie：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieMissing</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcookienotexpired" tabindex="-1"><a class="header-anchor" href="#assertcookienotexpired"><span>AssertCookieNotExpired</span></a></h3><p>断言指定的 cookie 未过期：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCookieNotExpired</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertcreated" tabindex="-1"><a class="header-anchor" href="#assertcreated"><span>AssertCreated</span></a></h3><p>断言响应的 HTTP 状态码为 <code>201 Created</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertdontsee" tabindex="-1"><a class="header-anchor" href="#assertdontsee"><span>AssertDontSee</span></a></h3><p>断言响应不包含指定的值。第二个参数（可选）确定在检查之前是否转义值中的特殊字符。如果未提供，则默认为 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertDontSee</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&lt;div&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertexactjson" tabindex="-1"><a class="header-anchor" href="#assertexactjson"><span>AssertExactJson</span></a></h3><p>断言响应的 JSON 与提供的 <code>map[string]any</code> 完全匹配：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertExactJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertfluentjson" tabindex="-1"><a class="header-anchor" href="#assertfluentjson"><span>AssertFluentJson</span></a></h3><p>使用 JSON 流畅接口进行断言：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> contractstesting <span class="token string">&quot;github.com/goravel/framework/contracts/testing&quot;</span></span>
<span class="line"></span>
<span class="line">response<span class="token punctuation">.</span><span class="token function">AssertFluentJson</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>json contractstesting<span class="token punctuation">.</span>AssertableJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     json<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="assertforbidden" tabindex="-1"><a class="header-anchor" href="#assertforbidden"><span>AssertForbidden</span></a></h3><p>断言响应的 HTTP 状态码为 <code>403 Forbidden</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertForbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertfound" tabindex="-1"><a class="header-anchor" href="#assertfound"><span>AssertFound</span></a></h3><p>断言响应的 HTTP 状态码为 <code>302 Found</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertgone" tabindex="-1"><a class="header-anchor" href="#assertgone"><span>AssertGone</span></a></h3><p>断言响应的 HTTP 状态码为 <code>410 Gone</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertGone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertheader" tabindex="-1"><a class="header-anchor" href="#assertheader"><span>AssertHeader</span></a></h3><p>断言响应包含指定名称和值的 header：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertheadermissing" tabindex="-1"><a class="header-anchor" href="#assertheadermissing"><span>AssertHeaderMissing</span></a></h3><p>断言响应不包含指定名称的 header：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertHeaderMissing</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertinternalservererror" tabindex="-1"><a class="header-anchor" href="#assertinternalservererror"><span>AssertInternalServerError</span></a></h3><p>断言响应的 HTTP 状态码为 <code>500 Internal Server Error</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertInternalServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertjson" tabindex="-1"><a class="header-anchor" href="#assertjson"><span>AssertJson</span></a></h3><p>断言响应的 JSON 包含提供的片段：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertJson</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertjsonmissing" tabindex="-1"><a class="header-anchor" href="#assertjsonmissing"><span>AssertJsonMissing</span></a></h3><p>断言响应的 JSON 不包含指定的键或值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertJsonMissing</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertmethodnotallowed" tabindex="-1"><a class="header-anchor" href="#assertmethodnotallowed"><span>AssertMethodNotAllowed</span></a></h3><p>断言响应的 HTTP 状态码为 <code>405 Method Not Allowed</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertMethodNotAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertmovedpermanently" tabindex="-1"><a class="header-anchor" href="#assertmovedpermanently"><span>AssertMovedPermanently</span></a></h3><p>断言响应的 HTTP 状态码为 <code>301 Moved Permanently</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertMovedPermanently</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnocontent" tabindex="-1"><a class="header-anchor" href="#assertnocontent"><span>AssertNoContent</span></a></h3><p>断言响应的 HTTP 状态码为 <code>204 No Content</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNoContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotacceptable" tabindex="-1"><a class="header-anchor" href="#assertnotacceptable"><span>AssertNotAcceptable</span></a></h3><p>断言响应的 HTTP 状态码为 <code>406 Not Acceptable</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotfound" tabindex="-1"><a class="header-anchor" href="#assertnotfound"><span>AssertNotFound</span></a></h3><p>断言响应的 HTTP 状态码为 <code>404 Not Found</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertnotmodified" tabindex="-1"><a class="header-anchor" href="#assertnotmodified"><span>AssertNotModified</span></a></h3><p>断言响应的 HTTP 状态码为 <code>304 Not Modified</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertNotModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertok" tabindex="-1"><a class="header-anchor" href="#assertok"><span>AssertOk</span></a></h3><p>断言响应的 HTTP 状态码为 <code>200 OK</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertpartialcontent" tabindex="-1"><a class="header-anchor" href="#assertpartialcontent"><span>AssertPartialContent</span></a></h3><p>断言响应的 HTTP 状态码为 <code>206 Partial Content</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertPartialContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertpaymentrequired" tabindex="-1"><a class="header-anchor" href="#assertpaymentrequired"><span>AssertPaymentRequired</span></a></h3><p>断言响应的 HTTP 状态码为 <code>402 Payment Required</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertPaymentRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertrequesttimeout" tabindex="-1"><a class="header-anchor" href="#assertrequesttimeout"><span>AssertRequestTimeout</span></a></h3><p>断言响应的 HTTP 状态码为 <code>408 Request Timeout</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertRequestTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertsee" tabindex="-1"><a class="header-anchor" href="#assertsee"><span>AssertSee</span></a></h3><p>断言响应包含指定的值。第二个参数（可选）确定在检查之前是否转义值中的特殊字符。如果未提供，则默认为 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSee</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&lt;div&gt;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertseeinorder" tabindex="-1"><a class="header-anchor" href="#assertseeinorder"><span>AssertSeeInOrder</span></a></h3><p>断言响应按给定顺序包含指定的值。第二个参数（可选）确定在检查之前是否转义值中的特殊字符。如果未提供，则默认为 <code>true</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSeeInOrder</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;First&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Second&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">// Do not escape special characters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertservererror" tabindex="-1"><a class="header-anchor" href="#assertservererror"><span>AssertServerError</span></a></h3><p>断言响应的 HTTP 状态码为 <code>&gt;= 500 , &lt; 600</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertServerError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertserviceunavailable" tabindex="-1"><a class="header-anchor" href="#assertserviceunavailable"><span>AssertServiceUnavailable</span></a></h3><p>断言响应的 HTTP 状态码为 <code>503 Service Unavailable</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertServiceUnavailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertstatus" tabindex="-1"><a class="header-anchor" href="#assertstatus"><span>AssertStatus</span></a></h3><p>断言响应的 HTTP 状态码为指定的值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertsuccessful" tabindex="-1"><a class="header-anchor" href="#assertsuccessful"><span>AssertSuccessful</span></a></h3><p>断言响应的 HTTP 状态码为成功的状态码（2xx）：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="asserttemporaryredirect" tabindex="-1"><a class="header-anchor" href="#asserttemporaryredirect"><span>AssertTemporaryRedirect</span></a></h3><p>断言响应的 HTTP 状态码为 <code>307 Temporary Redirect</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertTemporaryRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="asserttoomanyrequests" tabindex="-1"><a class="header-anchor" href="#asserttoomanyrequests"><span>AssertTooManyRequests</span></a></h3><p>断言响应的 HTTP 状态码为 <code>429 Too Many Requests</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertTooManyRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertunauthorized" tabindex="-1"><a class="header-anchor" href="#assertunauthorized"><span>AssertUnauthorized</span></a></h3><p>断言响应的 HTTP 状态码为 <code>401 Unauthorized</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertUnauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="assertunprocessableentity" tabindex="-1"><a class="header-anchor" href="#assertunprocessableentity"><span>AssertUnprocessableEntity</span></a></h3><p>断言响应的 HTTP 状态码为 <code>422 Unprocessable Entity</code>：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response<span class="token punctuation">.</span><span class="token function">AssertUnprocessableEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,167)),a(i)])}const h=l(d,[["render",v],["__file","http-tests.html.vue"]]),b=JSON.parse('{"path":"/zh/testing/http-tests.html","title":"HTTP Tests","lang":"zh-CN","frontmatter":{"description":"HTTP Tests 介绍 在构建Web应用程序时，您通常需要从头到尾测试您的HTTP请求是否正常工作。Goravel的测试工具使这变得简单——您可以模拟请求并验证响应，而无需设置复杂的测试环境。 发起 HTTP 请求 测试 Goravel 中的 HTTP 接口使用了一个简单的模式。使用 TestCase 的 Http 方法，它需要一个 *testin...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/testing/http-tests.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/testing/http-tests.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/testing/http-tests.html"}],["meta",{"property":"og:description","content":"HTTP Tests 介绍 在构建Web应用程序时，您通常需要从头到尾测试您的HTTP请求是否正常工作。Goravel的测试工具使这变得简单——您可以模拟请求并验证响应，而无需设置复杂的测试环境。 发起 HTTP 请求 测试 Goravel 中的 HTTP 接口使用了一个简单的模式。使用 TestCase 的 Http 方法，它需要一个 *testin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP Tests\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"发起 HTTP 请求","slug":"发起-http-请求","link":"#发起-http-请求","children":[{"level":3,"title":"自定义请求头","slug":"自定义请求头","link":"#自定义请求头","children":[]},{"level":3,"title":"Cookies","slug":"cookies","link":"#cookies","children":[]},{"level":3,"title":"WithSession","slug":"withsession","link":"#withsession","children":[]},{"level":3,"title":"调试响应","slug":"调试响应","link":"#调试响应","children":[]}]},{"level":2,"title":"构建请求体","slug":"构建请求体","link":"#构建请求体","children":[]},{"level":2,"title":"测试 JSON API","slug":"测试-json-api","link":"#测试-json-api","children":[{"level":3,"title":"断言精确匹配的 JSON","slug":"断言精确匹配的-json","link":"#断言精确匹配的-json","children":[]},{"level":3,"title":"Fluent JSON Testing","slug":"fluent-json-testing","link":"#fluent-json-testing","children":[]},{"level":3,"title":"断言属性的存在/缺失","slug":"断言属性的存在-缺失","link":"#断言属性的存在-缺失","children":[]},{"level":3,"title":"断言 JSON 集合","slug":"断言-json-集合","link":"#断言-json-集合","children":[]}]},{"level":2,"title":"可用断言","slug":"可用断言","link":"#可用断言","children":[{"level":3,"title":"断言响应","slug":"断言响应","link":"#断言响应","children":[]},{"level":3,"title":"AssertAccepted","slug":"assertaccepted","link":"#assertaccepted","children":[]},{"level":3,"title":"AssertBadRequest","slug":"assertbadrequest","link":"#assertbadrequest","children":[]},{"level":3,"title":"AssertConflict","slug":"assertconflict","link":"#assertconflict","children":[]},{"level":3,"title":"AssertCookie","slug":"assertcookie","link":"#assertcookie","children":[]},{"level":3,"title":"AssertCookieExpired","slug":"assertcookieexpired","link":"#assertcookieexpired","children":[]},{"level":3,"title":"AssertCookieMissing","slug":"assertcookiemissing","link":"#assertcookiemissing","children":[]},{"level":3,"title":"AssertCookieNotExpired","slug":"assertcookienotexpired","link":"#assertcookienotexpired","children":[]},{"level":3,"title":"AssertCreated","slug":"assertcreated","link":"#assertcreated","children":[]},{"level":3,"title":"AssertDontSee","slug":"assertdontsee","link":"#assertdontsee","children":[]},{"level":3,"title":"AssertExactJson","slug":"assertexactjson","link":"#assertexactjson","children":[]},{"level":3,"title":"AssertFluentJson","slug":"assertfluentjson","link":"#assertfluentjson","children":[]},{"level":3,"title":"AssertForbidden","slug":"assertforbidden","link":"#assertforbidden","children":[]},{"level":3,"title":"AssertFound","slug":"assertfound","link":"#assertfound","children":[]},{"level":3,"title":"AssertGone","slug":"assertgone","link":"#assertgone","children":[]},{"level":3,"title":"AssertHeader","slug":"assertheader","link":"#assertheader","children":[]},{"level":3,"title":"AssertHeaderMissing","slug":"assertheadermissing","link":"#assertheadermissing","children":[]},{"level":3,"title":"AssertInternalServerError","slug":"assertinternalservererror","link":"#assertinternalservererror","children":[]},{"level":3,"title":"AssertJson","slug":"assertjson","link":"#assertjson","children":[]},{"level":3,"title":"AssertJsonMissing","slug":"assertjsonmissing","link":"#assertjsonmissing","children":[]},{"level":3,"title":"AssertMethodNotAllowed","slug":"assertmethodnotallowed","link":"#assertmethodnotallowed","children":[]},{"level":3,"title":"AssertMovedPermanently","slug":"assertmovedpermanently","link":"#assertmovedpermanently","children":[]},{"level":3,"title":"AssertNoContent","slug":"assertnocontent","link":"#assertnocontent","children":[]},{"level":3,"title":"AssertNotAcceptable","slug":"assertnotacceptable","link":"#assertnotacceptable","children":[]},{"level":3,"title":"AssertNotFound","slug":"assertnotfound","link":"#assertnotfound","children":[]},{"level":3,"title":"AssertNotModified","slug":"assertnotmodified","link":"#assertnotmodified","children":[]},{"level":3,"title":"AssertOk","slug":"assertok","link":"#assertok","children":[]},{"level":3,"title":"AssertPartialContent","slug":"assertpartialcontent","link":"#assertpartialcontent","children":[]},{"level":3,"title":"AssertPaymentRequired","slug":"assertpaymentrequired","link":"#assertpaymentrequired","children":[]},{"level":3,"title":"AssertRequestTimeout","slug":"assertrequesttimeout","link":"#assertrequesttimeout","children":[]},{"level":3,"title":"AssertSee","slug":"assertsee","link":"#assertsee","children":[]},{"level":3,"title":"AssertSeeInOrder","slug":"assertseeinorder","link":"#assertseeinorder","children":[]},{"level":3,"title":"AssertServerError","slug":"assertservererror","link":"#assertservererror","children":[]},{"level":3,"title":"AssertServiceUnavailable","slug":"assertserviceunavailable","link":"#assertserviceunavailable","children":[]},{"level":3,"title":"AssertStatus","slug":"assertstatus","link":"#assertstatus","children":[]},{"level":3,"title":"AssertSuccessful","slug":"assertsuccessful","link":"#assertsuccessful","children":[]},{"level":3,"title":"AssertTemporaryRedirect","slug":"asserttemporaryredirect","link":"#asserttemporaryredirect","children":[]},{"level":3,"title":"AssertTooManyRequests","slug":"asserttoomanyrequests","link":"#asserttoomanyrequests","children":[]},{"level":3,"title":"AssertUnauthorized","slug":"assertunauthorized","link":"#assertunauthorized","children":[]},{"level":3,"title":"AssertUnprocessableEntity","slug":"assertunprocessableentity","link":"#assertunprocessableentity","children":[]}]}],"git":{},"filePathRelative":"zh/testing/http-tests.md","autoDesc":true}');export{h as comp,b as data};
