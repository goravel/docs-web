import{_ as o,r as l,o as d,c as r,a,b as e,w as n,e as c,d as t}from"./app-BW_UUwWJ.js";const p={},u=a("h1",{id:"数据库迁移",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据库迁移"},[a("span",null,"数据库迁移")])],-1),m={class:"table-of-contents"},h=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>当多人协作开发应用程序时，如果同步数据库结构没有一个统一的规范，以保证所有人的本地数据都是一致的，那将是灾难。数据库迁移就是为了解决这个问题，将数据库的结构进行版本控制，以保证所有开发人员的数据库结构的一致性。</p><h2 id="生成迁移" tabindex="-1"><a class="header-anchor" href="#生成迁移"><span>生成迁移</span></a></h2><p>使用 <code>make:migration</code> 命令来创建迁移：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan make:migration create_users_table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会在 <code>database/migrations</code> 目录下生成迁移文件，所有迁移文件都以一个时间戳为开头，Goravel 将以此作为迁移文件的执行顺序。所有的迁移文件都是 <code>.sql</code> 文件，你可以使用 SQL 语句自定义表结构。</p><p>迁移命令会同时生成两个迁移文件：<code>***.up.sql</code>、<code>***.down.sql</code>，分别对应执行、回滚。</p><h2 id="执行迁移" tabindex="-1"><a class="header-anchor" href="#执行迁移"><span>执行迁移</span></a></h2><p>执行 Artisan 命令 <code>migrate</code>，来运行所有未执行过的迁移：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想查看目前的迁移状态，可以使用 <code>migrate:status</code> Artisan 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="回滚迁移" tabindex="-1"><a class="header-anchor" href="#回滚迁移"><span>回滚迁移</span></a></h2><p>如果要回滚最后一次迁移操作，可以使用 Artisan 命令 <code>rollback</code>。该命令会回滚最后「一批」的迁移，这可能包含多个迁移文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:rollback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过向 <code>rollback</code> 命令加上 <code>step</code> 参数，可以回滚指定数量的迁移。例如，以下命令将回滚最后五个迁移：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:rollback <span class="token parameter variable">--step</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令 <code>migrate:reset</code> 会回滚应用已运行过的所有迁移：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用单个命令同时进行回滚和迁移操作" tabindex="-1"><a class="header-anchor" href="#使用单个命令同时进行回滚和迁移操作"><span>使用单个命令同时进行回滚和迁移操作</span></a></h3><p>命令 <code>migrate:refresh</code> 首先会回滚已运行过的所有迁移，随后会执行 <code>migrate</code>。这一命令可以高效地重建你的整个数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:refresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过在命令 <code>refresh</code> 中使用 <code>step</code> 参数，你可以回滚并重新执行指定数量的迁移操作。例如，下列命令会回滚并重新执行最后五个迁移操作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:refresh <span class="token parameter variable">--step</span><span class="token operator">=</span><span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除所有表然后执行迁移" tabindex="-1"><a class="header-anchor" href="#删除所有表然后执行迁移"><span>删除所有表然后执行迁移</span></a></h3><p>命令 <code>migrate:fresh</code> 会删去数据库中的所有表，随后执行命令 <code>migrate</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan migrate:fresh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快捷生成" tabindex="-1"><a class="header-anchor" href="#快捷生成"><span>快捷生成</span></a></h2><p>使用 <code>create_users_table</code> 将会自动生成包含 <code>users</code> 基础结构的表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>
  id <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  created_at <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  updated_at <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> idx_users_created_at <span class="token punctuation">(</span>created_at<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> idx_users_updated_at <span class="token punctuation">(</span>updated_at<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> DummyDatabaseCharset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现原理是根据正则进行匹配：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>^create_(\\w+)_table$
^create_(\\w+)$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>add_avatar_to_users_table</code> 将会自动生成向 <code>users</code> 表增加字段的结构：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> users <span class="token keyword">ADD</span> <span class="token keyword">column</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- ALTER TABLE users ADD \`avatar\` varchar(255) NOT NULL DEFAULT &#39;&#39; AFTER \`id\` COMMENT &#39;avatar&#39;;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>实现原理是根据正则进行匹配：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>_(to|from|in)_(\\w+)_table$
_(to|from|in)_(\\w+)$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>未匹配到上述情况时，框架会生成一个空的迁移文件。</p>`,37);function v(k,g){const s=l("router-link"),i=l("CommentService");return d(),r("div",null,[u,a("nav",m,[a("ul",null,[a("li",null,[e(s,{to:"#简介"},{default:n(()=>[t("简介")]),_:1})]),a("li",null,[e(s,{to:"#生成迁移"},{default:n(()=>[t("生成迁移")]),_:1})]),a("li",null,[e(s,{to:"#执行迁移"},{default:n(()=>[t("执行迁移")]),_:1})]),a("li",null,[e(s,{to:"#回滚迁移"},{default:n(()=>[t("回滚迁移")]),_:1}),a("ul",null,[a("li",null,[e(s,{to:"#使用单个命令同时进行回滚和迁移操作"},{default:n(()=>[t("使用单个命令同时进行回滚和迁移操作")]),_:1})]),a("li",null,[e(s,{to:"#删除所有表然后执行迁移"},{default:n(()=>[t("删除所有表然后执行迁移")]),_:1})])])]),a("li",null,[e(s,{to:"#快捷生成"},{default:n(()=>[t("快捷生成")]),_:1})])])]),h,e(i)])}const _=o(p,[["render",v],["__file","migrations.html.vue"]]),x=JSON.parse('{"path":"/zh/orm/migrations.html","title":"数据库迁移","lang":"zh-CN","frontmatter":{"description":"数据库迁移 简介 当多人协作开发应用程序时，如果同步数据库结构没有一个统一的规范，以保证所有人的本地数据都是一致的，那将是灾难。数据库迁移就是为了解决这个问题，将数据库的结构进行版本控制，以保证所有开发人员的数据库结构的一致性。 生成迁移 使用 make:migration 命令来创建迁移： 该命令会在 database/migrations 目录下生...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/orm/migrations.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/orm/migrations.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/migrations.html"}],["meta",{"property":"og:description","content":"数据库迁移 简介 当多人协作开发应用程序时，如果同步数据库结构没有一个统一的规范，以保证所有人的本地数据都是一致的，那将是灾难。数据库迁移就是为了解决这个问题，将数据库的结构进行版本控制，以保证所有开发人员的数据库结构的一致性。 生成迁移 使用 make:migration 命令来创建迁移： 该命令会在 database/migrations 目录下生..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库迁移\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"生成迁移","slug":"生成迁移","link":"#生成迁移","children":[]},{"level":2,"title":"执行迁移","slug":"执行迁移","link":"#执行迁移","children":[]},{"level":2,"title":"回滚迁移","slug":"回滚迁移","link":"#回滚迁移","children":[{"level":3,"title":"使用单个命令同时进行回滚和迁移操作","slug":"使用单个命令同时进行回滚和迁移操作","link":"#使用单个命令同时进行回滚和迁移操作","children":[]},{"level":3,"title":"删除所有表然后执行迁移","slug":"删除所有表然后执行迁移","link":"#删除所有表然后执行迁移","children":[]}]},{"level":2,"title":"快捷生成","slug":"快捷生成","link":"#快捷生成","children":[]}],"git":{},"filePathRelative":"zh/orm/migrations.md","autoDesc":true}');export{_ as comp,x as data};
