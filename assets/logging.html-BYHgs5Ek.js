import{_ as p,r as o,o as i,c as l,a as n,b as a,w as t,e as u,d as e}from"./app-C1EstAlD.js";const r={},d=n("h1",{id:"logging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#logging"},[n("span",null,"Logging")])],-1),k={class:"table-of-contents"},g=u(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>In order to understand the running status of the application, Goravel provides a powerful log service that can record log messages and system errors to a file or other channels through <code>facades.Log()</code>.</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>To configure various log channels, custom configurations can be made in <code>config/logging.go</code>.</p><p><code>Goravel</code> uses <code>stack</code> channel to record logs by default, <code>stack</code> allows logs to be forwarded to multiple channels.</p><p>The <code>print</code> configuration in <code>single</code> and <code>daily</code> drivers can control log output to the console.</p><h2 id="available-channel-drivers" tabindex="-1"><a class="header-anchor" href="#available-channel-drivers"><span>Available channel drivers</span></a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>stack</code></td><td>Allow multiple channels</td></tr><tr><td><code>single</code></td><td>Single log file</td></tr><tr><td><code>daily</code></td><td>One log file per day</td></tr><tr><td><code>custom</code></td><td>Custom drive</td></tr></tbody></table><h3 id="inject-context" tabindex="-1"><a class="header-anchor" href="#inject-context"><span>Inject Context</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="write-log-messages" tabindex="-1"><a class="header-anchor" href="#write-log-messages"><span>Write log messages</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Panicf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="write-to-a-specific-channel" tabindex="-1"><a class="header-anchor" href="#write-to-a-specific-channel"><span>Write to a specific channel</span></a></h3><p>Sometimes, you may want to record messages to a channel other than the application&#39;s default channel:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token string">&quot;single&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you want to write to multiple channels at the same time, you can use the <code>Stack</code> method:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;single&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;slack&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="chain-methods" tabindex="-1"><a class="header-anchor" href="#chain-methods"><span>Chain Methods</span></a></h2><p>Goravel provides convenient chain methods, that make it easy to insert more useful information into the log:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>Method</th><th>Action</th></tr></thead><tbody><tr><td>Code</td><td>Set a code or slug that describes the log.</td></tr><tr><td>Hint</td><td>Set a hint for faster debugging.</td></tr><tr><td>In</td><td>Set the feature category or domain in which the log entry is relevant.</td></tr><tr><td>Owner</td><td>Useful for alerting purposes.</td></tr><tr><td>Request</td><td>Supplies a http.Request.</td></tr><tr><td>Response</td><td>Supplies a http.Response.</td></tr><tr><td>Tags</td><td>Add multiple tags, describing the feature returning an error.</td></tr><tr><td>User</td><td>Set the user associated with the log entry.</td></tr><tr><td>With</td><td>Add key-value pairs to the context of the log entry.</td></tr><tr><td>WithTrace</td><td>Add stack information to the log entry.</td></tr></tbody></table><h2 id="create-a-custom-channel" tabindex="-1"><a class="header-anchor" href="#create-a-custom-channel"><span>Create a custom channel</span></a></h2><p>If you want to define a completely custom channel, you can specify the <code>custom</code> driver type in the <code>config/logging.go</code> configuration file. Then include a <code>via</code> option to implement a <code>framework\\contracts\\log\\Logger</code> structure:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// config/logging.go</span>
<span class="token string">&quot;custom&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
    <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;custom&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;via&quot;</span><span class="token punctuation">:</span>    <span class="token operator">&amp;</span>CustomTest<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="implement-driver" tabindex="-1"><a class="header-anchor" href="#implement-driver"><span>Implement Driver</span></a></h3><p>Implement <code>framework\\contracts\\log\\Logger</code> interface.</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// framework/contracts/log/Logger</span>
<span class="token keyword">package</span> log

<span class="token keyword">type</span> Logger <span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token comment">// Handle pass channel config path here</span>
  <span class="token function">Handle</span><span class="token punctuation">(</span>channel <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Hook<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>files can be stored in the <code>app/extensions</code> folder (modifiable). Example:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> extensions

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;fmt&quot;</span>

  <span class="token string">&quot;github.com/goravel/framework/contracts/log&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Handle pass channel config path here</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>logger <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>channel <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span>Hook<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>Hook<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Hook <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Levels monitoring level</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Levels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>Level<span class="token punctuation">{</span>
    log<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>WarningLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>ErrorLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>FatalLevel<span class="token punctuation">,</span>
    log<span class="token punctuation">.</span>PanicLevel<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fire execute logic when trigger</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hook<span class="token punctuation">)</span> <span class="token function">Fire</span><span class="token punctuation">(</span>entry log<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;context=%v level=%v time=%v message=%s&quot;</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Level</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function v(m,h){const s=o("router-link"),c=o("CommentService");return i(),l("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#introduction"},{default:t(()=>[e("Introduction")]),_:1})]),n("li",null,[a(s,{to:"#configuration"},{default:t(()=>[e("Configuration")]),_:1})]),n("li",null,[a(s,{to:"#available-channel-drivers"},{default:t(()=>[e("Available channel drivers")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#inject-context"},{default:t(()=>[e("Inject Context")]),_:1})])])]),n("li",null,[a(s,{to:"#write-log-messages"},{default:t(()=>[e("Write log messages")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#write-to-a-specific-channel"},{default:t(()=>[e("Write to a specific channel")]),_:1})])])]),n("li",null,[a(s,{to:"#chain-methods"},{default:t(()=>[e("Chain Methods")]),_:1})]),n("li",null,[a(s,{to:"#create-a-custom-channel"},{default:t(()=>[e("Create a custom channel")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#implement-driver"},{default:t(()=>[e("Implement Driver")]),_:1})])])])])]),g,a(c)])}const b=p(r,[["render",v],["__file","logging.html.vue"]]),y=JSON.parse('{"path":"/the-basics/logging.html","title":"Logging","lang":"en-US","frontmatter":{"description":"Logging Introduction In order to understand the running status of the application, Goravel provides a powerful log service that can record log messages and system errors to a fi...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/the-basics/logging.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/the-basics/logging.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/the-basics/logging.html"}],["meta",{"property":"og:description","content":"Logging Introduction In order to understand the running status of the application, Goravel provides a powerful log service that can record log messages and system errors to a fi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Logging\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Available channel drivers","slug":"available-channel-drivers","link":"#available-channel-drivers","children":[{"level":3,"title":"Inject Context","slug":"inject-context","link":"#inject-context","children":[]}]},{"level":2,"title":"Write log messages","slug":"write-log-messages","link":"#write-log-messages","children":[{"level":3,"title":"Write to a specific channel","slug":"write-to-a-specific-channel","link":"#write-to-a-specific-channel","children":[]}]},{"level":2,"title":"Chain Methods","slug":"chain-methods","link":"#chain-methods","children":[]},{"level":2,"title":"Create a custom channel","slug":"create-a-custom-channel","link":"#create-a-custom-channel","children":[{"level":3,"title":"Implement Driver","slug":"implement-driver","link":"#implement-driver","children":[]}]}],"git":{},"filePathRelative":"the-basics/logging.md","autoDesc":true}');export{b as comp,y as data};
