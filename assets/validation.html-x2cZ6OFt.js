import{_ as l,r as o,o as u,c as d,a as n,b as a,w as t,d as s,e as p}from"./app-Cr_-oGxp.js";const r={},k=n("h1",{id:"表单验证",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#表单验证"},[n("span",null,"表单验证")])],-1),v={class:"table-of-contents"},m=p(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Goravel 提供了几种不同的方法来验证传入应用程序的数据。最常见的做法是在所有传入的 HTTP 请求中使用 <code>validate</code> 方法。Goravel 包含了各种方便的验证规则。</p><h2 id="快速验证" tabindex="-1"><a class="header-anchor" href="#快速验证"><span>快速验证</span></a></h2><p>为了了解 Goravel 强大的验证功能，我们来看一个表单验证并将错误消息展示给用户的完整示例。通过阅读概述，这将会对您如何使用 Goravel 验证传入的请求数据有一个很好的理解：</p><h3 id="定义路由" tabindex="-1"><a class="header-anchor" href="#定义路由"><span>定义路由</span></a></h3><p>首先，假设我们在 <code>routes/web.go</code> 路由文件中定义了下面这些路由：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;goravel/app/http/controllers&quot;</span>

postController <span class="token operator">:=</span> controllers<span class="token punctuation">.</span><span class="token function">NewPostController</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/post/create&quot;</span><span class="token punctuation">,</span> postController<span class="token punctuation">.</span>Create<span class="token punctuation">)</span>
facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">&quot;/post&quot;</span><span class="token punctuation">,</span> postController<span class="token punctuation">.</span>Store<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GET</code> 路由会显示一个供用户创建新博客文章的表单，而 <code>POST</code> 路由会将新的博客文章存储到数据库中。</p><h3 id="创建控制器" tabindex="-1"><a class="header-anchor" href="#创建控制器"><span>创建控制器</span></a></h3><p>接下来，让我们一起来看看处理这些路由的简单控制器。我们暂时留空了 <code>Store</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> controllers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> PostController <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token comment">// Dependent services</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewPostController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>PostController <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>PostController<span class="token punctuation">{</span>
    <span class="token comment">// Inject services</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写验证逻辑" tabindex="-1"><a class="header-anchor" href="#编写验证逻辑"><span>编写验证逻辑</span></a></h3><p>现在我们开始在 <code>Store</code> 方法中编写用来验证新的博客文章的逻辑代码。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套字段的说明" tabindex="-1"><a class="header-anchor" href="#嵌套字段的说明"><span>嵌套字段的说明</span></a></h3><p>如果您的 HTTP 请求包含「嵌套」参数，您可以在验证规则中使用 <code>.</code> 语法来指定这些参数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;author.name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;author.description&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证表单请求" tabindex="-1"><a class="header-anchor" href="#验证表单请求"><span>验证表单请求</span></a></h2><h3 id="创建表单请求验证" tabindex="-1"><a class="header-anchor" href="#创建表单请求验证"><span>创建表单请求验证</span></a></h3><p>面对更复杂的验证场景，您可以创建一个「表单请求」。表单请求是一个包含了验证逻辑的自定义请求类。要创建一个表单请求类，请使用 <code>make:request</code> Artisan CLI 命令：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>request StorePostRequest
<span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>request user<span class="token operator">/</span>StorePostRequest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令生成的表单请求类将被置于 <code>app/http/requests</code> 目录中。如果这个目录不存在，在您运行 <code>make:request</code> 命令后将会创建这个目录。Goravel 生成的每个表单请求都有五个方法：<code>Authorize</code>, <code>Rules</code>, <code>Messages</code>, <code>Attributes</code> 和 <code>PrepareForValidation</code>。</p><p>正如您可能已经猜到的那样，<code>Authorize</code> 方法负责确定当前经过身份验证的用户是否可以执行请求操作，而 <code>Rules</code> 方法则返回适用于请求数据的验证规则：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> requests

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/http&quot;</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> StorePostRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  Name <span class="token builtin">string</span> <span class="token string">\`form:&quot;name&quot; json:&quot;name&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Rules</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token comment">// 键与传入的键保持一致</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Messages</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Attributes</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">PrepareForValidation</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data validation<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，验证规则是如何运行的呢？您所需要做的就是在控制器方法中类型提示传入的请求。在调用控制器方法之前验证传入的表单请求，这意味着您不需要在控制器中写任何验证逻辑：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> storePost requests<span class="token punctuation">.</span>StorePostRequest
  errors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>storePost<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，由于 <code>form</code> 传值默认为 <code>string</code> 类型，因此 request 中所有字段也都应为 <code>string</code> 类型，否则请使用 <code>JSON</code> 传值。</p></blockquote><h3 id="表单请求授权验证" tabindex="-1"><a class="header-anchor" href="#表单请求授权验证"><span>表单请求授权验证</span></a></h3>`,28),g=n("code",null,"Authorize",-1),b=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> comment models<span class="token punctuation">.</span>Comment
  facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>comment<span class="token punctuation">)</span>
  <span class="token keyword">if</span> comment<span class="token punctuation">.</span>ID <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;no comment is found&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token operator">!</span>facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Allows</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
    <span class="token string">&quot;comment&quot;</span><span class="token punctuation">:</span> comment<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;can&#39;t update comment&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>error</code> 将会被传递到 <code>ctx.Request().ValidateRequest</code> 的返回值中。</p><h3 id="自定义错误消息" tabindex="-1"><a class="header-anchor" href="#自定义错误消息"><span>自定义错误消息</span></a></h3><p>您可以通过重写表单请求的 <code>Messages</code> 方法来自定义错误消息。此方法应返回属性 / 规则对及其对应错误消息的数组：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Messages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;title.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A title is required&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;body.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;A message is required&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义验证属性" tabindex="-1"><a class="header-anchor" href="#自定义验证属性"><span>自定义验证属性</span></a></h3><p>Goravel 的许多内置验证规则错误消息都包含 <code>:attribute</code> 占位符。如果您希望将验证消息的 <code>:attribute</code> 部分替换为自定义属性名称，则可以重写 <code>Attributes</code> 方法来指定自定义名称。此方法应返回属性 / 名称对的数组：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">Attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;email address&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="准备验证输入" tabindex="-1"><a class="header-anchor" href="#准备验证输入"><span>准备验证输入</span></a></h3><p>如果您需要在应用验证规则之前修改或清理请求中的任何数据，您可以使用 <code>PrepareForValidation</code> 方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>StorePostRequest<span class="token punctuation">)</span> <span class="token function">PrepareForValidation</span><span class="token punctuation">(</span>data validation<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> name<span class="token punctuation">,</span> exist <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手动创建验证器" tabindex="-1"><a class="header-anchor" href="#手动创建验证器"><span>手动创建验证器</span></a></h2><p>如果您不想在请求中使用 <code>Validate</code> 方法，您可以使用 <code>facades.Validator</code> 手动创建一个验证器实例。facades 中的 <code>Make</code> 方法将会生成一个新的验证器实例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
    <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;required|max_len:255&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;body&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;required&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> validator<span class="token punctuation">.</span><span class="token function">Fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Return fail</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
  err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Make</code> 方法中的第一个参数是期望校验的数据，可以是 <code>map[string]any</code> 与 <code>struct</code>。第二个参数是应用到数据上的校验规则。</p><h3 id="自定义错误消息-1" tabindex="-1"><a class="header-anchor" href="#自定义错误消息-1"><span>自定义错误消息</span></a></h3><p>如果需要，您可以提供验证程序实例使用的自定义错误消息，而不是 Goravel 提供的默认错误消息。您可以将自定义消息作为第三个参数传递给 <code>Make</code> 方法(也适用于<code>ctx.Request().Validate()</code>)：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token string">&quot;required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;The :attribute field is required.&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为给定属性指定自定义消息" tabindex="-1"><a class="header-anchor" href="#为给定属性指定自定义消息"><span>为给定属性指定自定义消息</span></a></h3><p>有时您可能希望只为特定属性指定自定义错误消息。您可以使用 <code>.</code> 表示法。首先指定属性名称，然后指定规则(也适用于<code>ctx.Request().Validate()</code>)：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Messages</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token string">&quot;email.required&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;We need to know your email address!&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指定自定义属性值" tabindex="-1"><a class="header-anchor" href="#指定自定义属性值"><span>指定自定义属性值</span></a></h3><p>Goravel 的许多内置错误消息都包含一个 <code>:attribute</code> 占位符，该占位符已被验证中的字段或属性的名称替换。为了自定义用于替换特定字段的这些占位符的值，您可以将自定义属性的数组作为第三个参数传递给 <code>Make</code> 方法(也适用于<code>ctx.Request().Validate()</code>)：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">Attributes</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
  <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;email address&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证前格式化数据" tabindex="-1"><a class="header-anchor" href="#验证前格式化数据"><span>验证前格式化数据</span></a></h3><p>您可以在验证数据前先格式化数据，以便更灵活的进行数据校验，您可以将格式化数据的方法作为第三个参数传递给 <code>Make</code> 方法(也适用于<code>ctx.Request().Validate()</code>)：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
  validationcontract <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span>
  <span class="token string">&quot;github.com/goravel/framework/validation&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostController<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span>
  validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">,</span> validation<span class="token punctuation">.</span><span class="token function">PrepareForValidation</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>data validationcontract<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> name<span class="token punctuation">,</span> exist <span class="token operator">:=</span> data<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> exist <span class="token punctuation">{</span>
      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理验证字段" tabindex="-1"><a class="header-anchor" href="#处理验证字段"><span>处理验证字段</span></a></h2><p>在使用表单请求或手动创建的验证器实例验证传入请求数据后，您依然希望将请求数据绑定至 <code>struct</code>，有两种可以实现方法：</p><ol><li>使用 <code>Bind</code> 方法，这将会绑定所有传入的数据，包括未通过校验的数据：</li></ol><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span>
<span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>

validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">)</span>
<span class="token keyword">var</span> user models<span class="token punctuation">.</span>User
err <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用「表单请求」进行验证时，传入的数据将会自动被绑定到表单：</li></ol><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> storePost requests<span class="token punctuation">.</span>StorePostRequest
errors<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ValidateRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>storePost<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>storePost<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理错误信息" tabindex="-1"><a class="header-anchor" href="#处理错误信息"><span>处理错误信息</span></a></h2><h3 id="检索特定字段的一个错误信息-随机" tabindex="-1"><a class="header-anchor" href="#检索特定字段的一个错误信息-随机"><span>检索特定字段的一个错误信息（随机）</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span>
validator<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> rules<span class="token punctuation">)</span>

message <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">One</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索特定字段的所有错误信息" tabindex="-1"><a class="header-anchor" href="#检索特定字段的所有错误信息"><span>检索特定字段的所有错误信息</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>messages <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="检索所有字段的所有错误信息" tabindex="-1"><a class="header-anchor" href="#检索所有字段的所有错误信息"><span>检索所有字段的所有错误信息</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>messages <span class="token operator">:=</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="判断特定字段是否含有错误信息" tabindex="-1"><a class="header-anchor" href="#判断特定字段是否含有错误信息"><span>判断特定字段是否含有错误信息</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> validator<span class="token punctuation">.</span><span class="token function">Errors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可用的验证规则" tabindex="-1"><a class="header-anchor" href="#可用的验证规则"><span>可用的验证规则</span></a></h2><p>下方列出了所有可用的验证规则及其功能：</p><table><thead><tr><th>规则名</th><th>描述</th></tr></thead><tbody><tr><td><code>required</code></td><td>字段为必填项，值不能为空。</td></tr><tr><td><code>required_if</code></td><td><code>required_if:anotherfield,value,...</code> 如果其它字段 anotherField 为任一值 value ，则此验证字段必须存在且不为空。</td></tr><tr><td><code>required_unless</code></td><td><code>required_unless:anotherfield,value,...</code> 如果其它字段 anotherField 不等于任一值 value ，则此验证字段必须存在且不为空。</td></tr><tr><td><code>required_with</code></td><td><code>required_with:foo,bar,...</code> 在其他任一指定字段出现时，验证的字段才必须存在且不为空。</td></tr><tr><td><code>required_with_all</code></td><td><code>required_with_all:foo,bar,...</code> 只有在其他指定字段全部出现时，验证的字段才必须存在且不为空。</td></tr><tr><td><code>required_without</code></td><td><code>required_without:foo,bar,...</code> 在其他指定任一字段不出现时，验证的字段才必须存在且不为空。</td></tr><tr><td><code>required_without_all</code></td><td><code>required_without_all:foo,bar,...</code> 只有在其他指定字段全部不出现时，验证的字段才必须存在且不为空。</td></tr><tr><td><code>int</code></td><td>检查值是 <code>intX</code> <code>uintX</code> 类型，同时支持大小检查 <code>int</code> <code>int:2</code> <code>int:2,12</code>。注意：<a href="#int">使用注意事项</a></td></tr><tr><td><code>uint</code></td><td>检查值是 <code>uintX</code> 类型(<code>value &gt;= 0</code>)</td></tr><tr><td><code>bool</code></td><td>检查值是布尔字符串(<code>true</code>: &quot;1&quot;, &quot;on&quot;, &quot;yes&quot;, &quot;true&quot;, <code>false</code>: &quot;0&quot;, &quot;off&quot;, &quot;no&quot;, &quot;false&quot;)</td></tr><tr><td><code>string</code></td><td>检查值是字符串类型，同时支持长度检查 <code>string</code> <code>string:2</code> <code>string:2,12</code></td></tr><tr><td><code>float</code></td><td>检查值是 <code>float(floatX)</code> 类型</td></tr><tr><td><code>slice</code></td><td>检查值是 <code>slice</code> 类型(<code>[]intX</code> <code>[]uintX</code> <code>[]byte</code> <code>[]string</code> 等)</td></tr><tr><td><code>in</code></td><td><code>in:foo,bar,…</code> 检查值是否在给定的枚举列表([]string, []intX, []uintX)中</td></tr><tr><td><code>not_in</code></td><td><code>not_in:foo,bar,…</code> 检查值不在给定的枚举列表([]string, []intX, []uintX)中</td></tr><tr><td><code>starts_with</code></td><td><code>starts_with:foo</code> 检查输入的 string 值是否以给定 sub-string 开始</td></tr><tr><td><code>ends_with</code></td><td><code>ends_with:foo</code> 检查输入的 string 值是否以给定 sub-string 结束</td></tr><tr><td><code>between</code></td><td><code>between:min,max</code> 检查值是否为数字且在给定范围内</td></tr><tr><td><code>max</code></td><td><code>max:value</code> 检查输入值小于或等于给定值(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>min</code></td><td><code>min:value</code> 检查输入值大于或等于给定值(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>eq</code></td><td><code>eq:value</code> 检查输入值是否等于给定值</td></tr><tr><td><code>ne</code></td><td><code>ne:value</code> 检查输入值是否不等于给定值</td></tr><tr><td><code>lt</code></td><td><code>lt:value</code> 检查值小于给定大小(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>gt</code></td><td><code>gt:value</code> 检查值大于给定大小(<code>intX</code> <code>uintX</code> <code>floatX</code>)</td></tr><tr><td><code>len</code></td><td><code>len:value</code> 检查值长度等于给定大小(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>min_len</code></td><td><code>min_len:value</code> 检查值的最小长度是给定大小(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>max_len</code></td><td><code>max_len:value</code> 检查值的最大长度是给定大小(<code>string</code> <code>array</code> <code>slice</code> <code>map</code>)</td></tr><tr><td><code>email</code></td><td>检查值是 Email 地址字符串</td></tr><tr><td><code>array</code></td><td>检查值是 <code>array</code> 或 <code>slice</code> 类型</td></tr><tr><td><code>map</code></td><td>检查值是 <code>map</code> 类型</td></tr><tr><td><code>eq_field</code></td><td><code>eq_field:field</code> 检查字段值是否等于另一个字段的值</td></tr><tr><td><code>ne_field</code></td><td><code>ne_field:field</code> 检查字段值是否不等于另一个字段的值</td></tr><tr><td><code>gt_field</code></td><td><code>gte_field:field</code> 检查字段值是否大于另一个字段的值</td></tr><tr><td><code>gte_field</code></td><td><code>gt_field:field</code> 检查字段值是否大于或等于另一个字段的值</td></tr><tr><td><code>lt_field</code></td><td><code>lt_field:field</code> 检查字段值是否小于另一个字段的值</td></tr><tr><td><code>lte_field</code></td><td><code>lte_field:field</code> 检查字段值是否小于或等于另一个字段的值</td></tr><tr><td><code>file</code></td><td>验证是否是上传的文件</td></tr><tr><td><code>image</code></td><td>验证是否是上传的图片文件</td></tr><tr><td><code>date</code></td><td>检查字段值是否为日期字符串</td></tr><tr><td><code>gt_date</code></td><td><code>gt_date:value</code> 检查输入值是否大于给定的日期字符串</td></tr><tr><td><code>lt_date</code></td><td><code>lt_date:value</code> 检查输入值是否小于给定的日期字符串</td></tr><tr><td><code>gte_date</code></td><td><code>gte_date:value</code> 检查输入值是否大于或等于给定的日期字符串</td></tr><tr><td><code>lte_date</code></td><td><code>lte_date:value</code> 检查输入值是否小于或等于给定的日期字符串</td></tr><tr><td><code>alpha</code></td><td>验证值是否仅包含字母字符</td></tr><tr><td><code>alpha_num</code></td><td>验证是否仅包含字母、数字</td></tr><tr><td><code>alpha_dash</code></td><td>验证是否仅包含字母、数字、破折号（ - ）以及下划线（ _ ）</td></tr><tr><td><code>json</code></td><td>检查值是 JSON 字符串</td></tr><tr><td><code>number</code></td><td>检查值是数字 <code>&gt;= 0</code></td></tr><tr><td><code>full_url</code></td><td>检查值是完整的URL字符串(必须以 http, https 开始的 URL)</td></tr><tr><td><code>ip</code></td><td>检查值是 IP（v4或v6）字符串</td></tr><tr><td><code>ipv4</code></td><td>检查值是 IPv4 字符串</td></tr><tr><td><code>ipv6</code></td><td>检查值是 IPv6 字符串</td></tr></tbody></table><h2 id="自定义验证规则" tabindex="-1"><a class="header-anchor" href="#自定义验证规则"><span>自定义验证规则</span></a></h2><p>Goravel 提供了各种有用的验证规则，但是，您可能希望指定一些您自己的。注册自定义验证规则的一种方法是使用规则对象。要生成新的规则对象，您可以使用 <code>make:rule</code> Artisan 命令。 让我们使用这个命令生成一个验证字符串是否为大写的规则。Goravel 会将新规则放在 <code>app/rules</code> 目录中。如果此目录不存在，Goravel 将在您执行 Artisan 命令创建规则时创建它：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>rule Uppercase
<span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>rule user<span class="token operator">/</span>Uppercase
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建规则后，我们就可以定义其行为了。 一个规则对象包含两个方法：<code>Passes</code> 和 <code>Message</code>。<code>Passes</code> 方法接收所有数据、待验证的数据与验证参数，应该根据属性值是否有效返回 <code>true</code> 或 <code>false</code>。<code>Message</code> 方法应该返回验证失败时应该使用的验证错误消息：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> rules

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;strings&quot;</span>

  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Uppercase <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Signature The name of the rule.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;uppercase&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Passes Determine if the validation rule passes.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Passes</span><span class="token punctuation">(</span>data validation<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> val any<span class="token punctuation">,</span> options <span class="token operator">...</span>any<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Message Get the validation error message.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>Uppercase<span class="token punctuation">)</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;The :attribute must be uppercase.&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将该规则对象注册到 <code>app/providers/validation_service_provider.go</code> 文件的 <code>rules</code> 方法中，之后该规则就可以像其他规则一样使用了：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> providers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/validation&quot;</span>
  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span>

  <span class="token string">&quot;goravel/app/rules&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> ValidationServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Validation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddRules</span><span class="token punctuation">(</span>receiver<span class="token punctuation">.</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    facades<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;add rules error: %+v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ValidationServiceProvider<span class="token punctuation">)</span> <span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Rule <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>validation<span class="token punctuation">.</span>Rule<span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>rules<span class="token punctuation">.</span>Uppercase<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="规则使用注意事项" tabindex="-1"><a class="header-anchor" href="#规则使用注意事项"><span>规则使用注意事项</span></a></h2><h3 id="int" tabindex="-1"><a class="header-anchor" href="#int"><span>int</span></a></h3><p>当时用 <code>ctx.Request().Validate(rules)</code> 进行校验时，传入的 <code>int</code> 类型数据将会被 <code>json.Unmarshal</code> 解析为 <code>float64</code> 类型，从而导致 int 规则验证失败。</p><p><strong>解决方案：</strong></p><p>方案一：添加 <a href="#%E9%AA%8C%E8%AF%81%E5%89%8D%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E6%8D%AE"><code>validation.PrepareForValidation</code></a>，在验证数据前对数据进行格式化；</p><p>方案二：使用 <code>facades.Validation().Make()</code> 进行规则校验；</p>`,58);function h(f,q){const e=o("router-link"),c=o("RouteLink"),i=o("CommentService");return u(),d("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#简介"},{default:t(()=>[s("简介")]),_:1})]),n("li",null,[a(e,{to:"#快速验证"},{default:t(()=>[s("快速验证")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#定义路由"},{default:t(()=>[s("定义路由")]),_:1})]),n("li",null,[a(e,{to:"#创建控制器"},{default:t(()=>[s("创建控制器")]),_:1})]),n("li",null,[a(e,{to:"#编写验证逻辑"},{default:t(()=>[s("编写验证逻辑")]),_:1})]),n("li",null,[a(e,{to:"#嵌套字段的说明"},{default:t(()=>[s("嵌套字段的说明")]),_:1})])])]),n("li",null,[a(e,{to:"#验证表单请求"},{default:t(()=>[s("验证表单请求")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#创建表单请求验证"},{default:t(()=>[s("创建表单请求验证")]),_:1})]),n("li",null,[a(e,{to:"#表单请求授权验证"},{default:t(()=>[s("表单请求授权验证")]),_:1})]),n("li",null,[a(e,{to:"#自定义错误消息"},{default:t(()=>[s("自定义错误消息")]),_:1})]),n("li",null,[a(e,{to:"#自定义验证属性"},{default:t(()=>[s("自定义验证属性")]),_:1})]),n("li",null,[a(e,{to:"#准备验证输入"},{default:t(()=>[s("准备验证输入")]),_:1})])])]),n("li",null,[a(e,{to:"#手动创建验证器"},{default:t(()=>[s("手动创建验证器")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#自定义错误消息-1"},{default:t(()=>[s("自定义错误消息")]),_:1})]),n("li",null,[a(e,{to:"#为给定属性指定自定义消息"},{default:t(()=>[s("为给定属性指定自定义消息")]),_:1})]),n("li",null,[a(e,{to:"#指定自定义属性值"},{default:t(()=>[s("指定自定义属性值")]),_:1})]),n("li",null,[a(e,{to:"#验证前格式化数据"},{default:t(()=>[s("验证前格式化数据")]),_:1})])])]),n("li",null,[a(e,{to:"#处理验证字段"},{default:t(()=>[s("处理验证字段")]),_:1})]),n("li",null,[a(e,{to:"#处理错误信息"},{default:t(()=>[s("处理错误信息")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#检索特定字段的一个错误信息-随机"},{default:t(()=>[s("检索特定字段的一个错误信息（随机）")]),_:1})]),n("li",null,[a(e,{to:"#检索特定字段的所有错误信息"},{default:t(()=>[s("检索特定字段的所有错误信息")]),_:1})]),n("li",null,[a(e,{to:"#检索所有字段的所有错误信息"},{default:t(()=>[s("检索所有字段的所有错误信息")]),_:1})]),n("li",null,[a(e,{to:"#判断特定字段是否含有错误信息"},{default:t(()=>[s("判断特定字段是否含有错误信息")]),_:1})])])]),n("li",null,[a(e,{to:"#可用的验证规则"},{default:t(()=>[s("可用的验证规则")]),_:1})]),n("li",null,[a(e,{to:"#自定义验证规则"},{default:t(()=>[s("自定义验证规则")]),_:1})]),n("li",null,[a(e,{to:"#规则使用注意事项"},{default:t(()=>[s("规则使用注意事项")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#int"},{default:t(()=>[s("int")]),_:1})])])])])]),m,n("p",null,[s("表单请求类内也包含了 "),g,s(" 方法。在这个方法中，您可以检查经过身份验证的用户确定其是否具有更新给定资源的权限。例如，您可以判断用户是否拥有更新文章评论的权限。最有可能的是，您将通过以下方法与您的 "),a(c,{to:"/zh/security/authorization.html"},{default:t(()=>[s("授权与策略")]),_:1}),s(" 进行交互：")]),b,a(i)])}const w=l(r,[["render",h],["__file","validation.html.vue"]]),_=JSON.parse('{"path":"/zh/the-basics/validation.html","title":"表单验证","lang":"zh-CN","frontmatter":{"description":"表单验证 简介 Goravel 提供了几种不同的方法来验证传入应用程序的数据。最常见的做法是在所有传入的 HTTP 请求中使用 validate 方法。Goravel 包含了各种方便的验证规则。 快速验证 为了了解 Goravel 强大的验证功能，我们来看一个表单验证并将错误消息展示给用户的完整示例。通过阅读概述，这将会对您如何使用 Goravel 验...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/the-basics/validation.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/the-basics/validation.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/the-basics/validation.html"}],["meta",{"property":"og:description","content":"表单验证 简介 Goravel 提供了几种不同的方法来验证传入应用程序的数据。最常见的做法是在所有传入的 HTTP 请求中使用 validate 方法。Goravel 包含了各种方便的验证规则。 快速验证 为了了解 Goravel 强大的验证功能，我们来看一个表单验证并将错误消息展示给用户的完整示例。通过阅读概述，这将会对您如何使用 Goravel 验..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"表单验证\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"快速验证","slug":"快速验证","link":"#快速验证","children":[{"level":3,"title":"定义路由","slug":"定义路由","link":"#定义路由","children":[]},{"level":3,"title":"创建控制器","slug":"创建控制器","link":"#创建控制器","children":[]},{"level":3,"title":"编写验证逻辑","slug":"编写验证逻辑","link":"#编写验证逻辑","children":[]},{"level":3,"title":"嵌套字段的说明","slug":"嵌套字段的说明","link":"#嵌套字段的说明","children":[]}]},{"level":2,"title":"验证表单请求","slug":"验证表单请求","link":"#验证表单请求","children":[{"level":3,"title":"创建表单请求验证","slug":"创建表单请求验证","link":"#创建表单请求验证","children":[]},{"level":3,"title":"表单请求授权验证","slug":"表单请求授权验证","link":"#表单请求授权验证","children":[]},{"level":3,"title":"自定义错误消息","slug":"自定义错误消息","link":"#自定义错误消息","children":[]},{"level":3,"title":"自定义验证属性","slug":"自定义验证属性","link":"#自定义验证属性","children":[]},{"level":3,"title":"准备验证输入","slug":"准备验证输入","link":"#准备验证输入","children":[]}]},{"level":2,"title":"手动创建验证器","slug":"手动创建验证器","link":"#手动创建验证器","children":[{"level":3,"title":"自定义错误消息","slug":"自定义错误消息-1","link":"#自定义错误消息-1","children":[]},{"level":3,"title":"为给定属性指定自定义消息","slug":"为给定属性指定自定义消息","link":"#为给定属性指定自定义消息","children":[]},{"level":3,"title":"指定自定义属性值","slug":"指定自定义属性值","link":"#指定自定义属性值","children":[]},{"level":3,"title":"验证前格式化数据","slug":"验证前格式化数据","link":"#验证前格式化数据","children":[]}]},{"level":2,"title":"处理验证字段","slug":"处理验证字段","link":"#处理验证字段","children":[]},{"level":2,"title":"处理错误信息","slug":"处理错误信息","link":"#处理错误信息","children":[{"level":3,"title":"检索特定字段的一个错误信息（随机）","slug":"检索特定字段的一个错误信息-随机","link":"#检索特定字段的一个错误信息-随机","children":[]},{"level":3,"title":"检索特定字段的所有错误信息","slug":"检索特定字段的所有错误信息","link":"#检索特定字段的所有错误信息","children":[]},{"level":3,"title":"检索所有字段的所有错误信息","slug":"检索所有字段的所有错误信息","link":"#检索所有字段的所有错误信息","children":[]},{"level":3,"title":"判断特定字段是否含有错误信息","slug":"判断特定字段是否含有错误信息","link":"#判断特定字段是否含有错误信息","children":[]}]},{"level":2,"title":"可用的验证规则","slug":"可用的验证规则","link":"#可用的验证规则","children":[]},{"level":2,"title":"自定义验证规则","slug":"自定义验证规则","link":"#自定义验证规则","children":[]},{"level":2,"title":"规则使用注意事项","slug":"规则使用注意事项","link":"#规则使用注意事项","children":[{"level":3,"title":"int","slug":"int","link":"#int","children":[]}]}],"git":{},"filePathRelative":"zh/the-basics/validation.md","autoDesc":true}');export{w as comp,_ as data};
