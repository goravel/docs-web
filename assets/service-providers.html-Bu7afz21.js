import{_ as o,c as i,b as s,e as a,f as c,a as l,r as e,o as r,d as u}from"./app-DTxMOBkY.js";const d={},v={class:"table-of-contents"};function k(m,n){const t=e("router-link"),p=e("CommentService");return r(),i("div",null,[n[1]||(n[1]=s("h1",{id:"服务提供者",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#服务提供者"},[s("span",null,"服务提供者")])],-1)),s("nav",v,[s("ul",null,[s("li",null,[a(t,{to:"#简介"},{default:c(()=>n[0]||(n[0]=[u("简介")])),_:1})])])]),n[2]||(n[2]=l(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>内核启动过程中最重要的是加载 <code>服务提供者</code>。应用下所有的服务提供者均被配置到了 <code>config/app.go</code> 文件中的 <code>providers</code> 数组中。</p><p>首先，内核会先调用所有服务提供者的 <code>Register</code> 方法，所有服务提供者均被注册后，再次调用所有服务提供者的 <code>Boot</code> 方法。</p><p>服务提供者是 Goravel 生命周期中的关键。服务提供者使框架可以包含各种组件，例如路由、数据库、队列、缓存等。</p><p>你也可以自定义自己的 provider，可以存放在 <code>app/providers</code> 下面，并注册到 <code>config/app.go</code> 中的 <code>providers</code> 数组中。</p><p>框架默认有一个空白的服务提供者 <code>app/providers/app_service_provider.go</code>，你可以在这里添加一些简单的引导逻辑。在大型项目中，你可以新建服务提供者以获得更细颗粒度的控制。</p><p>ServiceProvider 中提供可选方法 <code>Relationship() binding.Relationship</code>，用来声明当前 ServicerProvider 的依赖关系，设置了该方法的 ServiceProvider 将不依赖注册顺序，未设置的 ServiceProvider 将被最后注册，例如：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> ServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Relationship</span><span class="token punctuation">(</span><span class="token punctuation">)</span> binding<span class="token punctuation">.</span>Relationship <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> binding<span class="token punctuation">.</span>Relationship<span class="token punctuation">{</span></span>
<span class="line">		Bindings<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">			BindingSession<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		Dependencies<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">			binding<span class="token punctuation">.</span>Config<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">		ProvideFor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span></span>
<span class="line">			binding<span class="token punctuation">.</span>Cache<span class="token punctuation">,</span></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8)),a(p)])}const h=o(d,[["render",k],["__file","service-providers.html.vue"]]),b=JSON.parse('{"path":"/zh/architecture-concepts/service-providers.html","title":"服务提供者","lang":"zh-CN","frontmatter":{"description":"服务提供者 简介 内核启动过程中最重要的是加载 服务提供者。应用下所有的服务提供者均被配置到了 config/app.go 文件中的 providers 数组中。 首先，内核会先调用所有服务提供者的 Register 方法，所有服务提供者均被注册后，再次调用所有服务提供者的 Boot 方法。 服务提供者是 Goravel 生命周期中的关键。服务提供者使...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/architecture-concepts/service-providers.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/architecture-concepts/service-providers.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/architecture-concepts/service-providers.html"}],["meta",{"property":"og:description","content":"服务提供者 简介 内核启动过程中最重要的是加载 服务提供者。应用下所有的服务提供者均被配置到了 config/app.go 文件中的 providers 数组中。 首先，内核会先调用所有服务提供者的 Register 方法，所有服务提供者均被注册后，再次调用所有服务提供者的 Boot 方法。 服务提供者是 Goravel 生命周期中的关键。服务提供者使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务提供者\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]}],"git":{},"filePathRelative":"zh/architecture-concepts/service-providers.md","autoDesc":true}');export{h as comp,b as data};
