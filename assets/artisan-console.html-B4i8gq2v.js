import{_ as p,r as o,o as i,c,a as n,b as a,w as e,e as u,d as t}from"./app-Cr_-oGxp.js";const d={},r=n("h1",{id:"artisan-命令行",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#artisan-命令行"},[n("span",null,"Artisan 命令行")])],-1),k={class:"table-of-contents"},m=u(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Artisan 是 Goravel 自带的命令行工具，该模块可以使用 <code>facades.Artisan()</code> 进行操作。它提供了许多有用的命令，这些命令可以在构建应用时为你提供帮助。你可以通过命令查看所有可用的 Artisan 命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个命令都包含了「help」，它会显示和概述命令的可用参数及选项。只需要在命令前加上 help 即可查看命令帮助界面：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan <span class="token builtin class-name">help</span> migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您不想重复输入 <code>go run . artisan ...</code> 命令，你可以在终端中为这个命令添加一个别名：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>alias artisan=<span class="token entity" title="\\&quot;">\\&quot;</span>go run . artisan<span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> <span class="token operator">&gt;&gt;</span>~/.zshrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随后您就可以简单的运行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>artisan make:controller DemoController
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="生成命令" tabindex="-1"><a class="header-anchor" href="#生成命令"><span>生成命令</span></a></h3><p>使用 <code>make:command</code> 命令将在 <code>app/console/commands</code> 目录中创建一个新的命令。如果你的应用程序中不存在此目录，请不要担心，它将在你第一次运行 make:command 命令时自动创建：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>command SendEmails
<span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>command user<span class="token operator">/</span>SendEmails
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令结构" tabindex="-1"><a class="header-anchor" href="#命令结构"><span>命令结构</span></a></h3><p>生成命令后，需要给该类的 signature 和 description 属性定义适当的值。执行命令时将调用<code>handle</code>方法。你可以将命令逻辑放在此方法中。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> commands

<span class="token keyword">import</span> <span class="token punctuation">(</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/console&quot;</span>
  <span class="token string">&quot;github.com/goravel/framework/contracts/console/command&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> SendEmails <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">// Signature The name and signature of the console command.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Signature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;emails&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Description The console command description.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&quot;Send emails&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Extend The console command extend.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span>
  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Handle Execute the console command.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>SendEmails<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义输入" tabindex="-1"><a class="header-anchor" href="#定义输入"><span>定义输入</span></a></h2><p>在编写控制台命令时，通常是通过参数和选项来收集用户输入的。 Goravel 让你可以非常方便的获取用户输入的内容。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><p>直接在命令后跟参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan send:emails NAME EMAIL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取参数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ListCommand<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  name <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Argument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  email <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Argument</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  all <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选项" tabindex="-1"><a class="header-anchor" href="#选项"><span>选项</span></a></h3><p>选项类似于参数，是用户输入的另一种形式。在命令行中指定选项的时候，它们以两个短横线 (–) 作为前缀。</p><p>定义：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ListCommand<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span>
  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span>
    Flags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>command<span class="token punctuation">.</span>Flag<span class="token punctuation">{</span>
      <span class="token operator">&amp;</span>command<span class="token punctuation">.</span>StringFlag<span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span>    <span class="token string">&quot;lang&quot;</span><span class="token punctuation">,</span>
        Value<span class="token punctuation">:</span>   <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
        Aliases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        Usage<span class="token punctuation">:</span>   <span class="token string">&quot;language for the greeting&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ListCommand<span class="token punctuation">)</span> <span class="token function">Handle</span><span class="token punctuation">(</span>ctx console<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
  lang <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Option</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">--lang</span> Chinese
go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">-l</span> Chinese
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：同时使用参数与选项时，选项要在参数之前定义，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 正确
go run <span class="token builtin class-name">.</span> artisan emails <span class="token parameter variable">--lang</span> Chinese name
// 错误
go run <span class="token builtin class-name">.</span> artisan emails name <span class="token parameter variable">--lang</span> Chinese name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 <code>command.StringFlag</code>，我们还可以其他类型的 <code>Flag</code> 与 <code>Option*</code>：<code>StringSliceFlag</code>, <code>BoolFlag</code>, <code>Float64Flag</code>, <code>Float64SliceFlag</code>, <code>IntFlag</code>, <code>IntSliceFlag</code>, <code>Int64Flag</code>, <code>Int64SliceFlag</code>。</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><p>可以将一组命令设置为同一个分类，方便在 <code>go run . artisan list</code> 中查看：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Extend The console command extend.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>ConsoleMakeCommand<span class="token punctuation">)</span> <span class="token function">Extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> command<span class="token punctuation">.</span>Extend <span class="token punctuation">{</span>
  <span class="token keyword">return</span> command<span class="token punctuation">.</span>Extend<span class="token punctuation">{</span>
    Category<span class="token punctuation">:</span> <span class="token string">&quot;make&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册命令" tabindex="-1"><a class="header-anchor" href="#注册命令"><span>注册命令</span></a></h2><p>你的所有命令都需要在 <code>app\\console\\kernel.go</code> 文件的 <code>Commands</code> 方法中注册。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>kernel Kernel<span class="token punctuation">)</span> <span class="token function">Commands</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Command <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span>Command<span class="token punctuation">{</span>
    <span class="token operator">&amp;</span>commands<span class="token punctuation">.</span>SendEmails<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="以编程方式执行命令" tabindex="-1"><a class="header-anchor" href="#以编程方式执行命令"><span>以编程方式执行命令</span></a></h2><p>有时你可能希望在 CLI 之外执行 Artisan 命令，可以使用 <code>facades.Artisan()</code> 上的 <code>Call</code> 方法来完成此操作。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  facades<span class="token punctuation">.</span><span class="token function">Artisan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;emails&quot;</span><span class="token punctuation">)</span>
  facades<span class="token punctuation">.</span><span class="token function">Artisan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">&quot;emails --lang Chinese name&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 携带参数与选项</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function v(g,b){const s=o("router-link"),l=o("CommentService");return i(),c("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[a(s,{to:"#简介"},{default:e(()=>[t("简介")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#生成命令"},{default:e(()=>[t("生成命令")]),_:1})]),n("li",null,[a(s,{to:"#命令结构"},{default:e(()=>[t("命令结构")]),_:1})])])]),n("li",null,[a(s,{to:"#定义输入"},{default:e(()=>[t("定义输入")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#参数"},{default:e(()=>[t("参数")]),_:1})]),n("li",null,[a(s,{to:"#选项"},{default:e(()=>[t("选项")]),_:1})]),n("li",null,[a(s,{to:"#分类"},{default:e(()=>[t("分类")]),_:1})])])]),n("li",null,[a(s,{to:"#注册命令"},{default:e(()=>[t("注册命令")]),_:1})]),n("li",null,[a(s,{to:"#以编程方式执行命令"},{default:e(()=>[t("以编程方式执行命令")]),_:1})])])]),m,a(l)])}const f=p(d,[["render",v],["__file","artisan-console.html.vue"]]),x=JSON.parse('{"path":"/zh/digging-deeper/artisan-console.html","title":"Artisan 命令行","lang":"zh-CN","frontmatter":{"description":"Artisan 命令行 简介 Artisan 是 Goravel 自带的命令行工具，该模块可以使用 facades.Artisan() 进行操作。它提供了许多有用的命令，这些命令可以在构建应用时为你提供帮助。你可以通过命令查看所有可用的 Artisan 命令： 每个命令都包含了「help」，它会显示和概述命令的可用参数及选项。只需要在命令前加上 hel...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/digging-deeper/artisan-console.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/digging-deeper/artisan-console.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/digging-deeper/artisan-console.html"}],["meta",{"property":"og:description","content":"Artisan 命令行 简介 Artisan 是 Goravel 自带的命令行工具，该模块可以使用 facades.Artisan() 进行操作。它提供了许多有用的命令，这些命令可以在构建应用时为你提供帮助。你可以通过命令查看所有可用的 Artisan 命令： 每个命令都包含了「help」，它会显示和概述命令的可用参数及选项。只需要在命令前加上 hel..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Artisan 命令行\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"生成命令","slug":"生成命令","link":"#生成命令","children":[]},{"level":3,"title":"命令结构","slug":"命令结构","link":"#命令结构","children":[]}]},{"level":2,"title":"定义输入","slug":"定义输入","link":"#定义输入","children":[{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"选项","slug":"选项","link":"#选项","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]}]},{"level":2,"title":"注册命令","slug":"注册命令","link":"#注册命令","children":[]},{"level":2,"title":"以编程方式执行命令","slug":"以编程方式执行命令","link":"#以编程方式执行命令","children":[]}],"git":{},"filePathRelative":"zh/digging-deeper/artisan-console.md","autoDesc":true}');export{f as comp,x as data};
