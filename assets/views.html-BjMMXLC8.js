import{_ as l,c,b as s,e as a,f as t,a as u,r as p,o as r,d as i}from"./app-GKzgEKBe.js";const d={},k={class:"table-of-contents"};function v(m,n){const e=p("router-link"),o=p("CommentService");return r(),c("div",null,[n[7]||(n[7]=s("h1",{id:"views",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#views"},[s("span",null,"Views")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[a(e,{to:"#introduction"},{default:t(()=>n[0]||(n[0]=[i("Introduction")])),_:1})]),s("li",null,[a(e,{to:"#creating-rendering-views"},{default:t(()=>n[1]||(n[1]=[i("Creating & Rendering Views")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#nested-view-directories"},{default:t(()=>n[2]||(n[2]=[i("Nested View Directories")])),_:1})]),s("li",null,[a(e,{to:"#creating-the-first-available-view"},{default:t(()=>n[3]||(n[3]=[i("Creating The First Available View")])),_:1})]),s("li",null,[a(e,{to:"#determining-if-a-view-exists"},{default:t(()=>n[4]||(n[4]=[i("Determining If A View Exists")])),_:1})])])]),s("li",null,[a(e,{to:"#passing-data-to-views"},{default:t(()=>n[5]||(n[5]=[i("Passing Data To Views")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#sharing-data-with-all-views"},{default:t(()=>n[6]||(n[6]=[i("Sharing Data With All Views")])),_:1})])])])])]),n[8]||(n[8]=u(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Of course, it&#39;s not practical to return entire HTML document strings directly from your routes and controllers. Thankfully, views provide a convenient way to place all of our HTML in separate files. Views separate your controller / application logic from your presentation logic and are stored in the <code>resources/views</code> directory.</p><h2 id="creating-rendering-views" tabindex="-1"><a class="header-anchor" href="#creating-rendering-views"><span>Creating &amp; Rendering Views</span></a></h2><p>When using the Goravel default template <code>html/template</code>, you can create views by adding a file with the <code>.tmpl</code> extension in the application <code>resources/views</code> directory.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// resources/views/welcome.tmpl</span>
<span class="line">{{ define &quot;welcome.tmpl&quot; }}</span>
<span class="line">&lt;html&gt;</span>
<span class="line">  &lt;body&gt;</span>
<span class="line">  &lt;h1&gt;Hello, {{ .name }}&lt;/h1&gt;</span>
<span class="line">  &lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line">{{ end }}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After creating the view, you can use the <code>View</code> method to return the view from a route or controller in the application:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token string">&quot;welcome.tmpl&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-view-directories" tabindex="-1"><a class="header-anchor" href="#nested-view-directories"><span>Nested View Directories</span></a></h3><p>Views may also be nested within subdirectories of the <code>resources/views</code> directory. For example, if your view is stored at <code>resources/views/admin/profile.tmpl</code>, you can return it from one of your application&#39;s routes or controllers, note that the view needs to be defined as <code>define &quot;admin/profile.tmpl&quot;</code> as shown below:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// resources/views/admin/profile.tmpl</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">&quot;admin/profile.tmpl&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome to the Admin Panel<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token string">&quot;admin/profile.tmpl&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="creating-the-first-available-view" tabindex="-1"><a class="header-anchor" href="#creating-the-first-available-view"><span>Creating The First Available View</span></a></h3><p>Using the <code>First</code> method, you can use the first view that exists in a given array of views. This may be useful if your application or package allows views to be customized or overwritten:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;custom/admin.tmpl&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin.tmpl&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="determining-if-a-view-exists" tabindex="-1"><a class="header-anchor" href="#determining-if-a-view-exists"><span>Determining If A View Exists</span></a></h3><p>If you need to determine if a view exists, you can use the <code>facades.View()</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> facades<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exist</span><span class="token punctuation">(</span><span class="token string">&quot;welcome.tmpl&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="passing-data-to-views" tabindex="-1"><a class="header-anchor" href="#passing-data-to-views"><span>Passing Data To Views</span></a></h2><p>As you saw in the previous examples, you may pass an array of data to views to make that data available to the view. Please note, the format of the passed data needs to change according to the template driver used, in the following example, using the default <code>html/template</code> driver:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token string">&quot;welcome.tmpl&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sharing-data-with-all-views" tabindex="-1"><a class="header-anchor" href="#sharing-data-with-all-views"><span>Sharing Data With All Views</span></a></h3><p>Occasionally, you may need to share data with all views that are rendered by your application. You may do so using the <code>Share</code> method in <code>facades.View()</code>. Typically, you should place calls to the <code>Share</code> method within a service provider&#39;s <code>Boot</code> method. You are free to add them to the <code>app/providers/app_service_provider.go</code> class or generate a separate service provider to house them:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> providers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token string">&quot;github.com/goravel/framework/contracts/foundation&quot;</span></span>
<span class="line">    <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> AppServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>AppServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>AppServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    facades<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Share</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)),a(o)])}const g=l(d,[["render",v],["__file","views.html.vue"]]),w=JSON.parse(`{"path":"/the-basics/views.html","title":"Views","lang":"en-US","frontmatter":{"description":"Views Introduction Of course, it's not practical to return entire HTML document strings directly from your routes and controllers. Thankfully, views provide a convenient way to ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/the-basics/views.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/the-basics/views.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/the-basics/views.html"}],["meta",{"property":"og:description","content":"Views Introduction Of course, it's not practical to return entire HTML document strings directly from your routes and controllers. Thankfully, views provide a convenient way to ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Views\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Creating & Rendering Views","slug":"creating-rendering-views","link":"#creating-rendering-views","children":[{"level":3,"title":"Nested View Directories","slug":"nested-view-directories","link":"#nested-view-directories","children":[]},{"level":3,"title":"Creating The First Available View","slug":"creating-the-first-available-view","link":"#creating-the-first-available-view","children":[]},{"level":3,"title":"Determining If A View Exists","slug":"determining-if-a-view-exists","link":"#determining-if-a-view-exists","children":[]}]},{"level":2,"title":"Passing Data To Views","slug":"passing-data-to-views","link":"#passing-data-to-views","children":[{"level":3,"title":"Sharing Data With All Views","slug":"sharing-data-with-all-views","link":"#sharing-data-with-all-views","children":[]}]}],"git":{},"filePathRelative":"the-basics/views.md","autoDesc":true}`);export{g as comp,w as data};
