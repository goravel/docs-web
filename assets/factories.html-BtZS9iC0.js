import{_ as c,c as r,b as s,e,f as t,a as p,d as a,r as i,o as u}from"./app-jvmomPJx.js";const d={},k={class:"table-of-contents"};function m(v,n){const o=i("router-link"),l=i("RouteLink");return u(),r("div",null,[n[12]||(n[12]=s("h1",{id:"factories",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#factories"},[s("span",null,"Factories")])],-1)),s("nav",k,[s("ul",null,[s("li",null,[e(o,{to:"#introduction"},{default:t(()=>n[0]||(n[0]=[a("Introduction")])),_:1})]),s("li",null,[e(o,{to:"#generating-factories"},{default:t(()=>n[1]||(n[1]=[a("Generating Factories")])),_:1}),s("ul",null,[s("li",null,[e(o,{to:"#model-factory-discovery-conventions"},{default:t(()=>n[2]||(n[2]=[a("Model & Factory Discovery Conventions")])),_:1})])])]),s("li",null,[e(o,{to:"#creating-models-using-factories"},{default:t(()=>n[3]||(n[3]=[a("Creating Models Using Factories")])),_:1}),s("ul",null,[s("li",null,[e(o,{to:"#instantiating-models"},{default:t(()=>n[4]||(n[4]=[a("Instantiating Models")])),_:1})]),s("li",null,[e(o,{to:"#persisting-models"},{default:t(()=>n[5]||(n[5]=[a("Persisting Models")])),_:1})]),s("li",null,[e(o,{to:"#ignore-model-event"},{default:t(()=>n[6]||(n[6]=[a("Ignore Model Event")])),_:1})])])])])]),n[13]||(n[13]=p(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>When testing your application or seeding your database, it might be necessary to insert a few records into your database beforehand. Instead of manually inputting values for each column, Goravel allows you to define a set of default attributes for each of your models by creating model factories.</p><p>To see an example of how to write a factory, you can check out the <code>user_factory.go</code> file located in your application&#39;s <code>database/factories</code> directory.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> factories</span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> UserFactory <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Definition Define the model&#39;s default state.</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>UserFactory<span class="token punctuation">)</span> <span class="token function">Definition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, in their most basic form, factories are structs that have a <code>Definition</code> method. The method returns the default set of attribute values that should be used when creating a model with the factory. To generate a range of random data, you can rely on <a href="https://github.com/brianvoe/gofakeit" target="_blank" rel="noopener noreferrer">brianvoe/gofakeit</a>.</p><h2 id="generating-factories" tabindex="-1"><a class="header-anchor" href="#generating-factories"><span>Generating Factories</span></a></h2><p>To create a factory, run the <code>make:factory</code> Artisan command:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">go run . artisan make:factory PostFactory</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The new factory <code>struct</code> will be placed in your <code>database/factories</code> directory.</p><h3 id="model-factory-discovery-conventions" tabindex="-1"><a class="header-anchor" href="#model-factory-discovery-conventions"><span>Model &amp; Factory Discovery Conventions</span></a></h3><p>After defining a factory, you can use the <code>Factory()</code> method in the model to bind the factory to the model:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> models</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/database/factory&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/database/orm&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;goravel/database/factories&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">  orm<span class="token punctuation">.</span>Model</span>
<span class="line">  Name   <span class="token builtin">string</span></span>
<span class="line">  Avatar <span class="token builtin">string</span></span>
<span class="line">  orm<span class="token punctuation">.</span>SoftDeletes</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> factory<span class="token punctuation">.</span>Factory <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>factories<span class="token punctuation">.</span>UserFactory<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-models-using-factories" tabindex="-1"><a class="header-anchor" href="#creating-models-using-factories"><span>Creating Models Using Factories</span></a></h2><h3 id="instantiating-models" tabindex="-1"><a class="header-anchor" href="#instantiating-models"><span>Instantiating Models</span></a></h3><p>We can use the <code>Make</code> method to create models without persisting them in the database:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You may create a collection of many models using the <code>Count</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would like to override some of the default values of your models, you may pass <code>map[string]any</code> to the <code>Make</code> method. Only the specified attributes will be replaced while the rest of the attributes remain set to their default values as specified by the factory:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Avatar&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="persisting-models" tabindex="-1"><a class="header-anchor" href="#persisting-models"><span>Persisting Models</span></a></h3><p>The <code>Create</code> method creates and saves model instances to the database using Orm&#39;s <code>Save</code> method.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You may override the factory&#39;s default model attributes by passing <code>map[string]any</code> of the attributes to the <code>Create</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;Avatar&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;avatar&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ignore-model-event" tabindex="-1"><a class="header-anchor" href="#ignore-model-event"><span>Ignore Model Event</span></a></h3>`,26)),s("p",null,[n[8]||(n[8]=a("There may be ")),e(l,{to:"/orm/getting-started.html#events"},{default:t(()=>n[7]||(n[7]=[a("model event")])),_:1}),n[9]||(n[9]=a(" defined on the model, you can ignore those events with the ")),n[10]||(n[10]=s("code",null,"CreateQuietly",-1)),n[11]||(n[11]=a(" method:"))]),n[14]||(n[14]=p(`<div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user models<span class="token punctuation">.</span>User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Orm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateQuietly</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1))])}const f=c(d,[["render",m],["__file","factories.html.vue"]]),h=JSON.parse('{"path":"/orm/factories.html","title":"Factories","lang":"en-US","frontmatter":{"description":"Factories Introduction When testing your application or seeding your database, it might be necessary to insert a few records into your database beforehand. Instead of manually i...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/orm/factories.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/orm/factories.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/orm/factories.html"}],["meta",{"property":"og:description","content":"Factories Introduction When testing your application or seeding your database, it might be necessary to insert a few records into your database beforehand. Instead of manually i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Factories\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Generating Factories","slug":"generating-factories","link":"#generating-factories","children":[{"level":3,"title":"Model & Factory Discovery Conventions","slug":"model-factory-discovery-conventions","link":"#model-factory-discovery-conventions","children":[]}]},{"level":2,"title":"Creating Models Using Factories","slug":"creating-models-using-factories","link":"#creating-models-using-factories","children":[{"level":3,"title":"Instantiating Models","slug":"instantiating-models","link":"#instantiating-models","children":[]},{"level":3,"title":"Persisting Models","slug":"persisting-models","link":"#persisting-models","children":[]},{"level":3,"title":"Ignore Model Event","slug":"ignore-model-event","link":"#ignore-model-event","children":[]}]}],"git":{},"filePathRelative":"orm/factories.md","autoDesc":true}');export{f as comp,h as data};
