import{_ as p,c as i,b as s,e as t,f as e,a as l,r as c,o as u,d as o}from"./app-B8SkG--w.js";const r={},d={class:"table-of-contents"};function k(g,n){const a=c("router-link");return u(),i("div",null,[n[16]||(n[16]=s("h1",{id:"getting-started",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#getting-started"},[s("span",null,"Getting Started")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[t(a,{to:"#introduction"},{default:e(()=>n[0]||(n[0]=[o("Introduction")])),_:1})]),s("li",null,[t(a,{to:"#configuration"},{default:e(()=>n[1]||(n[1]=[o("Configuration")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#connection-pool"},{default:e(()=>n[2]||(n[2]=[o("Connection Pool")])),_:1})]),s("li",null,[t(a,{to:"#read-write-splitting"},{default:e(()=>n[3]||(n[3]=[o("Read-Write Splitting")])),_:1})])])]),s("li",null,[t(a,{to:"#running-native-sql-queries"},{default:e(()=>n[4]||(n[4]=[o("Running Native SQL Queries")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#select"},{default:e(()=>n[5]||(n[5]=[o("Select")])),_:1})]),s("li",null,[t(a,{to:"#insert"},{default:e(()=>n[6]||(n[6]=[o("Insert")])),_:1})]),s("li",null,[t(a,{to:"#update"},{default:e(()=>n[7]||(n[7]=[o("Update")])),_:1})]),s("li",null,[t(a,{to:"#delete"},{default:e(()=>n[8]||(n[8]=[o("Delete")])),_:1})]),s("li",null,[t(a,{to:"#statement"},{default:e(()=>n[9]||(n[9]=[o("Statement")])),_:1})]),s("li",null,[t(a,{to:"#using-multiple-database-connections"},{default:e(()=>n[10]||(n[10]=[o("Using Multiple Database Connections")])),_:1})])])]),s("li",null,[t(a,{to:"#database-transactions"},{default:e(()=>n[11]||(n[11]=[o("Database Transactions")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#manually-using-transactions"},{default:e(()=>n[12]||(n[12]=[o("Manually Using Transactions")])),_:1})])])]),s("li",null,[t(a,{to:"#checking-databases"},{default:e(()=>n[13]||(n[13]=[o("Checking Databases")])),_:1}),s("ul",null,[s("li",null,[t(a,{to:"#database-overview"},{default:e(()=>n[14]||(n[14]=[o("Database Overview")])),_:1})]),s("li",null,[t(a,{to:"#table-overview"},{default:e(()=>n[15]||(n[15]=[o("Table Overview")])),_:1})])])])])]),n[17]||(n[17]=l(`<h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Almost all applications need to interact with databases, so Goravel provides a very simple and easy-to-use database interaction. Developers can use native SQL, query builder, and <a href="../orm/getting-started">Orm</a> to interact with databases. Currently, Goravel provides official support for the following four databases:</p><table><thead><tr><th>Database</th><th>Driver</th></tr></thead><tbody><tr><td>PostgreSQL</td><td><a href="https://github.com/goravel/postgres" target="_blank" rel="noopener noreferrer">github.com/goravel/postgres</a></td></tr><tr><td>MySQL</td><td><a href="https://github.com/goravel/mysql" target="_blank" rel="noopener noreferrer">github.com/goravel/mysql</a></td></tr><tr><td>SQL Server</td><td><a href="https://github.com/goravel/sqlserver" target="_blank" rel="noopener noreferrer">github.com/goravel/sqlserver</a></td></tr><tr><td>SQLite</td><td><a href="https://github.com/goravel/sqlite" target="_blank" rel="noopener noreferrer">github.com/goravel/sqlite</a></td></tr></tbody></table><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>The database configuration file is <code>config/database.go</code>. You can configure all database connections in this file and specify the default database connection. Most of the configuration in this file is based on the project&#39;s environment variables.</p><h3 id="connection-pool" tabindex="-1"><a class="header-anchor" href="#connection-pool"><span>Connection Pool</span></a></h3><p>You can configure the database connection pool in the configuration file to improve the concurrency performance by properly configuring the connection pool parameters:</p><table><thead><tr><th>Configuration Key</th><th>Description</th></tr></thead><tbody><tr><td>pool.max_idle_conns</td><td>Maximum idle connections</td></tr><tr><td>pool.max_open_conns</td><td>Maximum connections</td></tr><tr><td>pool.conn_max_idletime</td><td>Connection maximum idle time</td></tr><tr><td>pool.conn_max_lifetime</td><td>Connection maximum lifetime</td></tr></tbody></table><h3 id="read-write-splitting" tabindex="-1"><a class="header-anchor" href="#read-write-splitting"><span>Read-Write Splitting</span></a></h3><p>Sometimes you may want to use a database connection to execute <code>SELECT</code> statements, while <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements are executed by another database connection. In Goravel, it is easy to implement read-write splitting.</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// config/database.go</span></span>
<span class="line"><span class="token string">&quot;connections&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;driver&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;read&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.1&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;write&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>database<span class="token punctuation">.</span>Config<span class="token punctuation">{</span></span>
<span class="line">      <span class="token punctuation">{</span>Host<span class="token punctuation">:</span> <span class="token string">&quot;192.168.1.2&quot;</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> Database<span class="token punctuation">:</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">,</span> Username<span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;host&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;port&quot;</span><span class="token punctuation">:</span>     config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PORT&quot;</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;database&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_DATABASE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;forge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_USERNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> config<span class="token punctuation">.</span><span class="token function">Env</span><span class="token punctuation">(</span><span class="token string">&quot;DB_PASSWORD&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;charset&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;utf8mb4&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have added two keys, <code>read</code> and <code>write</code>, in the database configuration. <code>192.168.1.1</code> will be used as the &quot;read&quot; connection host, and <code>192.168.1.2</code> will be used as the &quot;write&quot; connection host. These two connections will share the configurations in the <code>mysql</code> array, such as the database prefix and character encoding. If there are multiple values in the <code>read</code> or <code>write</code> arrays, Goravel will randomly select the database host for each connection.</p><h2 id="running-native-sql-queries" tabindex="-1"><a class="header-anchor" href="#running-native-sql-queries"><span>Running Native SQL Queries</span></a></h2><p>After configuring the database connection, you can use <code>facades.DB()</code> to run queries. <code>facades.DB</code> provides various methods for running queries: <code>Select</code>, <code>Insert</code>, <code>Update</code>, <code>Delete</code>, and <code>Statement</code>.</p><h3 id="select" tabindex="-1"><a class="header-anchor" href="#select"><span>Select</span></a></h3><p>Use the <code>facades.DB().Select()</code> method to execute basic queries:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Get multiple records</span></span>
<span class="line"><span class="token keyword">var</span> products <span class="token punctuation">[</span><span class="token punctuation">]</span>Product</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>products<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM products&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Get a single record</span></span>
<span class="line"><span class="token keyword">var</span> product Product</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>product<span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM products WHERE id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note: Different database drivers require different placeholders. For example, the <code>?</code> placeholder is used for MySQL, while the <code>@</code> placeholder is used for PostgreSQL.</p></blockquote><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h3><p>Use the <code>facades.DB().Insert()</code> method to execute insertion statements:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (name, email) values (?, ?)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goravel@example.com&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h3><p>Use the <code>facades.DB().Update()</code> method to execute update statements:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">&quot;update users set name = ? where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h3><p>Use the <code>facades.DB().Delete()</code> method to execute delete statements:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;delete from users where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="statement" tabindex="-1"><a class="header-anchor" href="#statement"><span>Statement</span></a></h3><p>Use the <code>facades.DB().Statement()</code> method to execute general statements:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Statement</span><span class="token punctuation">(</span><span class="token string">&quot;drop table users&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="using-multiple-database-connections" tabindex="-1"><a class="header-anchor" href="#using-multiple-database-connections"><span>Using Multiple Database Connections</span></a></h3><p>If you define multiple database connections in the configuration file, you can specify the connection to use by calling the <code>facades.DB().Connection()</code> method:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> user User</span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;postgres&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">&quot;select * from users where id = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="database-transactions" tabindex="-1"><a class="header-anchor" href="#database-transactions"><span>Database Transactions</span></a></h2><p>You can use the <code>facades.DB().Transaction()</code> method to execute a series of operations in a database transaction. If an exception is thrown in the transaction closure, the transaction will be automatically rolled back. If the closure executes successfully, the transaction will be automatically committed:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;github.com/goravel/framework/contracts/database/db&quot;</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx db<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">&quot;products&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>Product<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;transaction product1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="manually-using-transactions" tabindex="-1"><a class="header-anchor" href="#manually-using-transactions"><span>Manually Using Transactions</span></a></h3><p>If you want to manually control the start, commit, and rollback of a transaction, you can use the <code>Begin</code>、<code>Commit</code> and <code>Rollback</code> methods:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into users (name) values (?)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Goravel&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="checking-databases" tabindex="-1"><a class="header-anchor" href="#checking-databases"><span>Checking Databases</span></a></h2><h3 id="database-overview" tabindex="-1"><a class="header-anchor" href="#database-overview"><span>Database Overview</span></a></h3><p>Goravel provides several Artisan commands to help you understand the structure of the database.</p><p>You can use the <code>db:show</code> command to view all tables in the database.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:show</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:show <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use the <code>db:table</code> command to view the structure of a specific table.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:table</span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="table-overview" tabindex="-1"><a class="header-anchor" href="#table-overview"><span>Table Overview</span></a></h3><p>If you want to get an overview of a single table in the database, you can execute the <code>db:table</code> Artisan command. This command provides an overview of a database table, including its columns, types, attributes, keys, and indexes:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token function">users</span></span>
<span class="line">go run <span class="token builtin class-name">.</span> artisan db:table <span class="token function">users</span> <span class="token parameter variable">--database</span><span class="token operator">=</span>postgres</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,49))])}const v=p(r,[["render",k],["__file","getting-started.html.vue"]]),b=JSON.parse('{"path":"/database/getting-started.html","title":"Getting Started","lang":"en-US","frontmatter":{"description":"Getting Started Introduction Almost all applications need to interact with databases, so Goravel provides a very simple and easy-to-use database interaction. Developers can use ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://goravel.dev/zh/database/getting-started.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/database/getting-started.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/database/getting-started.html"}],["meta",{"property":"og:description","content":"Getting Started Introduction Almost all applications need to interact with databases, so Goravel provides a very simple and easy-to-use database interaction. Developers can use ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Getting Started\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[{"level":3,"title":"Connection Pool","slug":"connection-pool","link":"#connection-pool","children":[]},{"level":3,"title":"Read-Write Splitting","slug":"read-write-splitting","link":"#read-write-splitting","children":[]}]},{"level":2,"title":"Running Native SQL Queries","slug":"running-native-sql-queries","link":"#running-native-sql-queries","children":[{"level":3,"title":"Select","slug":"select","link":"#select","children":[]},{"level":3,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":3,"title":"Update","slug":"update","link":"#update","children":[]},{"level":3,"title":"Delete","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"Statement","slug":"statement","link":"#statement","children":[]},{"level":3,"title":"Using Multiple Database Connections","slug":"using-multiple-database-connections","link":"#using-multiple-database-connections","children":[]}]},{"level":2,"title":"Database Transactions","slug":"database-transactions","link":"#database-transactions","children":[{"level":3,"title":"Manually Using Transactions","slug":"manually-using-transactions","link":"#manually-using-transactions","children":[]}]},{"level":2,"title":"Checking Databases","slug":"checking-databases","link":"#checking-databases","children":[{"level":3,"title":"Database Overview","slug":"database-overview","link":"#database-overview","children":[]},{"level":3,"title":"Table Overview","slug":"table-overview","link":"#table-overview","children":[]}]}],"git":{},"filePathRelative":"database/getting-started.md","autoDesc":true}');export{v as comp,b as data};
