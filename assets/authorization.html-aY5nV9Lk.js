import{_ as i,c as u,b as s,e as t,f as e,d as a,a as r,r as o,o as d}from"./app-o_wgz7qh.js";const k={},v={class:"table-of-contents"};function m(g,n){const p=o("router-link"),c=o("RouteLink"),l=o("CommentService");return d(),u("div",null,[n[13]||(n[13]=s("h1",{id:"用户授权",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#用户授权"},[s("span",null,"用户授权")])],-1)),s("nav",v,[s("ul",null,[s("li",null,[t(p,{to:"#简介"},{default:e(()=>n[0]||(n[0]=[a("简介")])),_:1})]),s("li",null,[t(p,{to:"#拦截器-gates"},{default:e(()=>n[1]||(n[1]=[a("拦截器（Gates）")])),_:1}),s("ul",null,[s("li",null,[t(p,{to:"#编写拦截器-gates"},{default:e(()=>n[2]||(n[2]=[a("编写拦截器（Gates）")])),_:1})]),s("li",null,[t(p,{to:"#行为授权控制"},{default:e(()=>n[3]||(n[3]=[a("行为授权控制")])),_:1})]),s("li",null,[t(p,{to:"#拦截器-gates-返回-responses"},{default:e(()=>n[4]||(n[4]=[a("拦截器（Gates）返回（Responses）")])),_:1})]),s("li",null,[t(p,{to:"#拦截器-gates-优先级"},{default:e(()=>n[5]||(n[5]=[a("拦截器（Gates）优先级")])),_:1})]),s("li",null,[t(p,{to:"#注入-context"},{default:e(()=>n[6]||(n[6]=[a("注入 Context")])),_:1})])])]),s("li",null,[t(p,{to:"#策略-policies"},{default:e(()=>n[7]||(n[7]=[a("策略（Policies）")])),_:1}),s("ul",null,[s("li",null,[t(p,{to:"#生成策略"},{default:e(()=>n[8]||(n[8]=[a("生成策略")])),_:1})]),s("li",null,[t(p,{to:"#编写策略"},{default:e(()=>n[9]||(n[9]=[a("编写策略")])),_:1})])])])])]),n[14]||(n[14]=s("h2",{id:"简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#简介"},[s("span",null,"简介")])],-1)),s("p",null,[n[11]||(n[11]=a("除了提供内置的 ")),t(c,{to:"/zh/security/authentication.html"},{default:e(()=>n[10]||(n[10]=[a("身份验证（authentication)")])),_:1}),n[12]||(n[12]=a(" 服务外，Goravel 还提供了一种可以很简单就进行使用的方法，来对用户与资源的授权关系进行管理。即使用户已经通过了「身份验证（authentication)」， 用户也可能无权对应用程序中的模型或数据库记录进行删除或更改。"))]),n[15]||(n[15]=r(`<p>Goravel 主要提供了两种授权操作的方法: <a href="#%E6%8B%A6%E6%88%AA%E5%99%A8%EF%BC%88Gates%EF%BC%89">拦截器</a> 和 <a href="#%E7%AD%96%E7%95%A5%EF%BC%88Policies%EF%BC%89">策略</a>。可以把拦截器（gates）和策略（policies）想象成路由和控制器。拦截器（Gates）提供了一种轻便的基于闭包函数的授权方法，像是路由。而策略（policies)，就像是一个控制器，对特定模型或资源进行管理。在本文档中，我们将首先探讨拦截器（gates），然后是策略（policies)。</p><p>您在构建应用程序时，不用为是使用拦截器（gates）或是使用策略（policies）而担心，并不需要在两者中进行唯一选择。大多数的应用程序都同时包含两种方法，并且同时使用两者。</p><h2 id="拦截器-gates" tabindex="-1"><a class="header-anchor" href="#拦截器-gates"><span>拦截器（Gates）</span></a></h2><h3 id="编写拦截器-gates" tabindex="-1"><a class="header-anchor" href="#编写拦截器-gates"><span>编写拦截器（Gates）</span></a></h3><p>拦截器（Gates）是用来确定用户是否有权执行给定操作的闭包函数。默认条件下，拦截器（Gates）的使用，是在 <code>app/providers/auth_service_provider.go</code> 文件中的 <code>Boot</code> 方法里来规定 <code>Gate</code> 规则。</p><p>在下面的例子中，我们将定义一个拦截器（Gates)，通过比较用户的 id 来判断是否有对 post 数据操作的权限：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> providers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;context&quot;</span></span>
<span class="line"></span>
<span class="line">  contractsaccess <span class="token string">&quot;github.com/goravel/framework/contracts/auth/access&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/auth/access&quot;</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> AuthServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>AuthServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver <span class="token operator">*</span>AuthServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Define</span><span class="token punctuation">(</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> arguments <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> contractsaccess<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">    user <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span></span>
<span class="line">    post <span class="token operator">:=</span> arguments<span class="token punctuation">[</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> user<span class="token punctuation">.</span>ID <span class="token operator">==</span> post<span class="token punctuation">.</span>UserID <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewAllowResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewDenyResponse</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行为授权控制" tabindex="-1"><a class="header-anchor" href="#行为授权控制"><span>行为授权控制</span></a></h3><p>如果需要通过拦截器（Gates）来对行为进行授权控制，您可以通过调用 <code>Gate</code> 中的 <code>Allows</code> 或 <code>Denies</code> 方法。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> controllers</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/facades&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> UserController <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>UserController<span class="token punctuation">)</span> <span class="token function">Show</span><span class="token punctuation">(</span>ctx http<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> post models<span class="token punctuation">.</span>Post</span>
<span class="line">  <span class="token keyword">if</span> facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Allows</span><span class="token punctuation">(</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;post&quot;</span><span class="token punctuation">:</span> post<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以通过 <code>any</code> 或 <code>none</code> 方法来一次性授权多个行为:</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;delete-post&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;post&quot;</span><span class="token punctuation">:</span> post<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 用户可以提交update或delete...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">None</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;delete-post&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;post&quot;</span><span class="token punctuation">:</span> post<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 用户不可以提交update和delete...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器-gates-返回-responses" tabindex="-1"><a class="header-anchor" href="#拦截器-gates-返回-responses"><span>拦截器（Gates）返回（Responses）</span></a></h3><p>使用 <code>Allows</code> 方法，将仅返回一个简单的布尔值，您也还可以使用 <code>Inspect</code> 方法来返回拦截器（Gates）中的所有响应值：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">response <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inspect</span><span class="token punctuation">(</span><span class="token string">&quot;edit-settings&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">Allowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 行为进行授权...</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器-gates-优先级" tabindex="-1"><a class="header-anchor" href="#拦截器-gates-优先级"><span>拦截器（Gates）优先级</span></a></h3><p>有时，您可能希望将所有权限授予特定用户。您可以使用 <code>Before</code> 方法。该方法将定义该授权拦截规则，优先于所有其他授权拦截规则前执行：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> ability <span class="token builtin">string</span><span class="token punctuation">,</span> arguments <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> contractsaccess<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  user <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token function">isAdministrator</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewAllowResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>Before</code> 返回的是非 nil 结果，则该返回将会被视为最终的检查结果。</p><p>您还可以使用 <code>After</code> 方法，来定义在所有授权拦截规则执行后，再次进行授权拦截规则判定：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> ability <span class="token builtin">string</span><span class="token punctuation">,</span> arguments <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">,</span> result contractsaccess<span class="token punctuation">.</span>Response<span class="token punctuation">)</span> contractsaccess<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  user <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token function">isAdministrator</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewAllowResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：只有当 <code>facades.Gate().Define</code> 返回 nil 时，才会应用 <code>After</code> 的返回结果。</p></blockquote><h3 id="注入-context" tabindex="-1"><a class="header-anchor" href="#注入-context"><span>注入 Context</span></a></h3><p><code>context</code> 将被传入到 <code>Before</code>, <code>After</code>, <code>Define</code> 方法中。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Allows</span><span class="token punctuation">(</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span></span>
<span class="line">  <span class="token string">&quot;post&quot;</span><span class="token punctuation">:</span> post<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="策略-policies" tabindex="-1"><a class="header-anchor" href="#策略-policies"><span>策略（Policies）</span></a></h2><h3 id="生成策略" tabindex="-1"><a class="header-anchor" href="#生成策略"><span>生成策略</span></a></h3><p>您可以使用 <code>make:policy</code> Artisan 命令生成策略。生成的策略将放置在 <code>app/policies</code> 目录中。如果应用程序中不存在此目录，Goravel 将自动创建：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>policy PostPolicy</span>
<span class="line"><span class="token keyword">go</span> run <span class="token punctuation">.</span> artisan <span class="token builtin">make</span><span class="token punctuation">:</span>policy user<span class="token operator">/</span>PostPolicy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写策略" tabindex="-1"><a class="header-anchor" href="#编写策略"><span>编写策略</span></a></h3><p>可以为策略添加具体的方法，例如，让我们在 <code>PostPolicy</code> 上定义一个 <code>Update</code> 方法，该方法判断 <code>models.User</code> 是否可以更新 <code>models.Post</code>。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> policies</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&quot;context&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token string">&quot;github.com/goravel/framework/contracts/auth/access&quot;</span></span>
<span class="line">  contractsaccess <span class="token string">&quot;github.com/goravel/framework/contracts/auth/access&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> PostPolicy <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewPostPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>PostPolicy <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&amp;</span>PostPolicy<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>PostPolicy<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> arguments <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> contractsaccess<span class="token punctuation">.</span>Response <span class="token punctuation">{</span></span>
<span class="line">  user <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>User<span class="token punctuation">)</span></span>
<span class="line">  post <span class="token operator">:=</span> arguments<span class="token punctuation">[</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Post<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">  <span class="token keyword">if</span> user<span class="token punctuation">.</span>ID <span class="token operator">==</span> post<span class="token punctuation">.</span>UserID <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewAllowResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> access<span class="token punctuation">.</span><span class="token function">NewDenyResponse</span><span class="token punctuation">(</span><span class="token string">&quot;You do not own this post.&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以在 <code>app/providers/auth_service_provider.go</code> 中注册策略：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">facades<span class="token punctuation">.</span><span class="token function">Gate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Define</span><span class="token punctuation">(</span><span class="token string">&quot;update-post&quot;</span><span class="token punctuation">,</span> policies<span class="token punctuation">.</span><span class="token function">NewPostPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Update<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您可以继续根据需要为策略授权的各种操作定义其他方法。例如，您可以定义 <code>View</code> 或 <code>Delete</code> 方法来授权各种与 <code>models.Post</code> 相关的操作，但请记住，您可以自由地为策略方法命名任何您喜欢的名称。</p>`,35)),t(l)])}const h=i(k,[["render",m],["__file","authorization.html.vue"]]),f=JSON.parse('{"path":"/zh/security/authorization.html","title":"用户授权","lang":"zh-CN","frontmatter":{"description":"用户授权 简介 除了提供内置的 服务外，Goravel 还提供了一种可以很简单就进行使用的方法，来对用户与资源的授权关系进行管理。即使用户已经通过了「身份验证（authentication)」， 用户也可能无权对应用程序中的模型或数据库记录进行删除或更改。 Goravel 主要提供了两种授权操作的方法: 拦截器 和 策略。可以把拦截器（gates）和策...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/security/authorization.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/security/authorization.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/security/authorization.html"}],["meta",{"property":"og:description","content":"用户授权 简介 除了提供内置的 服务外，Goravel 还提供了一种可以很简单就进行使用的方法，来对用户与资源的授权关系进行管理。即使用户已经通过了「身份验证（authentication)」， 用户也可能无权对应用程序中的模型或数据库记录进行删除或更改。 Goravel 主要提供了两种授权操作的方法: 拦截器 和 策略。可以把拦截器（gates）和策..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用户授权\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"拦截器（Gates）","slug":"拦截器-gates","link":"#拦截器-gates","children":[{"level":3,"title":"编写拦截器（Gates）","slug":"编写拦截器-gates","link":"#编写拦截器-gates","children":[]},{"level":3,"title":"行为授权控制","slug":"行为授权控制","link":"#行为授权控制","children":[]},{"level":3,"title":"拦截器（Gates）返回（Responses）","slug":"拦截器-gates-返回-responses","link":"#拦截器-gates-返回-responses","children":[]},{"level":3,"title":"拦截器（Gates）优先级","slug":"拦截器-gates-优先级","link":"#拦截器-gates-优先级","children":[]},{"level":3,"title":"注入 Context","slug":"注入-context","link":"#注入-context","children":[]}]},{"level":2,"title":"策略（Policies）","slug":"策略-policies","link":"#策略-policies","children":[{"level":3,"title":"生成策略","slug":"生成策略","link":"#生成策略","children":[]},{"level":3,"title":"编写策略","slug":"编写策略","link":"#编写策略","children":[]}]}],"git":{},"filePathRelative":"zh/security/authorization.md","autoDesc":true}');export{h as comp,f as data};
