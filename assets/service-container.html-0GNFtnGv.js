import{_ as i,r as o,o as l,c as u,a as n,b as s,w as e,d as a,e as p}from"./app-C0nxWfeE.js";const d={},r=n("h1",{id:"服务容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#服务容器"},[n("span",null,"服务容器")])],-1),k={class:"table-of-contents"},v=p('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Goravel的服务容器是一个功能强大的工具，用于管理类依赖和实现依赖注入。它包含了框架所有模块，并允许您将自己的服务绑定到容器中，在需要时进行解析。服务容器为Goravel周边的第三方包提供了有力的支持。</p><h2 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定"><span>绑定</span></a></h2><h3 id="简单绑定" tabindex="-1"><a class="header-anchor" href="#简单绑定"><span>简单绑定</span></a></h3>',4),h=n("code",null,"app",-1),g=n("code",null,"Bind",-1),m=n("code",null,"Bind",-1),f=n("code",null,"key",-1),b=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> route

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/goravel/framework/contracts/foundation&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> Binding <span class="token operator">=</span> <span class="token string">&quot;goravel.route&quot;</span>

<span class="token keyword">type</span> ServiceProvider <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>route <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	app<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span>Binding<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">NewRoute</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>route <span class="token operator">*</span>ServiceProvider<span class="token punctuation">)</span> <span class="token function">Boot</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前所述，您通常会在服务提供者内部与容器进行交互；但是，如果您希望在服务提供者外部与容器进行交互，则可以通过 <code>App</code> facade 进行：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>facades<span class="token punctuation">.</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单例的绑定" tabindex="-1"><a class="header-anchor" href="#单例的绑定"><span>单例的绑定</span></a></h3><p><code>Singleton</code> 方法将类或接口绑定到只应解析一次的容器中。解析单例绑定后，后续调用容器时将返回相同的对象实例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">Singleton</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">NewGin</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绑定实例" tabindex="-1"><a class="header-anchor" href="#绑定实例"><span>绑定实例</span></a></h3><p>还可以使用 <code>Instance</code> 方法将现有对象实例绑定到容器中。给定实例将始终在后续调用容器时返回：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">Instance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="绑定时携带参数" tabindex="-1"><a class="header-anchor" href="#绑定时携带参数"><span>绑定时携带参数</span></a></h3><p>如果您需要一些额外的参数来构建服务实例，可以使用 <code>BindWith</code> 方法向闭包传递参数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>app<span class="token punctuation">.</span><span class="token function">BindWith</span><span class="token punctuation">(</span>Binding<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>app foundation<span class="token punctuation">.</span>Application<span class="token punctuation">,</span> parameters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">)</span> <span class="token punctuation">(</span>any<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">NewRoute</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">MakeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h2><h3 id="make-方法" tabindex="-1"><a class="header-anchor" href="#make-方法"><span><code>Make</code> 方法</span></a></h3><p>您可以使用 <code>Make</code> 方法从容器中解析类实例。<code>Make</code> 方法接受您希望解析的 <code>key</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您在服务提供商之外的代码位置无法访问 <code>app</code> 变量，则可以使用 <code>App</code> facade 从容器解析类实例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> facades<span class="token punctuation">.</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="makewith-方法" tabindex="-1"><a class="header-anchor" href="#makewith-方法"><span><code>MakeWith</code> 方法</span></a></h3><p>如果您的某些类的依赖项无法通过容器解析，您可以通过将它们作为关联数组传递给 <code>MakeWith</code> 方法来注入它们，与之相对应的是 <code>BindWith</code> 绑定方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>instance<span class="token punctuation">,</span> err <span class="token operator">:=</span> app<span class="token punctuation">.</span><span class="token function">MakeWith</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>any<span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h3><p>框架提供有一些便捷的方法可以快速解析出各种 <code>facades</code>: <code>MakeArtisan</code>, <code>MakeAuth</code>, <code>MakeCache</code>, <code>MakeConfig</code>, <code>MakeCrypt</code>, <code>MakeEvent</code>, <code>MakeGate</code>, <code>MakeGrpc</code>, <code>MakeHash</code>, <code>MakeLog</code>, <code>MakeMail</code>, <code>MakeOrm</code>, <code>MakeQueue</code>, <code>MakeRateLimiter</code>, <code>MakeRoute</code>, <code>MakeSchedule</code>, <code>MakeStorage</code>, <code>MakeValidation</code>.</p>`,23);function _(y,M){const t=o("router-link"),c=o("RouteLink");return l(),u("div",null,[r,n("nav",k,[n("ul",null,[n("li",null,[s(t,{to:"#简介"},{default:e(()=>[a("简介")]),_:1})]),n("li",null,[s(t,{to:"#绑定"},{default:e(()=>[a("绑定")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#简单绑定"},{default:e(()=>[a("简单绑定")]),_:1})]),n("li",null,[s(t,{to:"#单例的绑定"},{default:e(()=>[a("单例的绑定")]),_:1})]),n("li",null,[s(t,{to:"#绑定实例"},{default:e(()=>[a("绑定实例")]),_:1})]),n("li",null,[s(t,{to:"#绑定时携带参数"},{default:e(()=>[a("绑定时携带参数")]),_:1})])])]),n("li",null,[s(t,{to:"#解析"},{default:e(()=>[a("解析")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#make-方法"},{default:e(()=>[a("Make 方法")]),_:1})]),n("li",null,[s(t,{to:"#makewith-方法"},{default:e(()=>[a("MakeWith 方法")]),_:1})]),n("li",null,[s(t,{to:"#其他方法"},{default:e(()=>[a("其他方法")]),_:1})])])])])]),v,n("p",null,[a("几乎所有的服务容器绑定都会在 "),s(c,{to:"/zh/architecutre-concepts/service-providers.html"},{default:e(()=>[a("服务提供者")]),_:1}),a(" 中注册，在服务提供者中，您可以通过 "),h,a(" 参数访问容器，然后通过容器的 "),g,a(" 方法注册绑定，"),m,a(" 方法的第一个参数为要绑定 "),f,a("，第二个参数是一个返回类实例的闭包：")]),b])}const x=i(d,[["render",_],["__file","service-container.html.vue"]]),B=JSON.parse('{"path":"/zh/architecutre-concepts/service-container.html","title":"服务容器","lang":"zh-CN","frontmatter":{"description":"服务容器 简介 Goravel的服务容器是一个功能强大的工具，用于管理类依赖和实现依赖注入。它包含了框架所有模块，并允许您将自己的服务绑定到容器中，在需要时进行解析。服务容器为Goravel周边的第三方包提供了有力的支持。 绑定 简单绑定 几乎所有的服务容器绑定都会在 中注册，在服务提供者中，您可以通过 app 参数访问容器，然后通过容器的 Bind ...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://goravel.dev/architecutre-concepts/service-container.html"}],["meta",{"property":"og:url","content":"https://goravel.dev/zh/architecutre-concepts/service-container.html"}],["meta",{"property":"og:site_name","content":"Goravel"}],["meta",{"property":"og:title","content":"/architecutre-concepts/service-container.html"}],["meta",{"property":"og:description","content":"服务容器 简介 Goravel的服务容器是一个功能强大的工具，用于管理类依赖和实现依赖注入。它包含了框架所有模块，并允许您将自己的服务绑定到容器中，在需要时进行解析。服务容器为Goravel周边的第三方包提供了有力的支持。 绑定 简单绑定 几乎所有的服务容器绑定都会在 中注册，在服务提供者中，您可以通过 app 参数访问容器，然后通过容器的 Bind ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"服务容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"绑定","slug":"绑定","link":"#绑定","children":[{"level":3,"title":"简单绑定","slug":"简单绑定","link":"#简单绑定","children":[]},{"level":3,"title":"单例的绑定","slug":"单例的绑定","link":"#单例的绑定","children":[]},{"level":3,"title":"绑定实例","slug":"绑定实例","link":"#绑定实例","children":[]},{"level":3,"title":"绑定时携带参数","slug":"绑定时携带参数","link":"#绑定时携带参数","children":[]}]},{"level":2,"title":"解析","slug":"解析","link":"#解析","children":[{"level":3,"title":"Make 方法","slug":"make-方法","link":"#make-方法","children":[]},{"level":3,"title":"MakeWith 方法","slug":"makewith-方法","link":"#makewith-方法","children":[]},{"level":3,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]}]}],"git":{},"filePathRelative":"zh/architecutre-concepts/service-container.md","autoDesc":true}');export{x as comp,B as data};
